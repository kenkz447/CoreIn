{"version":3,"sources":["node_modules/browser-pack/_prelude.js","develop/scripts/develop/scripts/dbgroupvn.jsx","develop/scripts/dbgroupvn/bo-suu-tap/index.jsx","develop/scripts/dbgroupvn/cong-trinh/components/page-item.jsx","develop/scripts/dbgroupvn/cong-trinh/index.jsx","develop/scripts/dbgroupvn/du-an/components/big-map.jsx","develop/scripts/dbgroupvn/du-an/components/category.jsx","develop/scripts/dbgroupvn/du-an/components/search-area.jsx","develop/scripts/dbgroupvn/du-an/components/small-map.jsx","develop/scripts/dbgroupvn/du-an/components/sreach-city.jsx","develop/scripts/dbgroupvn/du-an/helper/get-current-category.js","develop/scripts/dbgroupvn/du-an/helper/render-items.jsx","develop/scripts/dbgroupvn/du-an/index.jsx","develop/scripts/dbgroupvn/du-an/page-configure.js","develop/scripts/dbgroupvn/gioi-thieu/components/quy-trinh.jsx","develop/scripts/dbgroupvn/gioi-thieu/index.jsx","develop/scripts/dbgroupvn/root.jsx","develop/scripts/dbgroupvn/routes.jsx","develop/scripts/dbgroupvn/shared/_layout.jsx","develop/scripts/dbgroupvn/shared/_layout/footer.jsx","develop/scripts/dbgroupvn/shared/_layout/footer/copy-right.jsx","develop/scripts/dbgroupvn/shared/_layout/footer/menu.jsx","develop/scripts/dbgroupvn/shared/_layout/footer/socials.jsx","develop/scripts/dbgroupvn/shared/_layout/header.jsx","develop/scripts/dbgroupvn/shared/_layout/header/develop/scripts/dbgroupvn/shared/_layout/header/header-mobile.jsx","develop/scripts/dbgroupvn/shared/_layout/header/language-select.jsx","develop/scripts/dbgroupvn/shared/_layout/header/logo.jsx","develop/scripts/dbgroupvn/shared/_layout/header/menu.jsx","develop/scripts/dbgroupvn/shared/_layout/header/search.jsx","develop/scripts/dbgroupvn/shared/_layout/main/base-page.jsx","develop/scripts/dbgroupvn/shared/_layout/main/develop/scripts/dbgroupvn/shared/_layout/main/connected-base-page.jsx","develop/scripts/dbgroupvn/shared/_layout/main/page-loading.jsx","develop/scripts/dbgroupvn/shared/_layout/mobile/menu.jsx","develop/scripts/dbgroupvn/shared/_localization.jsx","develop/scripts/dbgroupvn/shared/_localization/en-us.jsx","develop/scripts/dbgroupvn/shared/components.jsx","develop/scripts/dbgroupvn/shared/components/_commons/delay-render.jsx","develop/scripts/dbgroupvn/shared/components/_commons/extended-ConnectedRouter.jsx","develop/scripts/dbgroupvn/shared/components/category-menu.jsx","develop/scripts/dbgroupvn/shared/components/connected-breacrumbs.jsx","develop/scripts/dbgroupvn/shared/components/du-an/du-an.jsx","develop/scripts/dbgroupvn/shared/components/gmap/constants/marker-descriptions.js","develop/scripts/dbgroupvn/shared/components/gmap/google-map.jsx","develop/scripts/dbgroupvn/shared/components/gmap/helpers/balloon-pos.js","develop/scripts/dbgroupvn/shared/components/gmap/helpers/calc-markers-visibility.js","develop/scripts/dbgroupvn/shared/components/gmap/helpers/custom-distance.js","develop/scripts/dbgroupvn/shared/components/gmap/helpers/marker-styles.js","develop/scripts/dbgroupvn/shared/components/gmap/marker.jsx","develop/scripts/dbgroupvn/shared/components/image.jsx","develop/scripts/dbgroupvn/shared/components/page-article.jsx","develop/scripts/dbgroupvn/shared/components/page-item.jsx","develop/scripts/dbgroupvn/shared/components/pagination.jsx","develop/scripts/dbgroupvn/shared/components/pagination/item-container.jsx","develop/scripts/dbgroupvn/shared/components/pagination/item-wrapper.jsx","develop/scripts/dbgroupvn/shared/components/pagination/pager-ajax.jsx","develop/scripts/dbgroupvn/shared/components/pagination/pager.jsx","develop/scripts/dbgroupvn/shared/components/section-title.jsx","develop/scripts/dbgroupvn/shared/components/sidebar-menu.jsx","develop/scripts/dbgroupvn/shared/components/sidebar-widget.jsx","develop/scripts/dbgroupvn/shared/components/sidebar.jsx","develop/scripts/dbgroupvn/shared/reducer.jsx","develop/scripts/dbgroupvn/shared/reducers/google-map.jsx","develop/scripts/dbgroupvn/shared/reducers/localization.jsx","develop/scripts/dbgroupvn/shared/ultilities.jsx","develop/scripts/dbgroupvn/shared/ultilities/fetchEntities.jsx","develop/scripts/dbgroupvn/shared/ultilities/requestData.jsx","develop/scripts/dbgroupvn/thu-vien/components/default-view.jsx","develop/scripts/dbgroupvn/thu-vien/configuration.js","develop/scripts/dbgroupvn/thu-vien/helper/functions.js","develop/scripts/dbgroupvn/thu-vien/index.jsx","develop/scripts/dbgroupvn/trang-chu/components/cong-trinh.jsx","develop/scripts/dbgroupvn/trang-chu/components/du-an.jsx","develop/scripts/dbgroupvn/trang-chu/components/slider.jsx","develop/scripts/dbgroupvn/trang-chu/index.jsx","node_modules/classNames/index.js","node_modules/react-pure-render/function.js","node_modules/react-pure-render/shallowEqual.js","node_modules/underscore/underscore.js"],"names":[],"mappings":"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":"dbgroupvn.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","﻿const { render } = require('react-dom');\r\nconst { createStore, applyMiddleware } = require('redux');\r\nconst { routerMiddleware, push } = require('react-router-redux');\r\n\r\nconst { history, Root } = require('./dbgroupvn/root.jsx');\r\nconst updateLayout = require('./dbgroupvn/shared/_layout').updateLayout;\r\n\r\nconst reducer = require('./dbgroupvn/shared/reducer');\r\nconst middleware = routerMiddleware(history)\r\n\r\nconst store = createStore(reducer, applyMiddleware(middleware, updateLayout));\r\n\r\nconst initLocalization = require('./dbgroupvn/shared/reducers/localization').actions.init;\r\nconst initMenu = require('./dbgroupvn/shared/_layout/header/menu').actions.init;\r\n\r\nimport { INIT_ROUTES } from './dbgroupvn/routes';\r\n\r\nglobal.localizationString = require('./dbgroupvn/shared/_localization');\r\n\r\n$(document).ready(function () {\r\n    $.ajax({ \r\n        url: \"/DbGroupVn/GetSiteInitData\",\r\n        success: (response) => {\r\n\r\n            store.dispatch(initLocalization(response.localization))\r\n            global.localizationString.setLanguage(response.localization.currentLanguage)\r\n\r\n            //Routes\r\n            store.dispatch({type: INIT_ROUTES})\r\n\r\n            //Khởi tạo giá trị mặc định cho components     \r\n            store.dispatch(initMenu(response.menu))\r\n\r\n            render(\r\n                <Root store={store} />,\r\n                document.getElementById('root')\r\n            );\r\n        }\r\n    });\r\n});\r\n\r\nfunction onElementHeightChange(elm, callback) {\r\n    var lastHeight = elm.clientHeight, newHeight;\r\n    (function run() {\r\n        newHeight = elm.clientHeight;\r\n        if (lastHeight != newHeight)\r\n            callback();\r\n        lastHeight = newHeight;\r\n\r\n        if (elm.onElementHeightChangeTimer)\r\n            clearTimeout(elm.onElementHeightChangeTimer);\r\n\r\n        elm.onElementHeightChangeTimer = setTimeout(run, 200);\r\n    })();\r\n}\r\n\r\n//Nếu height của body thay đổi thì refresh AOS\r\nonElementHeightChange(document.body, function () {\r\n    AOS.refresh();\r\n});\r\n\r\nglobal.__DEV__ = true;","const { bindActionCreators } = require('redux');\r\nconst { connect } = require('react-redux')\r\n\r\nimport { Container, Row, Col } from 'reactstrap'\r\nimport BasePage from '../shared/_layout/main/base-page'\r\nimport { refreshRoutePath } from '../routes'\r\n\r\nimport { Sidebar, Image, CategoryMenu } from '../shared/components'\r\n\r\nimport { dataRequest } from '../shared/ultilities'\r\nimport PageItem from '../shared/components'\r\n\r\nclass PageComponent extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.renderSidebar = this.renderSidebar.bind(this)\r\n        this.fetchData = this.fetchData.bind(this)\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { onError, onDataFetch, refreshRoutePath, categories, page, items, currentCategory  } = this.props\r\n\r\n        if (!page)\r\n            $.get('/page/getsingle?entityName=bo-suu-tap', function (response) {\r\n                onDataFetch({ page: response.details }, 50);\r\n            })\r\n        if (!categories)\r\n            $.get('/TaxonomyUI/GetTaxonomies', { taxonomyTypeId: 30003 }, function (response) {\r\n                onDataFetch({ categories: response }, 50)\r\n            })\r\n\r\n        if (!items)\r\n            this.fetchData(currentCategory)\r\n\r\n        refreshRoutePath('bo-suu-tap')\r\n    }\r\n\r\n    fetchData(currentCategory) {\r\n                const { onDataFetch } = this.props\r\n\r\n            dataRequest('/collection/gettabledata', 9, 1, null, null, currentCategory && { 30003: currentCategory.id }, null, function (response) {\r\n                onDataFetch({ items: response }, 0)\r\n            })\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        const {currentCategory} = this.props;\r\n        if(currentCategory && nextProps.currentCategory && currentCategory.id != nextProps.currentCategory.id)\r\n        this.fetchData(nextProps.currentCategory)\r\n    }\r\n\r\n    renderSidebar() {\r\n        const { categories, onDataFetch, currentCategory } = this.props;\r\n\r\n        return (\r\n            <Sidebar>\r\n                { categories && <CategoryMenu currentCategory={currentCategory} categories={ categories } onDataFetch={onDataFetch}/> }\r\n            </Sidebar>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        \r\n        if (this.props.dataFetchProgress != 100)\r\n            return null;\r\n\r\n        const { page: { thumbnail }, categories, items , currentCategory} = this.props;\r\n\r\n        return (\r\n            <Container id=\"bo-suu-tap\">\r\n                <Row>\r\n                    <Col lg=\"3\">\r\n                        { this.renderSidebar() }\r\n                    </Col>\r\n                    <Col xs=\"12\" lg=\"9\">\r\n                        <Image {...thumbnail} />\r\n                        <div className=\"page-titles mt-4 mb-3\">\r\n                            <span className=\"page-title\">{localizationString.getString(\"Bộ sưu tập\")}</span>\r\n                            <span>|</span>\r\n                            <span className=\"page-title\">{currentCategory ? currentCategory.title :localizationString.getString(\"Tất cả\") }</span>\r\n                        </div>\r\n                        <Row>\r\n                            {\r\n                                items.length &&\r\n                                items.map((item, index) => {\r\n                                    return (\r\n                                        <Col key={ item.id } xs=\"6\" lg=\"4\" className=\"page-item\">\r\n                                            <PageItem data={ item } extraText={item.area} basePath={'./bo-suu-tap'} />\r\n                                        </Col>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst stateToProps = (state) => ({\r\n\r\n})\r\n\r\nconst dispathToProps = (dispath) => (\r\n    bindActionCreators({ refreshRoutePath }, dispath)\r\n)\r\n\r\nconst ConnectedPageComponent = connect(stateToProps, dispathToProps)(PageComponent)\r\n\r\nmodule.exports = BasePage({ page: 'bo-suu-tap', showBreadcrumbs: true })(ConnectedPageComponent);","const { Link } = require('react-router-dom');\r\n\r\nclass PageItem extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.renderLink = this.renderLink.bind(this);\r\n    }\r\n\r\n    renderLink(title) {\r\n        return(\r\n            <Link to=\"/cong-trinh\"><span>{title}</span></Link>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { data: { thumbnailUrl, title, acreage} } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"page-item-thumbnail\">\r\n                    <img className=\"w-100\" src={`/${thumbnailUrl}`}/>\r\n                    <div className=\"overlay\"/>\r\n                    {this.renderLink(localizationString.getString(\"Chi tiết\"))}\r\n                </div>\r\n                <div className=\"page-item-title\">\r\n                    {this.renderLink(title)}\r\n                    <span className=\"extra\">\r\n                        { acreage }\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nmodule.exports = PageItem;","const { bindActionCreators } = require('redux');\r\nconst { connect } = require('react-redux')\r\n\r\nimport { Container, Row, Col } from 'reactstrap'\r\nimport BasePage from '../shared/_layout/main/base-page'\r\nimport { refreshRoutePath } from '../routes'\r\n\r\nimport { Sidebar, Image, CategoryMenu } from '../shared/components'\r\n\r\nimport { dataRequest } from '../shared/ultilities'\r\nimport PageItem from './components/page-item'\r\n\r\nclass PageComponent extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.renderSidebar = this.renderSidebar.bind(this)\r\n        this.fetchData = this.fetchData.bind(this)\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { onError, onDataFetch, refreshRoutePath, categories, page, items, currentCategory  } = this.props\r\n\r\n        if (!page)\r\n            $.get('/page/getsingle?entityName=cong-trinh', function (response) {\r\n                onDataFetch({ page: response.details }, 50);\r\n            })\r\n        if (!categories)\r\n            $.get('/TaxonomyUI/GetTaxonomies', { taxonomyTypeId: 10003 }, function (response) {\r\n                onDataFetch({ categories: response }, 50)\r\n            })\r\n\r\n        if (!items)\r\n            this.fetchData(currentCategory)\r\n\r\n        refreshRoutePath('cong-trinh')\r\n    }\r\n\r\n    fetchData(currentCategory) {\r\n                const { onDataFetch } = this.props\r\n\r\n            dataRequest('/construction/gettabledata', 9, 1, null, null, currentCategory && { 10003: currentCategory.id }, null, function (response) {\r\n                onDataFetch({ items: response }, 0)\r\n            })\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        const {currentCategory} = this.props;\r\n        if(currentCategory && nextProps.currentCategory && currentCategory.id != nextProps.currentCategory.id)\r\n        this.fetchData(nextProps.currentCategory)\r\n    }\r\n\r\n    renderSidebar() {\r\n        const { categories, onDataFetch, currentCategory } = this.props;\r\n\r\n        return (\r\n            <Sidebar>\r\n                { categories && <CategoryMenu currentCategory={currentCategory} categories={ categories } onDataFetch={onDataFetch}/> }\r\n            </Sidebar>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        \r\n        if (this.props.dataFetchProgress != 100)\r\n            return null;\r\n\r\n        const { page: { thumbnail }, categories, items , currentCategory} = this.props;\r\n\r\n        return (\r\n            <Container id=\"construction\"> \r\n                <Row>\r\n                    <Col lg=\"3\">\r\n                        { this.renderSidebar() }\r\n                    </Col>\r\n                    <Col xs=\"12\" lg=\"9\">\r\n                        <Image {...thumbnail} />\r\n                        <div className=\"page-titles mt-4 mb-3\">\r\n                            <span className=\"page-title\">{localizationString.getString(\"Bộ sưu tập\")}</span>\r\n                            <span>|</span>\r\n                            <span className=\"page-title\">{currentCategory ? currentCategory.title :localizationString.getString(\"Tất cả\") }</span>\r\n                        </div>\r\n                        <Row>\r\n                            {\r\n                                items.length &&\r\n                                items.map((item, index) => {\r\n                                    return (\r\n                                        <Col key={ item.id } xs=\"6\" lg=\"4\" className=\"page-item\">\r\n                                            <PageItem data={ item } />\r\n                                        </Col>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst stateToProps = (state) => ({\r\n\r\n})\r\n\r\nconst dispathToProps = (dispath) => (\r\n    bindActionCreators({ refreshRoutePath }, dispath)\r\n)\r\n\r\nconst ConnectedPageComponent = connect(stateToProps, dispathToProps)(PageComponent)\r\n\r\nmodule.exports = BasePage({ page: 'cong-trinh', showBreadcrumbs: true })(ConnectedPageComponent);","const pageConfigures = require('../page-configure.js')\r\n\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { GoogleMap } from '../../shared/components'\r\nimport { Container, Row, Col } from 'reactstrap'\r\nimport { PageItem, Image, Pagination } from '../../shared/components'\r\n\r\nimport { default as classNames } from 'classnames'\r\nimport { renderItem } from '../helper/render-items'\r\n\r\nconst getCurrentCategory = require('../helper/get-current-category.js')\r\n\r\nclass BigMap extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { searchArea, searchCity, fecthData, categories, match } = this.props\r\n        const currentCategory = getCurrentCategory(match, categories)\r\n        fecthData(currentCategory, searchArea, searchCity);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (JSON.stringify(this.props) != JSON.stringify(nextProps)) {\r\n            const { match, categories, searchArea, searchCity, fecthData } = nextProps\r\n            const currentCategory = getCurrentCategory(match, categories)\r\n            fecthData(currentCategory, searchArea, searchCity);\r\n        }\r\n    }\r\n\r\n    renderMarkerContent(marker) {\r\n        return (\r\n            <div className=\"marker-tooltip\">\r\n                <div className=\"marker-thumbnail mb-3\">\r\n                    <img className=\"w-100 h-100\" src={ marker.thumbnailUrl } />\r\n                </div>\r\n                <div className=\"marker-info mb-2\">\r\n                    <label className=\"marker-label\">\r\n                        { marker.title || `Missing Title` }\r\n                    </label>\r\n                    <br />\r\n                    <a className={ classNames('map-marker-hint__ap-link') }>\r\n                        { localizationString.getString(\"Click to view more info\") }\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        const $bigMap = $('#big-map')\r\n        var $parentBigMap = $bigMap.parent()\r\n        const bigMapHeight = $parentBigMap.innerHeight()\r\n        $bigMap.find('.g-map').css('height', `${bigMapHeight}px`)\r\n    }\r\n\r\n    setStateRandomProject(randomItems) {\r\n        const { getItemsWithPath } = this.props\r\n        const itemWithPath = getItemsWithPath(randomItems)\r\n        this.setState({ randomItems: itemWithPath })\r\n    }\r\n\r\n    //request 9 dự án ngẫu nhiên\r\n    componentWillMount() {\r\n        $.ajax({\r\n            url: '/project/getrandomEntity',\r\n            data: { count: 9 },\r\n            success: this.setStateRandomProject.bind(this)\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { match, pageCoverImage, currentCategory, onItemHover, items } = this.props\r\n        return (\r\n            <div id=\"big-map\" className=\"big-map-container\">\r\n                <div className=\"g-map big-g-map\">\r\n                    <GoogleMap {...this.props.map} renderMarkerContent={ this.renderMarkerContent } />\r\n                </div>\r\n                <div className=\"page-titles mt-4 mb-3\">\r\n                    <span className=\"page-title\">{ localizationString.getString(\"Dự án\") }</span>\r\n                    <span>|</span>\r\n                    <span className=\"page-title\">{ localizationString.getString(\"Công trình khác\") }</span>\r\n                </div>\r\n\r\n                <Pagination items={ this.state.randomItems } itemWrapperClassName=\"page-item\" itemPerPage={ 3 } renderItem={ renderItem } />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst bigMapId = pageConfigures.bigMapId;\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        map: state.googleMap[ bigMapId ]\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(BigMap);","import React, { Component } from 'react';\r\nimport { Container, Row, Col } from 'reactstrap'\r\nimport { PageItem, Image } from '../../shared/components'\r\n\r\nclass DuAnCategory extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.getCurrentCategory = this.getCurrentCategory.bind(this)\r\n    }\r\n\r\n    getCurrentCategory(match) {\r\n        match = match || this.props.match\r\n        const { categories } = this.props\r\n\r\n        const currentCategory = categories.filter((categoryItem) => {\r\n            return categoryItem.name === match.params.category\r\n        })[ 0 ]\r\n        return currentCategory\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { searchArea, searchCity, fecthData } = this.props\r\n        const category = this.getCurrentCategory()\r\n        fecthData(category, searchArea, searchCity);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (JSON.stringify(this.props) != JSON.stringify(nextProps))\r\n            this.props.fecthData(this.getCurrentCategory(nextProps.match), nextProps.searchArea, nextProps.searchCity);\r\n    }\r\n\r\n    render() {\r\n        const { match, pageCoverImage, currentCategory, basePath, onItemHover, items } = this.props\r\n        return (\r\n            <Container>\r\n                <Image {...pageCoverImage} />\r\n                <div className=\"page-titles mt-4 mb-3\">\r\n                    <span className=\"page-title\">{ localizationString.getString(\"Bộ sưu tập\") }</span>\r\n                    <span>|</span>\r\n                    <span className=\"page-title\">{ currentCategory ? currentCategory.title : localizationString.getString(\"Tất cả\") }</span>\r\n                </div>\r\n                <Row>\r\n                    {\r\n                        items.map((item, index) => {\r\n                            return (\r\n                                <Col key={ item.id } xs=\"6\" lg=\"4\" className=\"page-item\"\r\n                                    onMouseEnter={() => {\r\n                                        onItemHover(true, item)\r\n                                    }}\r\n                                    onMouseLeave={()=> {\r\n                                        onItemHover(false, item)\r\n                                    }}\r\n                                >\r\n                                    <PageItem data={ item } extraText={ item.area } path={ `/${basePath}/${items.name}` } />\r\n                                </Col>\r\n                            );\r\n                        })\r\n                    }\r\n                </Row>\r\n            </Container>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default DuAnCategory;","import React, { Component } from 'react'\r\nimport { Input, Label } from 'reactstrap'\r\nimport { SidebarWidget } from '../../shared/components'\r\n\r\nclass AreaSearch extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.ranges = [\r\n            { form: 1, to: 3 },\r\n            { form: 4, to: 6 },\r\n            { form: 7, to: 9 }\r\n        ]\r\n    }\r\n\r\n    render() {\r\n        const { onSearch } = this.props\r\n        return (\r\n            <SidebarWidget className=\"custom-controls-stacked\" title={ localizationString.getString(\"Diện tích\") }>\r\n                <label className=\"custom-control custom-radio\">\r\n                    <input id=\"radioStacked1\" name=\"radio-stacked\" type=\"radio\" className=\"custom-control-input\" onChange={ () => {\r\n                        onSearch(-1, -1)\r\n                    } } />\r\n                    <span className=\"custom-control-indicator\"></span>\r\n                    <span className=\"custom-control-description\">\r\n                        { `${localizationString.getString('Mọi diện tích')}` }\r\n                    </span>\r\n                </label>\r\n                {\r\n                    this.ranges.map(({ form, to }, index) => (\r\n                        <label key={ index } className=\"custom-control custom-radio\">\r\n                            <input id=\"radioStacked1\" name=\"radio-stacked\" type=\"radio\" className=\"custom-control-input\" data-from={ form } data-to={ to } onChange={ () => {\r\n                                onSearch(form, to)\r\n                            } } />\r\n                            <span className=\"custom-control-indicator\"></span>\r\n                            <span className=\"custom-control-description\">\r\n                                { `${localizationString.getString('từ')} ${form} ${localizationString.getString('đến')} ${to}` }\r\n                            </span>\r\n                        </label>\r\n                    ))\r\n                }\r\n            </SidebarWidget>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AreaSearch;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { Input } from 'reactstrap'\r\nimport { SidebarWidget, GoogleMap } from '../../shared/components'\r\n\r\nimport { default as classNames } from 'classnames'\r\nconst pageConfigures = require('../page-configure.js')\r\n\r\nclass SearchCity extends Component {\r\n    renderMarkerContent(marker) {\r\n        return (\r\n            <div className=\"marker-info\">\r\n                <label className=\"label\">\r\n                    { marker.title || `Missing Title` }\r\n                </label>\r\n                <br />\r\n                <a className={ classNames('map-marker-hint__ap-link') }>\r\n                    { localizationString.getString(\"Click to view more info\") }\r\n                </a>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <SidebarWidget noBorder noCollapse title={ localizationString.getString('Bản đồ') }>\r\n                <div className=\"no-left-space\">\r\n                    <div className=\"g-map\">\r\n                        <GoogleMap {...this.props.map} dispath={this.props.dispath} renderMarkerContent={ this.renderMarkerContent } />\r\n                    </div>\r\n                    <div className={classNames('mt-3', {'d-none': this.props.hiddenBigMapLink})}>\r\n                        <Link className=\"btn btn-secondary\" to={ this.props.linkToBigMap }>\r\n                            { localizationString.getString(\"Xem bản đồ\") }\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </SidebarWidget>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        map: state.googleMap[ pageConfigures.smallMapId ]\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(SearchCity);","import React, { Component } from 'react';\r\nimport { Input } from 'reactstrap'\r\nimport { SidebarWidget, GoogleMap } from '../../shared/components'\r\n\r\nconst cities = {\r\n    'Hà Nội': {\r\n        center: [ 21.0227431, 105.8194541 ],\r\n        zoom: 11\r\n    },\r\n    'Đà nẵng': {\r\n        center: [ 16.0646499, 108.2296327 ],\r\n        zoom: 11\r\n    },\r\n    'Hồ Chí Minh': {\r\n        center: [ 10.6917996, 106.6503763 ],\r\n        zoom: 9\r\n    }\r\n}\r\n\r\nclass SearchCity extends Component {\r\n    onCityChange(e) {\r\n        const value = e.target.value\r\n        this.props.onCityChange(value != \"0\" && value, cities[ value ])\r\n    }\r\n\r\n    render() {\r\n        const { onCityChange } = this.props\r\n        return (\r\n            <SidebarWidget noBorder noCollapse title={ localizationString.getString('Vị trí') }>\r\n                <div className=\"no-left-space\">\r\n                    <Input type=\"select\" onChange={ this.onCityChange.bind(this) }>\r\n                        <option value={ 0 }>{ localizationString.getString('Chọn thành phố') }</option>\r\n                        {\r\n                            $.map(cities, (city, index) => {\r\n                                return (\r\n                                    <option key={ index } value={ index }>{ index }</option>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Input>\r\n                </div>\r\n            </SidebarWidget>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchCity;","module.exports = function getCurrentCategory(match, categories) {\r\n    const currentCategory = categories.filter((categoryItem) => {\r\n        return categoryItem.name === match.params.category\r\n    })[0]\r\n    return currentCategory\r\n}","import { PageItem } from '../../shared/components'\r\n\r\nfunction renderItem(item) {\r\n    return (\r\n        <PageItem data={ item } extraText={ item.area } path={ item.path } />\r\n    )\r\n}\r\n\r\nexport { renderItem }","const { bindActionCreators } = require('redux');\r\nconst { connect } = require('react-redux')\r\nimport _ from 'underscore'\r\nimport { Route, Switch } from 'react-router'\r\nimport { Container, Row, Col } from 'reactstrap'\r\nimport BasePage from '../shared/_layout/main/base-page'\r\nimport { Sidebar, SidebarMenu, Image, CategoryMenu, PageItem } from '../shared/components'\r\n\r\nimport { refreshRoutePath } from '../routes'\r\n\r\nimport { default as BigMap } from './components/big-map'\r\nimport { default as Category } from './components/category'\r\nimport { default as SearchByArea } from './components/search-area';\r\nimport { default as SearchByCity } from './components/sreach-city';\r\nimport { default as SmallMap } from './components/small-map';\r\nimport { setMapValue, setMapMarkers, showMarkerBalloon } from '../shared/reducers/google-map'\r\nimport { dataRequest } from '../shared/ultilities'\r\n\r\nconst pageConfigure = {\r\n    pageName: 'du-an',\r\n    taxonomyTypeId: 20003,\r\n    showBreadcrumb: true\r\n}\r\n\r\nconst smallMapId = require('./page-configure.js').smallMapId\r\nconst bigMapId = require('./page-configure.js').bigMapId\r\n\r\nconst defaultMap = {\r\n    center: [ 15.866913899999986, 104.1218629 ],\r\n    zoom: 5,\r\n}\r\n\r\nclass PageComponent extends React.Component {\r\n    static defaultProps = {\r\n        map: defaultMap,\r\n        items: []\r\n    }\r\n\r\n    constructor() {\r\n        super()\r\n        this.renderSidebar = this.renderSidebar.bind(this)\r\n        this.fecthData = this.fecthData.bind(this)\r\n        this.getCurrentChildRoute = this.getCurrentChildRoute.bind(this)\r\n        this.getItemsWithPath = this.getItemsWithPath.bind(this)\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { onError, onDataFetch, refreshRoutePath, categories, page, items } = this.props\r\n\r\n        if (!page)\r\n            $.get(`/page/getsingle?entityName=${pageConfigure.pageName}`, function (response) {\r\n                onDataFetch({ page: response.details }, 50);\r\n            })\r\n        if (!categories)\r\n            $.get('/TaxonomyUI/GetTaxonomies', { taxonomyTypeId: pageConfigure.taxonomyTypeId }, function (response) {\r\n                onDataFetch({ categories: response }, 50)\r\n            })\r\n\r\n        refreshRoutePath(pageConfigure.pageName)\r\n    }\r\n\r\n    onSearchByArea(from, to) {\r\n        var searchArea = { from, to }\r\n\r\n        if (from === -1 || to === -1)\r\n            searchArea = null\r\n\r\n        this.props.onDataFetch({ searchArea }, 0)\r\n    }\r\n\r\n    onSearchByCity(city, map) {\r\n        const { setMapValue, searchArea } = this.props;\r\n\r\n        this.props.onDataFetch({ searchCity: city }, 0)\r\n\r\n        const currentChildRoute = this.getCurrentChildRoute()\r\n        const mapId = currentChildRoute === \"/ban-do\" ? bigMapId : smallMapId\r\n\r\n        setMapValue(mapId, map || defaultMap)\r\n    }\r\n\r\n    getItemsWithPath(items) {\r\n        const { match } = this.props\r\n        const itemsWithPath = items.map((item) => {\r\n            const itemWithPath = $.extend(true, {}, item, { path: `${match.path}/${item.name}` })\r\n            return itemWithPath\r\n        })\r\n        return itemsWithPath\r\n    }\r\n\r\n    onCategoryFetchComplete(items) {\r\n        const { setMapMarkers, match, onDataFetch } = this.props\r\n\r\n        const currentChildRoute = this.getCurrentChildRoute()\r\n        const mapId = currentChildRoute === \"/ban-do\" ? bigMapId : smallMapId\r\n\r\n        const markers = items.map(({ id, name, thumbnailUrl, moreDetailts: { mapLongitude, mapLatitude }, title }) => {\r\n            return {\r\n                id,\r\n                lat: mapLatitude,\r\n                lng: mapLongitude,\r\n                title,\r\n                thumbnailUrl: `/${thumbnailUrl}`,\r\n                redirect: `${match.path}/chi-tiet/${name}`,\r\n                height: (mapId === bigMapId) && 280,\r\n                path: `${match.path}/${name}`\r\n            }\r\n        })\r\n\r\n        const itemsWithPath = this.getItemsWithPath(items)\r\n\r\n        onDataFetch({ items: itemsWithPath }, 0)\r\n\r\n        setMapMarkers(mapId, markers)\r\n    }\r\n\r\n    onItemHover(isHover, item) {\r\n        const { showMarkerBalloon } = this.props\r\n        var markerId = isHover ? item.id : null\r\n\r\n        const currentChildRoute = this.getCurrentChildRoute()\r\n        const mapId = currentChildRoute === \"/ban-do\" ? bigMapId : smallMapId\r\n\r\n        showMarkerBalloon(mapId, markerId)\r\n    }\r\n\r\n    fecthData(category, searchArea, searchCity) {\r\n        var filter = []\r\n\r\n        if (searchArea)\r\n            filter.push(\r\n                {\r\n                    id: 'area',\r\n                    value: searchArea.from,\r\n                    operator: '>='\r\n                },\r\n                {\r\n                    id: 'area',\r\n                    value: searchArea.to,\r\n                    operator: '<='\r\n                }\r\n            )\r\n\r\n        if (searchCity)\r\n            filter.push({\r\n                id: 'city',\r\n                value: searchCity,\r\n                operator: '=='\r\n            })\r\n        const additionalFields = [ 'mapLongitude', 'mapLatitude' ]\r\n        dataRequest('/project/gettabledata', 9, 1, null, filter, category && { [ pageConfigure.taxonomyTypeId ]: category.id }, additionalFields, this.onCategoryFetchComplete.bind(this))\r\n    }\r\n\r\n    getCurrentChildRoute() {\r\n        const { match, location } = this.props;\r\n        return String(location.pathname).startsWith(`${match.path}/ban-do`) ? '/ban-do' : ''\r\n    }\r\n\r\n    renderSidebar() {\r\n        const { categories, currentCategory, match, location } = this.props;\r\n\r\n        const mapPage = this.getCurrentChildRoute()\r\n        const page = mapPage ? '' : '/1'\r\n\r\n        const categoryMenuItems = categories && categories.map((category) => {\r\n            return { path: `${match.path}${mapPage}/${category.name}${page}`, title: category.title, id: category.id }\r\n        })\r\n\r\n        categoryMenuItems.unshift({ path: `${match.path}${mapPage}/${localizationString.getString('tat-ca')}${page}`, title: localizationString.getString(\"Tất cả\") })\r\n\r\n        return (\r\n            <Sidebar>\r\n                <SidebarMenu title={ localizationString.getString('loại công trình') }\r\n                    items={ categoryMenuItems }\r\n                    currentUrl={ match.url }\r\n                />\r\n                <SearchByArea onSearch={ this.onSearchByArea.bind(this) } />\r\n                <SearchByCity onCityChange={ this.onSearchByCity.bind(this) } />\r\n                <SmallMap map={ this.props.map }\r\n                    linkToBigMap={ `${match.path}/ban-do/${currentCategory ? currentCategory.name : localizationString.getString('tat-ca')}` }\r\n                    hiddenBigMapLink={ mapPage != '' }\r\n                />\r\n            </Sidebar>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        if (this.props.dataFetchProgress != 100)\r\n            return null;\r\n        console.log(this.state)\r\n\r\n        const { match, page: { thumbnail }, categories, currentCategory, searchArea, searchCity, items } = this.props\r\n\r\n        const commonRouteProps = {\r\n            items: items,\r\n            searchArea: searchArea,\r\n            searchCity: searchCity,\r\n            categories: categories,\r\n            basePath: match.path,\r\n            fecthData: this.fecthData\r\n        }\r\n\r\n        return (\r\n            <Container id={ pageConfigure.pageName }>\r\n                <Row>\r\n                    <Col lg=\"3\">\r\n                        { this.renderSidebar() }\r\n                    </Col>\r\n                    <Col xs=\"12\" lg=\"9\">\r\n                        <Switch>\r\n                            <Route exact={ false } path={ `${match.url}/ban-do/:category` } render={ (route) => {\r\n                                return (\r\n                                    <BigMap {...route}\r\n                                        {...commonRouteProps}\r\n                                        getItemsWithPath={this.getItemsWithPath}\r\n                                    />\r\n                                )\r\n                            } } />\r\n                            <Route path={ `${match.url}/:category/:page` } render={ (route) => {\r\n                                return (\r\n                                    <Category match={ route.match }\r\n                                        pageCoverImage={ thumbnail }\r\n                                        onItemHover={ this.onItemHover.bind(this) }\r\n                                        {...commonRouteProps}\r\n                                    />\r\n                                )\r\n                            } } />\r\n                        </Switch>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst stateToProps = (state) => ({\r\n\r\n})\r\n\r\nconst dispathToProps = (dispath) => (\r\n    bindActionCreators({ refreshRoutePath, setMapValue, setMapMarkers, showMarkerBalloon }, dispath)\r\n)\r\n\r\nconst ConnectedPageComponent = connect(stateToProps, dispathToProps)(PageComponent)\r\n\r\nmodule.exports = BasePage({ page: pageConfigure.pageName, showBreadcrumbs: pageConfigure.showBreadcrumb })(ConnectedPageComponent);","const smallMapId = \"category-small-map\"\r\nconst bigMapId = \"big-map-id\"\r\n\r\nexport {\r\n    smallMapId,\r\n    bigMapId\r\n}","const { Container } = require('reactstrap');\r\nconst { Title } = require('../../shared/components');\r\n\r\nmodule.exports = class extends React.Component {\r\n    componentDidMount() {\r\n        $(\".cd-timeline-block\").each(function (index) {\r\n            const $this = $(this);\r\n            var objPrev = $this.prev('.cd-timeline-block');\r\n            if (objPrev.hasClass('odd')) {\r\n                $this.find('.cd-timeline-content p').attr('data-aos', 'zoom-in');\r\n                $this.find('.cd-timeline-content h2').attr('data-aos', 'zoom-in');\r\n\r\n                $this.addClass('even');\r\n            } else {\r\n                $this.find('.cd-timeline-content p').attr('data-aos', 'zoom-in');\r\n                $this.find('.cd-timeline-content h2').attr('data-aos', 'zoom-in');\r\n                $this.addClass('odd');\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        const { items, title } = this.props;\r\n\r\n        var array = items.map(item => {\r\n            var strs = String(item.value).split('\\n');\r\n            var obj = {};\r\n            for (var i in strs) {\r\n                var str = strs[i].split(':');\r\n                if (str.length == 2) {\r\n                    var kv = str;\r\n                    var k = kv[0].trim();\r\n                    var v = kv[1].trim();\r\n                    obj[k] = v;\r\n                }\r\n            }\r\n            return obj;\r\n        });\r\n\r\n        return (\r\n            <Container>\r\n                <Title>{title}</Title>\r\n                <section id=\"cd-timeline\">\r\n                    {\r\n                        array.map((item, index) => {\r\n                            if (!item.content) {\r\n                                return (\r\n                                    <p className=\"cd-timeline-title\">\r\n                                        <span className=\"text\">\r\n                                            {item.label}\r\n                                        </span>\r\n                                    </p>\r\n                                );\r\n                            }\r\n                            return (\r\n                                <div className=\"cd-timeline-block clearfix\">\r\n                                    <div className=\"cd-timeline-dot\" />\r\n                                    <div className=\"cd-timeline-content clearfix\">\r\n                                        <h2>{item.label}</h2>\r\n                                        <p>{item.content}</p>\r\n                                        <div className=\"cd-icon\">\r\n                                            <img src={item.icon} alt={item.title} />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n\r\n                        })\r\n                    }\r\n                </section>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n","﻿const { bindActionCreators } = require('redux');\r\n\r\nconst { Container, Row } = require('reactstrap');\r\nconst { Image,  Title, PageArticle } = require('../shared/components');\r\nconst QuyTrinh = require('./components/quy-trinh');\r\n\r\nconst BasePage = require('../shared/_layout/main/base-page');\r\n\r\nclass PageComponent extends React.Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { onError, onDataFetch, article, procedure } = this.props;\r\n\r\n        if(!article)\r\n            $.get('/page/GetSingle?entityName=ve-chung-toi', function (response) {\r\n                onDataFetch({ article: response}, 50);\r\n            });\r\n\r\n        if(!procedure)    \r\n            $.get('/optionGroup/GetSingle?entityName=quy-trinh', function (response) {\r\n                onDataFetch({ procedure: response.details }, 50);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (this.props.dataFetchProgress != 100)\r\n            return null;\r\n\r\n        const { article, procedure } = this.props;\r\n\r\n        return (\r\n            <div id=\"gioi-thieu\">\r\n                { article && <PageArticle className=\"mb-5 mb-xl-6\" {...article.details}/> }\r\n                { procedure && <QuyTrinh items={ procedure.options } title={procedure.title}/> }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nmodule.exports = BasePage({ page: 'gioi-thieu' })(PageComponent);","﻿const { Route, Switch } = require('react-router')\nconst { Provider, connect } = require('react-redux')\nconst { createBrowserHistory } = require('history')\nconst { ConnectedRouter } = require('react-router-redux')\n\nconst PropTypes = require('prop-types');\n\nconst history = createBrowserHistory()\n\n// Pages:\nconst Layout = require('./shared/_layout').default\nconst TrangChu = require('./trang-chu/index')\nconst GioiThieu = require('./gioi-thieu/index')\nconst CongTrinh = require('./cong-trinh/index')\n \nimport { default as ExtendConnectedRouter } from './shared/components/_commons/extended-ConnectedRouter';\n\nclass Root extends React.Component {\n    constructor(props) {\n        super(props);\n        AOS.init();\n    }\n\n    render() {\n        const { menuItems, store } = this.props;\n        return (\n            <Provider store={ store }>\n                <ExtendConnectedRouter history={ history } wrapper={Layout}/>\n            </Provider>\n        );\n    }\n}\n\nRoot.propTypes = {\n    store: PropTypes.object.isRequired,\n};\n\nconst stateToProps = (state) => ({\n    menuItems: state.menu.menuItems\n})\n\nmodule.exports = {\n    Root: connect(stateToProps)(Root),\n    history\n};\n\nexport default exports","import TrangChu from './trang-chu/index'\r\nimport VeChungToi from './gioi-thieu/index'\r\nimport CongTrinh from './cong-trinh/index'\r\nimport BoSuuTap from './bo-suu-tap/index'\r\nimport DuAn from './du-an/index'\r\nimport ThuVien from './thu-vien/index'\r\n\r\nconst getRoutes = () => ({\r\n    exact: true,\r\n    path: '/',\r\n    name: 'trang-chu',\r\n    label: localizationString.getString('Trang chủ'),\r\n    component: TrangChu,\r\n    childRoutes: [\r\n        {\r\n            exact: true,\r\n            path: '/ve-chung-toi',\r\n            name: 've-chung-toi',\r\n            defaultLabel: localizationString.getString('Về chúng tôi'),\r\n            component: VeChungToi\r\n        },\r\n        {\r\n            exact: true,\r\n            path: '/cong-trinh',\r\n            name: 'cong-trinh',\r\n            defaultLabel: localizationString.getString('Công trình'),\r\n            component: CongTrinh\r\n        },\r\n        {\r\n            exact: true,\r\n            path: '/bo-suu-tap',\r\n            name: 'bo-suu-tap',\r\n            defaultLabel: localizationString.getString('Bộ sưu tập'),\r\n            component: BoSuuTap\r\n        },\r\n        {\r\n            path: '/du-an',\r\n            name: 'du-an',\r\n            defaultUrl: `/du-an/${localizationString.getString('tat-ca')}/1`,\r\n            defaultLabel: localizationString.getString('Dự án'),\r\n            component: DuAn,\r\n            childRoutes: [\r\n                {\r\n                    path: '/du-an/:category/:page',\r\n                    name: 'du-an-category',\r\n                    defaultLabel: localizationString.getString('Dự án'),\r\n                },\r\n                {\r\n                    path: '/du-an/:du-an',\r\n                    name: 'du-an-chi-tiet',\r\n                    defaultLabel: localizationString.getString('Dự án'),\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            exact: true,\r\n            path: '/thu-vien',\r\n            name: 'thu-vien',\r\n            redirectToChild: 0,\r\n            defaultLabel: localizationString.getString('Thư viện'),\r\n            component: ThuVien,\r\n            childRoutes: [\r\n                {\r\n                    path: '/:category/:page',\r\n                    name: 'thu-vien-category',\r\n                    defaultLocation: '/tat-ca/1',\r\n                    defaultLabel: localizationString.getString('Thư viện'),\r\n                },\r\n                {\r\n                    path: '/chi-tiet/:blog',\r\n                    name: 'thu-vien-chi-tiet',\r\n                    defaultLabel: localizationString.getString('Thư viện'),\r\n                }\r\n            ]\r\n        },\r\n    ]\r\n})\r\n\r\nconst getRoutePath = (routes = [], currentRouteName, labels) => {\r\n    var resultRoutePath = []\r\n\r\n    for (var routeIndex in routes) {\r\n        var route = routes[ routeIndex ]\r\n\r\n        if (labels && labels[ route.name ])\r\n            route.label = labels[ route.name ]\r\n        else\r\n            route.label = route.defaultLabel\r\n\r\n        if (route.name == currentRouteName) {\r\n            resultRoutePath.push(route)\r\n            return resultRoutePath\r\n        } else if (route.childRoutes) {\r\n            resultRoutePath.push(route)\r\n            var nextRoute = getRoutePath(route.childRoutes, currentRouteName, labels);\r\n            if (nextRoute.length) {\r\n                resultRoutePath = resultRoutePath.concat(nextRoute)\r\n                return resultRoutePath\r\n            } else\r\n                resultRoutePath = []\r\n        } else {\r\n            resultRoutePath = []\r\n        }\r\n    }\r\n\r\n    return resultRoutePath\r\n}\r\n\r\nconst INIT_ROUTES = 'INIT_ROUTES'\r\nconst REFRESH_ROUTE_PATH = 'REFRESG_ROUTE_PATH'\r\n\r\nconst refreshRoutePath = (currentRouteName, replaceRouteDefaultLabels) => ({\r\n    type: REFRESH_ROUTE_PATH,\r\n    currentRouteName,\r\n    replaceRouteDefaultLabels\r\n})\r\n\r\nconst reducer = (state = {}, action) => {\r\n    if (action.type === INIT_ROUTES) {\r\n        return $.extend(true, { routes: getRoutes() }, state)\r\n    }\r\n    if (action.type === REFRESH_ROUTE_PATH) {\r\n        const routePath = getRoutePath(state.routes.childRoutes, action.currentRouteName, action.routeLabels);\r\n        routePath.unshift(state.routes)\r\n        return $.extend(true, {}, state, { routePath })\r\n    }\r\n\r\n    return state\r\n}\r\n\r\nexport { reducer, refreshRoutePath, INIT_ROUTES }","﻿const { connect } = require('react-redux');\r\nconst { bindActionCreators } = require('redux');\r\n\r\nconst Header = require('./_layout/header');\r\nconst Footer = require('./_layout/footer');\r\nconst OutNav = require('./_layout/mobile/menu');\r\nconst PageLoading = require('./_layout/main/page-loading');\r\n\r\nconst keys = {\r\n    updateLayout: \"SET_LAYOUT_PARAMETER\",\r\n    togglePageLoading: \"TOGGLE_PAGE_LOADING\",\r\n}\r\n\r\nconst actions = {\r\n    updateLayout: () => ({\r\n        type: keys.updateLayout\r\n    }),\r\n    togglePageLoading: (toggle) => ({\r\n        type: keys.togglePageLoading,\r\n        toggle\r\n    })\r\n}\r\nconst initState = {\r\n    loadingFadeOutTime: 500,\r\n\r\n}\r\n\r\nconst reducer = (state = initState, action) => {\r\n    var newState = {};\r\n    switch (action.type) {\r\n        case keys.updateLayout:\r\n            newState = $.extend(true, {}, state);\r\n            newState.parameters = action.parameters;\r\n            return newState;\r\n        case keys.togglePageLoading:\r\n            newState = $.extend(true, {}, state);\r\n            newState.isPageLoadingVisible = action.toggle;\r\n            return newState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//middle ware to update layout after switch page, etc...\r\nconst updateLayout = store => next => action => {\r\n    if (action.type == keys.updateLayout) {\r\n        const footerElement = document.getElementById('footer');\r\n        const mainElement = document.getElementById('main');\r\n\r\n        const headerHeight = document.getElementById('header').clientHeight;\r\n        const footerHeight = footerElement.clientHeight;\r\n        const viewportHeight = window.outerHeight;\r\n        const layoutParameters = {\r\n            header: { id: header, height: headerHeight },\r\n            main: { id: main, minHeight: viewportHeight - footerHeight - headerHeight },\r\n            footer: { id: footer, height: footerHeight },\r\n            loading: { id: loading },\r\n            viewportHeight,\r\n        }\r\n\r\n        $(mainElement).css('min-height', layoutParameters.main.minHeight)\r\n        $(document.getElementById('layout')).fadeTo(500, 1)\r\n        $(document.getElementById('loading')).css('height', layoutParameters.main.minHeight)\r\n        action.parameters = layoutParameters;\r\n    }\r\n\r\n    return next(action)\r\n}\r\n\r\n\r\nclass LayoutController extends React.Component {\r\n    componentDidUpdate() {\r\n        const { layoutLoaded } = this.props;\r\n        if (layoutLoaded) {\r\n            const { updateLayout} = this.props;\r\n                updateLayout();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"layout-controller\" />;\r\n    }\r\n}\r\n\r\nconst stateToProps = (state) => ({\r\n});\r\n\r\nconst reducerToProps = (reducer) => (\r\n    bindActionCreators(actions, reducer)\r\n);\r\n\r\nconst ConnectedLayoutController = connect(stateToProps, reducerToProps)(LayoutController);\r\n\r\nclass Layout extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loaded: false\r\n        }\r\n\r\n        this.elementRefs = {\r\n            layout: 'layout',\r\n            header: 'header',\r\n            main: 'main',\r\n            footer: 'footer',\r\n            loading: 'loader'\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ loaded: true });\r\n    }\r\n\r\n    render() {\r\n        const { children } = this.props;\r\n        return (\r\n            <div id={this.elementRefs.layout} className=\"layout perspective\" style={{ opacity: 0 }}>\r\n                <div className=\"wrapper\">\r\n                    <Header id={this.elementRefs.header} className=\"p-3 pt-lg-4 pb-lg-4\" />\r\n                    <div id={this.elementRefs.main} className=\"main pb-5 mt-lg-3\">\r\n                        {children}\r\n                        <PageLoading id={this.elementRefs.loading} />\r\n                    </div>\r\n                    <Footer id={this.elementRefs.footer} className=\"p-4\" />\r\n                </div>\r\n                <OutNav />\r\n                <ConnectedLayoutController {...this.elementRefs} layoutLoaded={this.state.loaded} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    updateLayout,\r\n    actions,\r\n    reducer,\r\n    default: Layout\r\n}","const classNames = require('classnames');\r\n\r\nconst { Container, Row, Col } = require('reactstrap');\r\nconst CopyRight = require('./footer/copy-right');\r\nconst Socials = require('./footer/socials');\r\nconst Menu = require('./footer/menu');\r\n\r\nmodule.exports = class extends React.Component {\r\n    render() {\r\n        return (\r\n            <div {...this.props}>\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col xs=\"12\" lg=\"4\" xl=\"6\" className=\"mb-3 mb-lg-0\">\r\n                            <CopyRight className=\"text-center text-xl-left\"/>\r\n                        </Col>\r\n                        <Col xs=\"12\" md=\"8\" lg=\"6\" xl=\"4\">\r\n                            <Menu className=\"text-center text-md-left text-xl-right\"/>\r\n                        </Col>\r\n                        <Col xs=\"12\" md=\"4\" lg=\"2\" xl=\"2\">\r\n                            <Socials  className=\"text-center text-md-right text-xl-right\"/>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}","const classNames = require('classnames');\r\n\r\nmodule.exports = class extends React.Component {\r\n    render(){\r\n        return(\r\n            <div className={classNames(\"copyright\", this.props.className)}>\r\n                C 2017 dbgroup. All rights reserved\r\n            </div>\r\n        )\r\n    }\r\n}","const $ = require('jquery');\r\nconst _ = require('underscore');\r\nconst { Row, Col } = require('reactstrap');\r\nconst { Link } = require('react-router-dom');\r\nconst { connect } = require('react-redux');\r\nconst PropTypes = require('prop-types');\r\nconst classNames = require('classnames');\r\n\r\nconst stateToProps = (state) => ({\r\n    menuItems: state.menu.menuItems,\r\n});\r\n\r\nclass Menu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const footerMenuItem = props.menuItems.filter(item => {\r\n            return item.footer;\r\n        });\r\n\r\n        this.state = {\r\n            menuItems: _.sortBy(footerMenuItem, 'footer') \r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <Row className={classNames(\"text-uppercase pl-0 mb-0\", this.props.className)}>\r\n                {\r\n                    this.state.menuItems.map((menuItem, index) => {\r\n                        return (\r\n                            <Col key={index} className=\"menu-item d-inline-block\">\r\n                                <Link to={menuItem.url}>\r\n                                    <span>{menuItem.title}</span>\r\n                                </Link>\r\n                            </Col>)\r\n                    })\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nMenu.propTypes = {\r\n    menuItems: PropTypes.array.isRequired\r\n}\r\n\r\nmodule.exports = connect(stateToProps)(Menu)","const classNames = require('classnames');\r\n\r\nmodule.exports = class extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            facebook: \"/\",\r\n            twitter: \"/\",\r\n            instagram: \"/\"\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <ul className={classNames(\"socials pl-0\", this.props.className)}>\r\n                <li className=\"facebook\"><a href={this.state.facebook}><i className=\"fa fa-facebook-official\"/></a></li>\r\n                <li className=\"twitter\"><a href={this.state.twitter}><i className=\"fa fa-twitter\"/></a></li>\r\n                <li className=\"instagram\"><a href={this.state.instagram}><i className=\"fa fa-instagram\"/></a></li>\r\n            </ul>\r\n        )\r\n    }\r\n}","﻿const { Container, Row, Col } = require('reactstrap');\r\n\r\nconst LanguageSelect = require('./header/language-select');\r\nconst Search = require('./header/search');\r\nconst Logo = require('./header/logo');\r\nconst Menu = require('./header/menu').default;\r\nconst MobileHeader = require('./header/header-mobile');\r\nconst classNames = require('classnames');\r\n\r\nmodule.exports = class extends React.Component {\r\n    render() {\r\n        return (\r\n            <header {...this.props}>\r\n                <Container className=\"d-none d-md-block\">\r\n                    <Row>\r\n                        <Col md=\"2\">\r\n                            <Logo />\r\n                        </Col>\r\n                        <Col md=\"10\">\r\n                            <Row>\r\n                                <div className=\"w-100\">\r\n                                    <div className=\"float-right\">\r\n                                        <div className=\"float-left language-select pr-3 mr-3\">\r\n                                            <LanguageSelect />\r\n                                        </div>\r\n                                        <div className=\"float-left\">\r\n                                            <Search />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </Row>\r\n                            <Row className=\"menu-container\">\r\n                                <div className=\"align-items-end d-flex\">\r\n                                    <Menu />\r\n                                </div>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n                <MobileHeader className=\"d-block d-md-none\" />\r\n            </header>\r\n        );\r\n    }\r\n\r\n}","const classNames = require('classnames');\r\nconst LanguageSelect = require('./language-select');\r\nconst Search = require('./search');\r\n\r\n\r\nmodule.exports = class extends React.Component {\r\n\topenMenu() {\r\n\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tif ('ontouchstart' in window)\r\n\t\t\tvar click = 'touchstart';\r\n\t\telse\r\n\t\t\tvar click = 'click';\r\n\r\n\t\tvar $layout = $($('.layout')[0]);\r\n\t\tvar $wrapper = $layout.find('.wrapper');\r\n\t\tvar $burger = $layout.find('.burger');\r\n\r\n\t\tglobal.closeMenu = function closeMenu() {\r\n\t\t\t$layout.removeClass('animate').delay(500).queue(function () {\r\n\t\t\t\t$wrapper.unbind(click);\r\n\t\t\t\t$layout.removeClass('modalview').dequeue();\r\n\t\t\t});\r\n\t\t\t$burger.removeClass('open');\r\n\t\t}\r\n\r\n\t\tglobal.openMenu = function openMenu() {\r\n\t\t\t$burger.addClass('open');\r\n\t\t\t$layout.addClass('modalview');\r\n\t\t\t$layout.addClass('animate').delay(500).queue(function () {\r\n\t\t\t\t$wrapper.bind(click, function () {\r\n\t\t\t\t\tif ($layout.hasClass('modalview'))\r\n\t\t\t\t\t\tcloseMenu();\r\n\t\t\t\t});\r\n\t\t\t\t$layout.addClass('modalview').dequeue();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t$burger.on(click, function () {\r\n\t\t\topenMenu();\r\n\t\t});\r\n\r\n\t\tvar $nav = $layout.find('.outer-nav');\r\n\t\t$nav.find('a').bind(click, function() {\r\n\t\t\tcloseMenu();\r\n\t\t});\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className={classNames(\"header-mobile clearfix\", this.props.className)}>\r\n\t\t\t\t<div className=\"float-left mt-1\">\r\n\t\t\t\t\t<div className=\"burger\">\r\n\t\t\t\t\t\t<span></span>\r\n\t\t\t\t\t\t<span></span>\r\n\t\t\t\t\t\t<span></span>\r\n\t\t\t\t\t\t<span></span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"float-right\">\r\n\t\t\t\t\t<div className=\"float-left language-select pr-3 mr-3\">\r\n\t\t\t\t\t\t<LanguageSelect />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"float-left\">\r\n\t\t\t\t\t\t<Search />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","﻿const $ = require('jquery');\r\nconst { connect } = require('react-redux');\r\nconst { bindActionCreators } = require('redux');\r\nconst { Input } = require('reactstrap');\r\n\r\nconst { swithLanguage } = require('../../reducers/localization').actions;\r\n\r\nclass LanguageSelect extends React.Component {\r\n    render(){\r\n        const { languages, currentLanguage, swithLanguage } = this.props;\r\n        return (\r\n            <form method=\"post\" action=\"localization/switch\" ref=\"form\">\r\n                <Input name=\"culture\" value={currentLanguage} className=\"text-uppercase border-0 p-0\" type=\"select\" onChange={(e) => { this.refs.form.submit(); }}>\r\n                    { \r\n                        languages.map((language) => {\r\n                            return <option key={language.name} value={language.name}>{language.title}</option>;\r\n                        })\r\n                    }\r\n                </Input>\r\n            </form>\r\n            );\r\n    }\r\n}\r\n\r\nconst stateToProps = (state) => ({\r\n    currentLanguage: state.localization.currentLanguage,\r\n    languages: state.localization.languages\r\n});\r\n\r\nconst dispathToProps = (dispatch) => (\r\n    bindActionCreators({  }, dispatch)\r\n);\r\n\r\nmodule.exports = connect(stateToProps, dispathToProps)(LanguageSelect)","﻿module.exports = (props) => {\r\n    return (\r\n        <div className=\"logo\">\r\n            <img src=\"/img/logo.png\" />\r\n        </div>\r\n        );\r\n}","﻿const $ = require('jquery');\r\nconst { NavLink } = require('react-router-dom');\r\nconst { connect } = require('react-redux');\r\nconst { bindActionCreators } = require('redux');\r\nconst PropTypes = require('prop-types');\r\n\r\nconst keys = {\r\n    init: \"MENU_INIT\"\r\n}\r\n\r\nconst actions = {\r\n    //initState:\r\n    // - menuItems: flat array\r\n    init: (initState) => ({\r\n        type: keys.init,\r\n        initState\r\n    })\r\n}\r\n\r\nconst reducer = (state = {}, action) => {\r\n    const newState = $.extend(true, {}, state);\r\n    switch (action.type) {\r\n        case keys.init:\r\n            return action.initState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst stateToProps = (state) => ({\r\n    menuItems: state.menu.menuItems,\r\n});\r\n\r\nconst dispathToProps = (dispatch) => (\r\n    bindActionCreators({  }, dispatch)\r\n);\r\n\r\n\r\nclass Menu extends React.Component {\r\n    render() {\r\n        const { menuItems } = this.props;\r\n        return (\r\n            <ul className=\"menu text-uppercase pl-0 mb-0\">\r\n                {\r\n                    menuItems.map((menuItem, index) => {\r\n                        return (\r\n                            <li key={index} className=\"menu-item d-inline-block\">\r\n                                <NavLink exact={ menuItem.url == '/'} to={menuItem.url} activeClassName=\"current\">\r\n                                    <span>{menuItem.title}</span>\r\n                                </NavLink>\r\n                            </li>)\r\n                    })\r\n                }\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nMenu.propTypes = {\r\n    menuItems: PropTypes.array.isRequired\r\n}\r\n\r\nmodule.exports ={\r\n    actions,\r\n    reducer,\r\n    default: connect(stateToProps, dispathToProps, null, { pure: false })(Menu)\r\n}","﻿const { Button } = require('reactstrap');\r\n\r\nmodule.exports = (props) => {\r\n    return (\r\n        <div>\r\n            <Button color=\"link\" className=\"btn-search text-uppercase pl-0 pr-0 border-0\">\r\n                <i className=\"fa fa-search mr-2\" aria-hidden=\"true\"/> search\r\n            </Button>\r\n        </div>\r\n        )\r\n}","const ConnectedBasePage = require('./connected-base-page').default;\r\nconst PropTypes = require('prop-types');\r\n\r\nconst baseArgs = {\r\n    page: ''\r\n}\r\n\r\nbaseArgs.PropTypes = {\r\n    page: PropTypes.string.require\r\n}\r\n\r\nmodule.exports = (args = baseArgs) => Element => class extends React.Component {\r\n    render() {\r\n        return (\r\n            <ConnectedBasePage {...args} {...this.props} component={Element} />\r\n        )\r\n    }\r\n}","const { connect } = require('react-redux');\nconst { bindActionCreators } = require('redux');\nconst { Swipeable, defineSwipe } = require('react-touch');\n\nconst layoutActions = require('../../_layout').actions;\n\nconst DelayRender = require('../../components/_commons/delay-render');\n\nimport { ConnectedBreacrumbs } from '../../components'\n\nconst keys = {\n  createNewPage: \"CREATE_NEW_PAGE\",\n  onDataFetch: \"ON_PAGE_FETCH_DATA\"\n}\n\nconst actions = {\n  createNewPage: (page) => ({\n    type: keys.createNewPage,\n    page\n  }),\n\n  //progress: 0 - 100.\n  onDataFetch: (page, data, progress = 100) => ({\n    type: keys.onDataFetch,\n    page,\n    data,\n    progress\n  })\n}\n\nconst initState = {\n  pages: {} //data of all page\n}\n\nconst reducer = (state = initState, action) => {\n  var newState = {};\n  switch (action.type) {\n    case keys.onDataFetch:\n      newState = $.extend(true, {}, state);\n      var pages = newState.pages;\n      var currentPageData = $.extend(pages[ action.page ], action.data);\n      currentPageData.dataFetchProgress += action.progress;\n      if (currentPageData.dataFetchProgress > 100)\n        console.error(`'dataFetchProgress' phải từ 0 đến 100, hiện tại ${currentPageData.dataFetchProgress}.`);\n      newState.pages[ action.page ] = currentPageData;\n      return newState;\n    case keys.createNewPage:\n      newState = $.extend(true, {}, state);\n      newState.pages[ action.page ] = {\n        dataFetchProgress: 0\n      };\n      return newState;\n    default:\n      return state;\n\n  }\n}\n\nclass BasePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.baseDelay = 1000;\n    const { component } = this.props;\n\n    this.swipeLeft = this.swipeLeft.bind(this);\n    this.onDataFetch = this.onDataFetch.bind(this);\n\n    this.ElementWithDelayRender = DelayRender({\n      delay: this.baseDelay,\n      onRender: this.onPageComponentRender.bind(this)\n    })(component);\n  }\n\n  componentWillUnmount() {\n    const { togglePageLoading, updateLayout } = this.props;\n    updateLayout();\n    togglePageLoading(true);\n  }\n\n  swipeLeft() {\n    global.openMenu();\n  }\n\n  onDataFetch(data, progress) {\n    const { onDataFetch, page } = this.props;\n    onDataFetch(page, data, progress);\n  }\n\n  onPageComponentRender() {\n    const { togglePageLoading, loadingFadeOutTime } = this.props;\n    const $element = $(ReactDOM.findDOMNode(this));\n\n    togglePageLoading(false);\n    $element.delay(this.baseDelay).fadeTo(500, 1);\n  }\n\n  componentWillMount() {\n    const { createNewPage,\n      pages,\n      page } = this.props;\n    const pageData = pages[ page ];\n    if (!pageData)\n      createNewPage(page);\n  }\n\n  render() {\n    const { createNewPage, component,\n      pages,\n      page, //page name of component\n      routes, match, showBreadcrumbs, location } = this.props;\n\n    const pageData = pages[ page ];\n    if (!pageData)\n      return null;\n\n    return (\n      <div className=\"base-page\" style={ { opacity: 0 } }>\n        <Swipeable onSwipeRight={ this.swipeLeft }>\n          <div className=\"swipeable\" />\n        </Swipeable>\n        {\n          showBreadcrumbs && <ConnectedBreacrumbs routes={routes} params={match.params} />\n        }\n        <this.ElementWithDelayRender {...pageData} location={location} match={match} onDataFetch={ this.onDataFetch } />\n      </div>\n    );\n  }\n};\n\nconst stateToProps = (state) => ({\n  layoutParameter: state.layout.parameters,//remove will take no effect!\n  loadingFadeOutTime: state.layout.loadingFadeOutTime,\n  pages: state.connectedBasePage.pages,\n  routes: state.routes\n});\n\nconst dispathToProps = (dispath) => (\n  bindActionCreators({\n    togglePageLoading: layoutActions.togglePageLoading,\n    updateLayout: layoutActions.updateLayout,\n    createNewPage: actions.createNewPage,\n    onDataFetch: actions.onDataFetch\n  }, dispath)\n);\n\nmodule.exports = {\n  actions,\n  reducer,\n  default: connect(stateToProps, dispathToProps)(BasePage)\n}","const { connect } = require('react-redux');\r\nconst svg = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"> <g class=\"anim-0\"> <circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"white\" /> </g> <g class=\"anim-1\"> <circle cx=\"50\" cy=\"50\" r=\"5\" fill=\"#ff5e7C\" /> </g> <g class=\"anim-2\"> <circle cx=\"75\" cy=\"50\" r=\"5\" fill=\"#ff5e7C\" /> <line x1=\"25\" y1=\"50\" x2=\"75\" y2=\"50\" stroke=\"#ff5e7C\" stroke-width=\"3\" /> </g> <g class=\"anim-3\"> <circle cx=\"50\" cy=\"25\" r=\"5\" fill=\"#ff5e7C\" /> <line x1=\"50\" y1=\"25\" x2=\"25\" y2=\"75\" stroke=\"#ff5e7C\" stroke-width=\"3\" /> <line x1=\"50\" y1=\"25\" x2=\"75\" y2=\"75\" stroke=\"#ff5e7C\" stroke-width=\"3\" /> </g> <g class=\"anim-4\"> <circle cx=\"75\" cy=\"25\" r=\"5\" fill=\"#ff5e7C\" /> <line x1=\"75\" y1=\"25\" x2=\"25\" y2=\"25\" stroke=\"#ff5e7C\" stroke-width=\"3\" /> </g></svg>';\r\n\r\nclass Loading extends React.Component {\r\n    componentDidUpdate() {\r\n        const { isVisible } = this.props;\r\n        var $element = $(ReactDOM.findDOMNode(this));\r\n\r\n        if(isVisible)\r\n            $element.fadeTo(500, 1, function(){\r\n            });   \r\n        else\r\n            $element.fadeTo(500, 0, function(){\r\n                $element.hide();\r\n            });   \r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"loading\" dangerouslySetInnerHTML={{ __html: svg }} />\r\n        )\r\n    }\r\n}\r\n\r\nconst stateToProps = (state) => ({\r\n    isVisible: state.layout.isPageLoadingVisible\r\n})\r\n\r\nmodule.exports = connect(stateToProps)(Loading);","const $ = require('jquery');\r\nconst { NavLink } = require('react-router-dom');\r\nconst { connect } = require('react-redux');\r\nconst PropTypes = require('prop-types');\r\n\r\nclass Menu extends React.Component {\r\n    render() {\r\n        const { menuItems } = this.props;\r\n        return (\r\n            <nav className=\"left outer-nav vertical\">\r\n                {\r\n                    menuItems.map((menuItem, index) => {\r\n                        return (\r\n                            <NavLink key={index} exact={menuItem.url == '/'} to={menuItem.url} activeClassName=\"current\">\r\n                                {menuItem.title}\r\n                            </NavLink>\r\n                        )\r\n                    })\r\n                }\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nMenu.propTypes = {\r\n    menuItems: PropTypes.array.isRequired\r\n}\r\n\r\nconst stateToProps = (state) => ({\r\n    menuItems: state.menu.menuItems,\r\n});\r\n\r\nmodule.exports = connect(stateToProps, null, null, { pure: false })(Menu);","const enUS = require('./_localization/en-us');\r\n\r\nvar strings = {\r\n    'vi-VN': {\r\n    },\r\n    'en-US': enUS\r\n};\r\n\r\nclass localization {\r\n    constructor(){\r\n        this.strings = strings;\r\n    }\r\n\r\n    setLanguage(language){\r\n        this.language = language;\r\n    }\r\n\r\n    getString(string){\r\n        return this.strings[this.language][string] || string;\r\n    }\r\n}\r\n\r\nmodule.exports = new localization();","module.exports = {\r\n    'Tìm kiếm': \"Search\",\r\n    'Công trình': \"Construction\",\r\n    'Dự án': \"Project\",\r\n    'Khách<br/>sạn': \"Hotel\",\r\n    'Nhà ở': \"Home\",\r\n    'Căn<br/>hộ': \"Department\"\r\n}","const Title = require('./components/section-title');\r\nconst PageArticle = require('./components/page-article');\r\nconst Image = require('./components/image');\r\nconst RenderDelay = require('./components/_commons/delay-render');\r\n\r\nimport { default as ConnectedBreacrumbs } from './components/connected-breacrumbs'\r\nimport { default as Sidebar } from './components/sidebar'\r\nimport { default as CategoryMenu } from './components/category-menu'\r\nimport { default as PageItem } from './components/page-item'\r\nimport { default as SidebarMenu } from './components/sidebar-menu'\r\nimport { default as SidebarWidget } from './components/sidebar-widget'\r\nimport { default as GoogleMap } from './components/gmap/google-map'\r\nimport { default as Pagination } from './components/pagination'\r\n\r\nmodule.exports = {\r\n    RenderDelay,\r\n    Title,\r\n    PageArticle,\r\n    Image,\r\n    ConnectedBreacrumbs,\r\n    Sidebar,\r\n    CategoryMenu,\r\n    PageItem,\r\n    SidebarMenu,\r\n    SidebarWidget,\r\n    GoogleMap,\r\n    Pagination\r\n}","const DelayRender = (args = {}) => (Element) => class Component extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { ready: true };\r\n  }\r\n\r\n  componentWillMount() {\r\n    const { delay, onRender } = args;\r\n    const d = parseInt(delay, 10);\r\n    if (d && d > 0) {\r\n      this.setState({ ready: false });\r\n      this.timeout = setTimeout(() => {\r\n        this.setState({ ready: true });\r\n        if (onRender && typeof onRender === 'function') {\r\n          onRender();\r\n        }\r\n      }, delay);\r\n    } else {\r\n      this.setState({ ready: true });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.ready) {\r\n      return (\r\n        <Element {...this.props} />\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n};\r\n\r\nmodule.exports = DelayRender;","import { Route, Switch, Redirect } from 'react-router'\r\nimport { ConnectedRouter, } from 'react-router-redux'\r\nimport { connect } from 'react-redux'\r\n\r\nconst DuAn = require('../../../du-an/index')\r\n\r\nconst renderRoute = (route) => {\r\n    const { name, childRoutes, redirectToChild, path, component } = route\r\n\r\n    if (redirectToChild != null || redirectToChild != undefined)\r\n        return (\r\n            <Switch key={name}>\r\n                {\r\n                    childRoutes.map((child, index) => {\r\n                        \r\n                        if(String(child.path).startsWith('/:'))\r\n                            child.path = path + child.path\r\n                            \r\n                        if(!child.component)\r\n                            child.component = component\r\n                        return renderRoute(child)\r\n                    })\r\n                }\r\n                <Redirect from={ path } to={ path + childRoutes[ redirectToChild ].defaultLocation } />\r\n            </Switch>\r\n        )\r\n\r\n    return <Route key={name} {...route}/>\r\n}\r\n\r\nconst renderRoutes = ({ path, exact, component, childRoutes }) => {\r\n    const routeComponents = childRoutes.map(renderRoute);\r\n\r\n    //Root route\r\n    routeComponents.unshift(<Route exact={ exact } key={ path } path={ path } component={ component } />)\r\n\r\n    return routeComponents;\r\n}\r\n\r\nconst ExtendedConnectedRouter = ({ routes, history, wrapper }) => {\r\n    const Wrapper = wrapper\r\n    return (\r\n        <ConnectedRouter history={ history }>\r\n            <Wrapper>\r\n                {\r\n                    routes && renderRoutes(routes)\r\n                }\r\n            </Wrapper>\r\n        </ConnectedRouter>\r\n    )\r\n}\r\n\r\nconst stateToProps = (state) => ({\r\n    routes: state.appRouter.routes\r\n})\r\n\r\nexport default connect(stateToProps)(ExtendedConnectedRouter)","import listToTree from 'list-to-tree'\r\nimport { Collapse } from 'reactstrap'\r\nimport classNames from 'classnames'\r\n\r\nclass CategoryMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        const { categories, openListByDefault } = props\r\n\r\n        const tree = new listToTree(categories, { key_parent: 'parentId', key_child: 'children' }).GetTree()\r\n\r\n        var collapse = {}\r\n\r\n        for(var index in categories){\r\n            collapse[categories[index].name] = openListByDefault\r\n        }\r\n\r\n        this.state = {\r\n            collapse,\r\n            tree\r\n        }\r\n\r\n        this.renderCategories = this.renderCategories.bind(this)\r\n        this.renderCategory = this.renderCategory.bind(this)\r\n    }\r\n\r\n    renderCategories(categoryItems) {\r\n        return (\r\n            <ul className=\"category-menu-dropdown\">\r\n                {\r\n                    categoryItems.map((categoryItem, index) => {\r\n                        return this.renderCategory(categoryItem)\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    renderCategory({ title, id, name, children }, className) {\r\n        const { onDataFetch, currentCategory } = this.props\r\n\r\n        return (\r\n            <li id={ id && `category-${id}` } data-name={ name } className={classNames(\"category-menu-item\", className, {'current': currentCategory && currentCategory.id === id })} >\r\n                <a href=\"#\" className=\"all category-menu-item-link\" onClick={ (e) => { \r\n                    e.preventDefault();\r\n                    onDataFetch({currentCategory: { title, id, name }}, 0) } }>\r\n                    { title }\r\n                </a>\r\n                {\r\n                                        children && (\r\n                        <span className=\"chevron\" onClick={() => { this.toogle(name) }}>\r\n                            <i className=\"fa fa-angle-down\" aria-hidden=\"true\" />\r\n                        </span>\r\n                    )\r\n                }\r\n                {\r\n                    children && (\r\n                        <Collapse isOpen={ this.state.collapse[ name ] }>\r\n                            {this.renderCategories(children)}\r\n                        </Collapse>\r\n                    )\r\n                }\r\n            </li>\r\n        )\r\n    }\r\n\r\n    toogle(name) {\r\n        const { collapse } = this.state;\r\n        this.setState({collapse: $.extend(true, {}, collapse, {[name]: !collapse[name]})})\r\n    }\r\n\r\n    render() {\r\n        const  {currentCategory} = this.props;\r\n        const { tree } = this.state;\r\n        return (\r\n            <section className=\"category-menu\">\r\n                <ul className=\"category-menu-list d-none d-lg-block\">\r\n                    { this.renderCategory({ title: localizationString.getString('Tất cả') }, !currentCategory && 'current') }\r\n                    {\r\n                        tree && tree.map((item) => {\r\n                                return this.renderCategory(item)\r\n                        })\r\n                    }\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nCategoryMenu.defaultProps = {\r\n    categories: [],\r\n    openListByDefault: true\r\n}\r\n\r\nexport default CategoryMenu","import { Container } from 'reactstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\n\r\nconst ConnectedBreadcrumbs = (props) => {\r\n    const { routes, params } = props;\r\n    if (routes)\r\n        return (\r\n            <Container className=\"d-none d-lg-block mb-lg-4\">\r\n                <div className=\"breadcrumbs\">\r\n                    {\r\n                        routes.map((route, index) => {\r\n                            const isLast = (route.path === routes[ routes.length -1 ].path)\r\n\r\n                            return (\r\n                                <span key={index} className=\"\">\r\n                                    {\r\n                                        !isLast ? <Link to={ route.path }>{route.label}</Link>\r\n                                            : <a>{route.label}</a>\r\n                                    }\r\n                                </span>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </Container>\r\n        )\r\n    else\r\n        return null\r\n}\r\n\r\nConnectedBreadcrumbs.defaultProps = {\r\n    routes: []\r\n}\r\n\r\nconst stateToProps = (state) => ({\r\n    routes: state.appRouter.routePath\r\n});\r\n\r\n\r\nexport default connect(stateToProps)(ConnectedBreadcrumbs)","const { Link } = require('react-router-dom');\r\n\r\nclass DuAn extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.renderLink = this.renderLink.bind(this);\r\n    }\r\n\r\n    renderLink(title) {\r\n        return(\r\n            <Link to=\"/du-an\"><span>{title}</span></Link>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { data: { thumbnailUrl, title} } = this.props;\r\n\r\n        return (\r\n            <div data-aos=\"zoom-in-up\">\r\n                <div className=\"page-item-thumbnail\">\r\n                    <img className=\"w-100\" src={`/${thumbnailUrl}`}/>\r\n                    <div className=\"overlay\"/>\r\n                    {this.renderLink(localizationString.getString(\"Chi tiết\"))}\r\n                </div>\r\n                <div className=\"page-item-title\">\r\n                    {this.renderLink(title)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nmodule.exports = DuAn;","/*\r\n * marker visual parameters\r\n * image param is more prior than imageClass if both defined\r\n */\r\n\r\nconst markerDescriptions = [{\r\n    size: { width: 33, height: 51 },\r\n    origin: { x: 15 / 33, y: 1 },\r\n    withText: true,\r\n    // image: require('icons/map_icons/map_icon_text_red.svg')\r\n    imageClass: 'map_icon_text_red'\r\n}];\r\n\r\nexport default markerDescriptions;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { push } from 'react-router-redux'\r\nimport { default as PropTypes } from 'prop-types'\r\n\r\nimport controllable from 'react-controllables';\r\nimport shouldPureComponentUpdate from 'react-pure-render/function';\r\n\r\nimport GoogleMap from 'google-map-react';\r\nimport Marker, { K_SCALE_NORMAL } from './marker.jsx';\r\n\r\nimport { getScale, getRealFromTo } from './helpers/calc-markers-visibility.js';\r\nimport markerDescriptions from './constants/marker-descriptions.js';\r\nimport { customDistanceToMouse } from './helpers/custom-distance.js';\r\n\r\nconst K_MARGIN_TOP = 30;\r\nconst K_MARGIN_RIGHT = 30;\r\nconst K_MARGIN_BOTTOM = 30;\r\nconst K_MARGIN_LEFT = 30;\r\n\r\nconst K_HOVER_DISTANCE = 30;\r\n\r\n@controllable([ 'center', 'zoom', 'markers' ])\r\nclass MainMapBlock extends Component {\r\n    static propTypes = {\r\n        onCenterChange: PropTypes.func, // @controllable generated fn\r\n        onZoomChange: PropTypes.func, // @controllable generated fn\r\n        onBoundsChange: PropTypes.func,\r\n        onMarkerHover: PropTypes.func,\r\n        onChildClick: PropTypes.func,\r\n        center: PropTypes.any,\r\n        zoom: PropTypes.number,\r\n        markers: PropTypes.any,\r\n        visibleRowFirst: PropTypes.number,\r\n        visibleRowLast: PropTypes.number,\r\n        maxVisibleRows: PropTypes.number,\r\n        hoveredRowIndex: PropTypes.number,\r\n        openBallonIndex: PropTypes.number,\r\n    }\r\n\r\n    static defaultProps = {\r\n        center: [ 15.866913899999986, 104.1218629 ],\r\n        zoom: 5,\r\n        options: {\r\n            styles: [ { \"featureType\": \"administrative\", \"elementType\": \"labels.text.fill\", \"stylers\": [ { \"color\": \"#444444\" }] }, { \"featureType\": \"landscape\", \"elementType\": \"all\", \"stylers\": [ { \"color\": \"#f2f2f2\" }] }, { \"featureType\": \"poi\", \"elementType\": \"all\", \"stylers\": [ { \"visibility\": \"off\" }] }, { \"featureType\": \"road\", \"elementType\": \"all\", \"stylers\": [ { \"saturation\": -100 }, { \"lightness\": 45 }] }, { \"featureType\": \"road.highway\", \"elementType\": \"all\", \"stylers\": [ { \"visibility\": \"simplified\" }] }, { \"featureType\": \"road.arterial\", \"elementType\": \"labels.icon\", \"stylers\": [ { \"visibility\": \"off\" }] }, { \"featureType\": \"transit\", \"elementType\": \"all\", \"stylers\": [ { \"visibility\": \"off\" }] }, { \"featureType\": \"water\", \"elementType\": \"all\", \"stylers\": [ { \"color\": \"#878787\" }, { \"visibility\": \"on\" }] }, { \"featureType\": \"water\", \"elementType\": \"geometry\", \"stylers\": [ { \"invert_lightness\": true }, { \"weight\": \"3.37\" }, { \"gamma\": \"5\" }, { \"saturation\": \"0\" }, { \"lightness\": \"0\" }] }]\r\n        },\r\n        visibleRowFirst: -1,\r\n        visibleRowLast: -1,\r\n        hoveredRowIndex: -1,\r\n        maxVisibleRows: 10,\r\n        markers: []\r\n    }\r\n\r\n    shouldComponentUpdate = shouldPureComponentUpdate;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        const { center, zoom } = this.props\r\n        if (nextProps.center != center || nextProps.zoom != zoom) {\r\n            this.props.onCenterChange(center);\r\n            this.props.onZoomChange(zoom);\r\n        }\r\n    }\r\n\r\n    _onBoundsChange = ({ center, zoom, bounds, marginBounds }) => {\r\n    }\r\n\r\n    _onChildClick = (key, childProps) => {\r\n        const markerId = childProps.marker.id;\r\n        const index = this.props.markers.findIndex(m => m.id === markerId);\r\n        var currentMarker = this.props.markers[ index ];\r\n        if (currentMarker.redirect)\r\n            this.props.dispatch(push(currentMarker.redirect))\r\n        else\r\n            this.setState({ openBallonIndex: index })\r\n    }\r\n\r\n    _onChildMouseEnter = (key, childProps) => {\r\n        const markerId = childProps.marker.id;\r\n        const index = this.props.markers.findIndex(m => m.id === markerId);\r\n        if (this.props.onMarkerHover) {\r\n            this.props.onMarkerHover(index);\r\n        }\r\n    }\r\n\r\n    _onChildMouseLeave = (/* key, childProps */) => {\r\n        if (this.props.onMarkerHover) {\r\n            this.props.onMarkerHover(-1);\r\n        }\r\n    }\r\n\r\n    _onBalloonCloseClick = () => {\r\n        if (this.props.onChildClick) {\r\n            this.props.onChildClick(-1);\r\n        }\r\n    }\r\n\r\n    _distanceToMouse = customDistanceToMouse;\r\n\r\n    render() {\r\n        const { rowFrom, rowTo } = getRealFromTo(this.props.visibleRowFirst, this.props.visibleRowLast, this.props.maxVisibleRows, this.props.markers.length);\r\n\r\n        const Markers = this.props.markers &&\r\n            //this.props.markers.filter((m, index) => index >= rowFrom && index <= rowTo)\r\n            this.props.markers.map((marker, index) => (\r\n                <Marker\r\n                    // required props\r\n                    key={ marker.id }\r\n                    lat={ marker.lat }\r\n                    lng={ marker.lng }\r\n                    // any user props\r\n                    showBallon={ marker.id === this.props.showBalloonForMarker }\r\n                    onCloseClick={ this._onBalloonCloseClick }\r\n                    renderMarkerContent={ this.props.renderMarkerContent }\r\n                    //hoveredAtTable={ index + rowFrom === this.props.hoveredRowIndex }\r\n                    scale={ getScale(index + rowFrom, this.props.visibleRowFirst, this.props.visibleRowLast, K_SCALE_NORMAL) }\r\n                    {...markerDescriptions[ 0 ]}\r\n                    marker={ marker } />\r\n            ));\r\n\r\n        return (\r\n            <GoogleMap\r\n                bootstrapURLKeys={ { key: \"AIzaSyBB5V34f3crBWyutuwFCy73IzRCdIwqUrI\" } }\r\n                center={ this.props.center }\r\n                zoom={ this.props.zoom }\r\n                options={ this.props.options }\r\n                onChange={ this._onBoundsChange }\r\n                onChildClick={ this._onChildClick }\r\n                onChildMouseEnter={ this._onChildMouseEnter }\r\n                onChildMouseLeave={ this._onChildMouseLeave }\r\n                margin={ [ K_MARGIN_TOP, K_MARGIN_RIGHT, K_MARGIN_BOTTOM, K_MARGIN_LEFT ] }\r\n                hoverDistance={ K_HOVER_DISTANCE }\r\n                distanceToMouse={ this._distanceToMouse }\r\n            >\r\n                { Markers }\r\n            </GoogleMap>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default connect()(MainMapBlock)\r\n","const K_MAX_BALLOON_HEIGHT = 120;\r\n\r\nexport function getHintBaloonVerticalPosClass(y, mapHeight, balloonHeight) {\r\n    balloonHeight = balloonHeight || K_MAX_BALLOON_HEIGHT\r\n\r\n    return y > balloonHeight ? 'hint--top' : 'hint--bottom';\r\n}\r\n\r\nexport function getHintBaloonHorizontalPosStyle(x, markerWidth, markerOffset, mapWidth) {\r\n    const K_BALLOON_WIDTH_BASE = 250;\r\n    // offset from map side\r\n    const K_BALLOON_MAP_OFFSET = 10;\r\n    // balloon with not more than map width\r\n    const K_BALLOON_WIDTH = Math.min(K_BALLOON_WIDTH_BASE, mapWidth - 2 * K_BALLOON_MAP_OFFSET);\r\n    // default ballon offset from arrow center i want\r\n    const K_BALLOON_DEFAULT_OFFSET = K_BALLOON_WIDTH * 0.15;\r\n    // from corner\r\n    const offset = -K_BALLOON_DEFAULT_OFFSET + markerWidth * 0.5;\r\n    // overflow in px (marker assymetric)\r\n    const leftX = x + offset - markerWidth * markerOffset;\r\n    const rightX = leftX + K_BALLOON_WIDTH;\r\n    // recalc if overflow\r\n    const mapOffset = offset + Math.min(0, (mapWidth - K_BALLOON_MAP_OFFSET) - rightX) + Math.max(0, K_BALLOON_MAP_OFFSET - leftX);\r\n\r\n    const K_BALLOON_WIDTH_STYLE = {\r\n        width: `${K_BALLOON_WIDTH}px`,\r\n        left: `${mapOffset}px`,\r\n        marginLeft: '0px'\r\n    };\r\n    return K_BALLOON_WIDTH_STYLE;\r\n}\r\n\r\nexport function getHintBottomOffsetClass(markerWidth, markerOffset) {\r\n    const K_HINT_ARROW_WIDTH = 12;\r\n    const offset = Math.round(-(markerWidth / 2 + K_HINT_ARROW_WIDTH / 2 - markerOffset * markerWidth));\r\n    if (__DEV__) {\r\n        if (offset < -40 || offset > 40) {\r\n            console.error('HintBottomOffset is out of range, extend range at sass/markers/map_marker.sass'); // eslint-disable-line no-console\r\n        }\r\n    }\r\n    // classes generated at sass/markers/map_marker.sass\r\n    return 'map-marker--hint-bottom-delta-' + offset;\r\n}","// import {K_SCALE_NORMAL} from 'components/markers/map_marker.jsx';\r\n// import invariant from 'fixed-data-table-ice/internal/invariant.js';\r\n\r\n// {l: 10, scale: 0.3}, {l: 5, scale: 0.4} - означает\r\n// 10 элементов размера 0.3, потом 5 размера 0.4, потом те что видны в табличке обычного размера\r\n// потом снова потом 5 размера 0.4, и 10 элементов размера 0.3\r\n// если поставить пусто то на карте будут видны тока те что на экране\r\nconst K_SCALE_SMALL = 0.3;\r\nconst K_SCALE_MEDIUM = 0.45;\r\nconst K_BEFORE_AFTER_SCALES = [{ l: 15, scale: K_SCALE_SMALL }, { l: 10, scale: K_SCALE_MEDIUM }];\r\nconst K_SCALES_SUM = K_BEFORE_AFTER_SCALES.reduce((sum, el) => el.l + sum, 0);\r\n\r\n\r\nexport function getScale(rowIndex, rowFrom, rowTo, K_SCALE_NORMAL) {\r\n    if (rowIndex >= rowFrom && rowIndex <= rowTo) {\r\n        return K_SCALE_NORMAL;\r\n    }\r\n\r\n    if (K_BEFORE_AFTER_SCALES.length) {\r\n        if (rowIndex < rowFrom) {\r\n            let deltaS = rowFrom;\r\n            for (let index = K_BEFORE_AFTER_SCALES.length - 1; index >= 0; --index) {\r\n                deltaS -= K_BEFORE_AFTER_SCALES[index].l;\r\n                if (rowIndex >= deltaS) {\r\n                    return K_BEFORE_AFTER_SCALES[index].scale;\r\n                }\r\n            }\r\n\r\n            // yes, the code can be here (dirty calculus)\r\n            return K_BEFORE_AFTER_SCALES[0].scale;\r\n        }\r\n\r\n        if (rowIndex > rowTo) {\r\n            let deltaS = rowTo;\r\n            for (let index = K_BEFORE_AFTER_SCALES.length - 1; index >= 0; --index) {\r\n                deltaS += K_BEFORE_AFTER_SCALES[index].l;\r\n                if (rowIndex <= deltaS) {\r\n                    return K_BEFORE_AFTER_SCALES[index].scale;\r\n                }\r\n            }\r\n\r\n            // yes, the code can be here (dirty calculus)\r\n            return K_BEFORE_AFTER_SCALES[0].scale;\r\n        }\r\n    }\r\n    return K_SCALE_NORMAL;\r\n}\r\n\r\n// this calculations is not precise (dirty)\r\nfunction _getRealFromTo(rowFrom, rowTo, maxVisibleRows, totalSize) {\r\n    let addFrom = ((rowFrom + maxVisibleRows + K_SCALES_SUM) > (totalSize - 1)) ? ((rowFrom + maxVisibleRows + K_SCALES_SUM) - (totalSize - 1)) : 0;\r\n\r\n    const dadd = K_SCALES_SUM - rowFrom;\r\n    let addTo = dadd >= 0 ? dadd : 0;\r\n\r\n    return {\r\n        rowFrom: Math.max(0, rowFrom - K_SCALES_SUM - addFrom),\r\n        rowTo: Math.min(totalSize - 1, rowFrom + maxVisibleRows + K_SCALES_SUM + addTo)\r\n    };\r\n}\r\n\r\nexport function getRealFromTo(rowFrom, rowTo, maxVisibleRows, totalSize) {\r\n    const current = _getRealFromTo(rowFrom, rowTo, maxVisibleRows, totalSize);\r\n\r\n    const result = {\r\n        rowFrom: current.rowFrom,\r\n        rowTo: current.rowTo\r\n    };\r\n\r\n    return result;\r\n}","export function customDistanceToMouse(pt, mousePos, markerProps) {\r\n    const K_SCALE_NORMAL = 0.65;\r\n\r\n    const K_MARKER_HEIGHT = 60;\r\n    // marker is more tall at top, so calc distance to some point at marker top\r\n    const K_MARKER_WEIGHT_PT = K_MARKER_HEIGHT * 0.7;\r\n    // distance to markers depends on scale so hover on big markers is more probable\r\n    const scale = markerProps.scale;\r\n    const x = pt.x;\r\n    const y = pt.y - K_MARKER_WEIGHT_PT * scale;\r\n\r\n    const scaleNormalized = Math.min(scale / K_SCALE_NORMAL, 1);\r\n    const K_MIN_DIST_MIN_KOEF = 0.6;\r\n\r\n    const distKoef = 1 + scaleNormalized * (K_MIN_DIST_MIN_KOEF - 1);\r\n    return distKoef * Math.sqrt((x - mousePos.x) * (x - mousePos.x) + (y - mousePos.y) * (y - mousePos.y));\r\n}","export function getMarkerHolderStyle(size, origin) {\r\n  const left = -size.width * origin.x;\r\n  const top = -size.height * origin.y;\r\n  return {\r\n    position: 'absolute',\r\n    width: size.width,\r\n    height: size.height,\r\n    left: left,\r\n    top: top,\r\n    cursor: 'pointer'\r\n  };\r\n}\r\n\r\nexport function getMarkerStyle(size, origin) {\r\n  const sizeOriginX = size.width * origin.x;\r\n  const sizeOriginY = size.height * origin.y;\r\n\r\n  return {\r\n    position: 'absolute',\r\n    width: size.width,\r\n    height: size.height,\r\n    left: 0,\r\n    top: 0,\r\n    willChange: 'transform', // it looks like this setting make firefox random marker movements smaller\r\n    backgroundSize: `${size.width}px ${size.height}px`,\r\n    backgroundRepeat: 'no-repeat',\r\n    // transition: 'transform 0.25s ease',\r\n    transition: 'transform 0.25s cubic-bezier(0.485, 1.650, 0.545, 0.835)',\r\n    WebkitTransition: '-webkit-transform 0.25s cubic-bezier(0.485, 1.650, 0.545, 0.835)',\r\n    transformOrigin: `${sizeOriginX}px ${sizeOriginY}px`,\r\n    WebkitTransformOrigin: `${sizeOriginX}px ${sizeOriginY}px`\r\n  };\r\n}\r\n\r\nconst textStyle_ = {\r\n  width: '100%',\r\n  textAlign: 'center',\r\n  marginTop: 10,\r\n  fontWeight: 'bold',\r\n  fontSize: '18px',\r\n  color: 'black'\r\n};\r\n\r\nexport function getMarkerTextStyle() {\r\n  return textStyle_;\r\n}","import React, { Component } from 'react'\r\nimport { default as PropTypes } from 'prop-types'\r\nimport cx from 'classnames';\r\n\r\nimport controllable from 'react-controllables';\r\n\r\nimport shouldPureComponentUpdate from 'react-pure-render/function';\r\nimport { getHintBottomOffsetClass, getHintBaloonVerticalPosClass, getHintBaloonHorizontalPosStyle } from './helpers/balloon-pos.js';\r\nimport { getMarkerHolderStyle, getMarkerStyle, getMarkerTextStyle } from './helpers/marker-styles.js';\r\n\r\nconst K_HINT_HTML_DEFAULT_Z_INDEX = 1000000;\r\nconst K_SCALE_HOVER = 1;\r\nconst K_SCALE_TABLE_HOVER = 1;\r\nconst K_SCALE_NORMAL = 0.65;\r\nconst K_MIN_CONTRAST = 0.4;\r\n\r\n\r\nfunction calcMarkerMarkerStyle(scale, zIndexStyle, markerStyle, imageStyle) {\r\n    const contrast = K_MIN_CONTRAST + (1 - K_MIN_CONTRAST) * Math.min(scale / K_SCALE_NORMAL, 1);\r\n\r\n    return {\r\n        transform: `scale(${scale} , ${scale})`,\r\n        WebkitTransform: `scale(${scale} , ${scale})`,\r\n        filter: `contrast(${contrast})`,\r\n        WebkitFilter: `contrast(${contrast})`,\r\n        ...markerStyle,\r\n        ...zIndexStyle,\r\n        ...imageStyle\r\n    };\r\n}\r\n\r\nfunction calcMarkerTextStyle(scale, markerTextStyle) {\r\n    const K_MAX_COLOR_VALUE = 0;\r\n    const K_MIN_COLOR_VALUE = 8;\r\n    const colorV = Math.ceil(K_MIN_COLOR_VALUE + (K_MAX_COLOR_VALUE - K_MIN_COLOR_VALUE) * Math.min(scale / K_SCALE_NORMAL, 1));\r\n    const colorHex = colorV.toString(16);\r\n    const colorHTML = `#${colorHex}${colorHex}${colorHex}`;\r\n\r\n    return {\r\n        ...markerTextStyle,\r\n        color: colorHTML\r\n    };\r\n}\r\n\r\nexport { K_SCALE_NORMAL };\r\n\r\n@controllable([ 'hoverState', 'showBallonState' ])\r\nexport default class MapMarker extends Component {\r\n    static propTypes = {\r\n        $hover: PropTypes.bool,\r\n        $dimensionKey: PropTypes.any,\r\n        $getDimensions: PropTypes.func,\r\n        $geoService: PropTypes.any,\r\n        $onMouseAllow: PropTypes.func,\r\n\r\n        marker: PropTypes.any,\r\n        hoveredAtTable: PropTypes.bool,\r\n        scale: PropTypes.number,\r\n        showBallon: PropTypes.bool,\r\n        onCloseClick: PropTypes.func,\r\n        showBallonState: PropTypes.bool.isRequired,\r\n        onShowBallonStateChange: PropTypes.func.isRequired,\r\n\r\n        // animation helpers\r\n        hoverState: PropTypes.bool.isRequired,\r\n        onHoverStateChange: PropTypes.func.isRequired,\r\n\r\n        size: PropTypes.any,\r\n        origin: PropTypes.any,\r\n        imageClass: PropTypes.string,\r\n        image: PropTypes.string,\r\n        withText: PropTypes.bool,\r\n        hintType: PropTypes.string\r\n    };\r\n\r\n    static defaultProps = {\r\n        scale: K_SCALE_NORMAL,\r\n        hoverState: false,\r\n        showBallonState: false,\r\n        withText: false,\r\n        size: { width: 62, height: 60 },\r\n        origin: { x: 15 / 62, y: 1 },\r\n        imageClass: 'map-marker__marker--big',\r\n        hintType: 'hint--info'\r\n    };\r\n\r\n    shouldComponentUpdate = shouldPureComponentUpdate;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.alive = true;\r\n    }\r\n\r\n    _onShowBallonStateChange = (...args) => {\r\n        if (!this.alive) return;\r\n        this.props.onShowBallonStateChange(...args);\r\n    }\r\n\r\n    _onHoverStateChange = (...args) => {\r\n        if (!this.alive) return;\r\n        this.props.onHoverStateChange(...args);\r\n    }\r\n\r\n    _onMouseEnterContent = (/*e*/) => {\r\n        this.props.$onMouseAllow(false); // disable mouse move hovers\r\n    }\r\n\r\n    _onMouseLeaveContent = (/*e*/) => {\r\n        this.props.$onMouseAllow(true); // enable mouse move hovers\r\n    }\r\n\r\n    _onCloseClick = () => {\r\n        if (this.props.onCloseClick) {\r\n            this.props.onCloseClick();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // if (this.props.onCloseClick) {\r\n        //   this.props.onCloseClick();\r\n        // }\r\n        this.alive = false;\r\n    }\r\n\r\n    // no optimizations at all\r\n    render() {\r\n        let scale = this.props.$hover || this.props.showBallon ? K_SCALE_HOVER :K_SCALE_NORMAL\r\n        scale = this.props.hoveredAtTable ? K_SCALE_TABLE_HOVER : scale;\r\n\r\n        const markerHolderStyle = getMarkerHolderStyle(this.props.size, this.props.origin);\r\n        const markerStyle = getMarkerStyle(this.props.size, this.props.origin);\r\n\r\n        const zIndexStyle = {\r\n            zIndex: Math.round(scale * 10000) - (this.props.showBallon ? 20 : 0) + (this.props.$hover ? K_HINT_HTML_DEFAULT_Z_INDEX : 0) // balloon\r\n        };\r\n\r\n        const textStyleDef = getMarkerTextStyle();\r\n        const textStyle = calcMarkerTextStyle(scale, textStyleDef);\r\n\r\n        const showHint = this.props.hoverState || this.props.showBallonState; // || this.props.hoveredAtTable;\r\n\r\n        // baloon position calc\r\n        const mapWidth = this.props.$geoService.getWidth();\r\n        const mapHeight = this.props.$geoService.getHeight();\r\n        const markerDim = this.props.$getDimensions(this.props.$dimensionKey);\r\n\r\n        const hintBaloonHorizontalPosStyle = getHintBaloonHorizontalPosStyle(markerDim.x, this.props.size.width, this.props.origin.x, mapWidth);\r\n        const hintBaloonVerticalPosClass = getHintBaloonVerticalPosClass(markerDim.y, mapHeight, this.props.marker.height);\r\n\r\n        const hintBalloonBottomOffsetClass = getHintBottomOffsetClass(this.props.size.width, this.props.origin.x);\r\n\r\n        // set baloon position at first and then animate (it must be some lib for react animations)\r\n        const noTransClass = this.props.$hover === true && this.props.hoverState !== true ? 'hint--notrans' : '';\r\n        const noTransBalloonClass = this.props.showBallon === true && this.props.showBallonState !== true ? 'hint--notrans' : '';\r\n\r\n        const imageClass = this.props.image ? '' : this.props.imageClass;\r\n        const imageStyle = this.props.image ? {\r\n            backgroundImage: `url(${this.props.image})`\r\n        } : null;\r\n\r\n        const styleMarkerMarker = calcMarkerMarkerStyle(scale, zIndexStyle, markerStyle, imageStyle);\r\n\r\n        // css hints library https://github.com/istarkov/html-hint\r\n        return (\r\n            <div\r\n                style={ markerHolderStyle }\r\n                className={ cx('map-marker hint hint--html',\r\n                    this.props.hintType,\r\n                    hintBalloonBottomOffsetClass,\r\n                    noTransClass, noTransBalloonClass, hintBaloonVerticalPosClass,\r\n                    this.props.showBallon ? 'hint--balloon' : '',\r\n                    showHint ? 'hint--always' : 'hint--hidden') }>\r\n                <div\r\n                    style={ styleMarkerMarker }\r\n                    className={ cx('map-marker__marker', imageClass) }>\r\n                    { this.props.withText ?\r\n                        <div style={ textStyle }>\r\n                            { this.props.marker.number }\r\n                        </div>\r\n                        :\r\n                        <div /> }\r\n                </div>\r\n                <div style={ hintBaloonHorizontalPosStyle } className={ cx('hint__content map-marker-hint', this.props.showBallon ? '' : 'noevents') }\r\n                    onMouseEnter={ this._onMouseEnterContent }\r\n                    onMouseLeave={ this._onMouseLeaveContent }>\r\n                    {/*<div className=\"balloon\">\r\n                        <div onClick={ this._onCloseClick } className={ cx('map-marker-hint__close-button', this.props.showBallon ? 'map-marker-hint__close-button--visible' : '') }>\r\n                            x\r\n                        </div>\r\n\r\n                        <div className=\"map-marker-hint__title\">\r\n                            <strong>{ this.props.marker.title }</strong>\r\n                        </div>\r\n                        <div className=\"map-marker-hint__address\">\r\n                            { this.props.marker.address }\r\n                        </div>\r\n\r\n                        <div className={ cx('map-marker-hint__content', this.props.showBallon ? 'map-marker-hint__content--visible' : '') }>\r\n                            { this.props.marker.description }\r\n                        </div>\r\n                    </div>*/}\r\n\r\n                    { this.props.renderMarkerContent(this.props.marker) }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const K_TRANS_DELAY = 30;\r\n\r\n        if (prevProps.$hover !== this.props.$hover) {\r\n            setTimeout(() => this._onHoverStateChange(this.props.$hover), K_TRANS_DELAY);\r\n        }\r\n\r\n        if (prevProps.showBallon !== this.props.showBallon) {\r\n            setTimeout(() => this._onShowBallonStateChange(this.props.showBallon), K_TRANS_DELAY);\r\n        }\r\n    }\r\n}","module.exports = (props) => {\r\n    const { url, title, description, className } = props;\r\n\r\n    return (\r\n        <img className={`w-100 ${className}`} src={`/${url}`} title={title} alt={description}/>\r\n    );\r\n}","const classnames = require('classNames');\r\nconst { Container, Row } = require('reactstrap');\r\nconst Title = require('./section-title');\r\nconst Image = require('./image');\r\n\r\nconst renderArticle = (props) => {\r\n    const { className, thumbnail, title, content } = props;\r\n    return (\r\n        <article className={classnames(className)}>\r\n            <Container fluid className=\"mb-5\">\r\n                <Row>\r\n                    <Image className=\"h-100\" {...thumbnail} />\r\n                </Row>\r\n            </Container>\r\n            <Container>\r\n                <Title>{title}</Title>\r\n                <div className=\"ml-3 mr-3 ml-lg-0 mr-lg-0\" dangerouslySetInnerHTML={{ __html: content }} />\r\n            </Container>\r\n        </article>\r\n    );\r\n}\r\n\r\nmodule.exports = renderArticle;","const { Link } = require('react-router-dom');\r\n\r\nclass PageItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.renderLink = this.renderLink.bind(this);\r\n    }\r\n\r\n    renderLink(title) {\r\n        const { path } = this.props\r\n        return (\r\n            <Link to={ path }><span>{ title }</span></Link>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { data: { thumbnailUrl, title }, extraText } = this.props;\r\n\r\n        return (\r\n            <div className=\"page-item-wrapper\">\r\n                <div className=\"page-item-thumbnail\">\r\n                    <img className=\"w-100\" src={ `/${thumbnailUrl}` } />\r\n                    <div className=\"overlay\" />\r\n                    { this.renderLink(localizationString.getString(\"Chi tiết\")) }\r\n                </div>\r\n                <div className=\"page-item-title\">\r\n                    { this.renderLink(title) }\r\n                    <span className=\"extra-text\">\r\n                        { extraText }\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nPageItem.defautProps = {\r\n    basePath: '/',\r\n    extraText: '',\r\n    data: {\r\n        title: 'Missing title!',\r\n        thumbnailUrl: '/img/default.png'\r\n    }\r\n}\r\n\r\nmodule.exports = PageItem;","import React, { Component } from 'react';\r\n\r\nimport { default as PropTypes } from 'prop-types'\r\nimport { default as classNames } from 'classnames'\r\n\r\nimport { default as Pager } from './pagination/pager'\r\nimport { default as ItemContainer } from './pagination/item-container'\r\nimport { default as PagerAjax } from './pagination/pager-ajax'\r\n\r\nclass componentName extends Component {\r\n    static propTypes = {\r\n        renderItem: PropTypes.func.isRequired\r\n    }\r\n\r\n    static defaultProps = {\r\n        items: [],\r\n        itemPerPage: 9,\r\n        layout: {\r\n            xs: 12, sm: 6, md: 4, lg: 4, xl: 4\r\n        }\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            currentPage: 1\r\n        }\r\n        this.onItemsChange = this.onItemsChange.bind(this)\r\n    }\r\n\r\n    onItemsChange(pageItems, currentPage, totalPages) {\r\n        this.setState({ pageItems, currentPage, totalPages })\r\n    }\r\n\r\n    render() {\r\n        const { className, items, itemPerPage, layout, renderItem, itemWrapperClassName, getPageUrl, currentPage, totalPages } = this.props\r\n\r\n        //ItemContainer will render current page item\r\n        return (\r\n            <div className={ classNames(className, \"pagination-container\") }>\r\n\r\n                <ItemContainer className={ \"mb-4\" }\r\n                    items={ this.state.pageItems || items }\r\n                    layout={ layout }\r\n                    renderItem={ renderItem }\r\n                    itemWrapperClassName={ itemWrapperClassName } />\r\n                {\r\n                    getPageUrl ?\r\n                        <PagerAjax className=\"float-right\"\r\n                            currentPage={ currentPage }\r\n                            totalPages={ totalPages }\r\n                            itemPerPage={ itemPerPage }\r\n                            getPageUrl={ getPageUrl }\r\n                            onItemsChange={ this.onItemsChange }\r\n                        /> :\r\n                        <Pager className=\"float-right\"\r\n                            items={ items }\r\n                            itemPerPage={ itemPerPage }\r\n                            onItemsChange={ this.onItemsChange }\r\n                        />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default componentName;","import React, { Component } from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport { Row } from 'reactstrap'\r\nimport { default as PagingItemWrapper } from './item-wrapper'\r\nimport $ from 'jquery'\r\nimport { default as classNames } from 'classnames'\r\n\r\nclass PagingItemContainer extends Component {\r\n    static defaultProps = {\r\n        items: []\r\n    }\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            itemToDisplay: []\r\n        }\r\n        this.refreshContainerView = this.refreshContainerView.bind(this)\r\n        this.displayNewItems = this.displayNewItems.bind(this)\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (JSON.stringify(nextProps.items) != JSON.stringify(this.props.items)) {\r\n            this.refreshContainerView(nextProps.items)\r\n        }\r\n    }\r\n\r\n    displayNewItems() { \r\n        this.setState({ displayNewItems: this.itemToDisplay })\r\n    }\r\n\r\n    refreshContainerView(itemToDisplay) {\r\n        this.itemToDisplay = itemToDisplay\r\n\r\n        const $wrapper = $(ReactDOM.findDOMNode(this.refs[ 'wrapper' ]))\r\n        $('.paging-item-wrapper.on-display').addClass('fade-left').delay(500).queue(this.displayNewItems)\r\n    }\r\n\r\n    render() {\r\n        const { className, items, renderItem, layout, itemWrapperClassName } = this.props\r\n        return (\r\n            <div className={classNames(\"paging-wrapper\", className)} ref=\"wrapper\">\r\n                <Row className=\"paging-item-container\">\r\n                    {\r\n                        items.map((item, index) => {\r\n                            return <PagingItemWrapper key={index} className={classNames(\"paging-item-wrapper\", itemWrapperClassName)} {...layout} item={ item } renderItem={ renderItem } />\r\n                        })\r\n                    }\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PagingItemContainer","import React, { Component } from 'react'\r\nimport { Col } from 'reactstrap'\r\n\r\nclass PagingItemWrapper extends Component {\r\n    componentWillUnmount() {\r\n    }\r\n\r\n    render() {\r\n        const { xs, sm, md, lg, xl, item, renderItem, className } = this.props\r\n        return (\r\n            <Col className={ className } xs={ xs } sm={ sm } md={ md } lg={ lg } xl={ xl }>\r\n                { renderItem(item) }\r\n            </Col>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PagingItemWrapper","import React, { PropTypes } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport _ from 'underscore'\r\nimport { default as classNames } from 'classnames'\r\n\r\nclass Pager extends React.Component {\r\n    \r\n    static propTypes = {\r\n        onItemsChange: PropTypes.func.isRequired,\r\n        initialPage: PropTypes.number\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { pager: {} };\r\n        this.renderPage = this.renderPage.bind(this)\r\n        this.renderPageLink = this.renderPageLink.bind(this)\r\n    }\r\n\r\n    renderPageLink(page, label) {\r\n        const { getPageUrl } = this.props\r\n        return (<Link className=\"page-link\" to={ getPageUrl(page) } dangerouslySetInnerHTML={{__html: label || page }}/>)\r\n    }\r\n\r\n    renderPage() {\r\n        const { currentPage, totalPages, basePath, getPageUrl } = this.props\r\n        const pageComonents = []\r\n\r\n        for (var page = 1; page <= totalPages; page++) {\r\n            pageComonents.push(\r\n                <li key={ page } className={ classNames(\"page-item\", { active: currentPage === page }) }>\r\n                    { this.renderPageLink(page) }\r\n                </li>\r\n            )\r\n        }\r\n\r\n        return pageComonents\r\n    }\r\n\r\n    render() {\r\n        const { totalPages, currentPage, getPageUrl } = this.props\r\n\r\n        if (!totalPages || totalPages <= 1) {\r\n            // don't display pager if there is only 1 page\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className={ classNames(\"pager\", this.props.className) }>\r\n                <ul className=\"pagination\">\r\n                    <li className={ classNames(\"page-item\", { disabled: currentPage === 1 }) }>\r\n                        { this.renderPageLink(1, '<i class=\"fa fa-angle-left\" aria-hidden=\"true\"></i>') }\r\n                    </li>\r\n                    { this.renderPage() }\r\n                    <li className={ classNames(\"page-item\", { disabled: currentPage === totalPages }) }>\r\n                        { this.renderPageLink(totalPages, '<i class=\"fa fa-angle-right\" aria-hidden=\"true\"></i>') }\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pager;","import React, { PropTypes } from 'react'\r\nimport _ from 'underscore'\r\nimport {default as classNames } from 'classnames'\r\n\r\nclass Pager extends React.Component {\r\n    static defaultProps = {\r\n        initialPage: 1,\r\n    }\r\n    static propTypes = {\r\n        items: PropTypes.array.isRequired,\r\n        onItemsChange: PropTypes.func.isRequired,\r\n        initialPage: PropTypes.number\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { pager: {} };\r\n    }\r\n\r\n    componentWillMount() {\r\n        // set page if items array isn't empty\r\n        if (this.props.items && this.props.items.length) {\r\n            this.setPage(this.props.initialPage);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // reset page if items array has changed\r\n        if (this.props.items !== prevProps.items) {\r\n            this.setPage(this.props.initialPage);\r\n        }\r\n    }\r\n\r\n    setPage(page) {\r\n        var items = this.props.items;\r\n        var pager = this.state.pager;\r\n\r\n        if (page < 1 || page > pager.totalPages) {\r\n            return;\r\n        }\r\n\r\n        // get new pager object for specified page\r\n        pager = this.getPager(items.length, page);\r\n\r\n        // get new page of items from items array\r\n        var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\r\n\r\n        // update state\r\n        this.setState({ pager: pager });\r\n\r\n        // call change page function in parent component\r\n        this.props.onItemsChange(pageOfItems);\r\n    }\r\n\r\n    getPager(totalItems, currentPage, pageSize) {\r\n        // default to first page\r\n        currentPage = currentPage || 1;\r\n\r\n        // default page size is 10\r\n        pageSize = pageSize || this.props.itemPerPage;\r\n\r\n        // calculate total pages\r\n        var totalPages = Math.ceil(totalItems / pageSize);\r\n\r\n        var startPage, endPage;\r\n        if (totalPages <= 10) {\r\n            // less than 10 total pages so show all\r\n            startPage = 1;\r\n            endPage = totalPages;\r\n        } else {\r\n            // more than 10 total pages so calculate start and end pages\r\n            if (currentPage <= 6) {\r\n                startPage = 1;\r\n                endPage = 10;\r\n            } else if (currentPage + 4 >= totalPages) {\r\n                startPage = totalPages - 9;\r\n                endPage = totalPages;\r\n            } else {\r\n                startPage = currentPage - 5;\r\n                endPage = currentPage + 4;\r\n            }\r\n        }\r\n\r\n        // calculate start and end item indexes\r\n        var startIndex = (currentPage - 1) * pageSize;\r\n        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\r\n\r\n        // create an array of pages to ng-repeat in the pager control\r\n        var pages = _.range(startPage, endPage + 1);\r\n\r\n        // return object with all pager properties required by the view\r\n        return {\r\n            totalItems: totalItems,\r\n            currentPage: currentPage,\r\n            pageSize: pageSize,\r\n            totalPages: totalPages,\r\n            startPage: startPage,\r\n            endPage: endPage,\r\n            startIndex: startIndex,\r\n            endIndex: endIndex,\r\n            pages: pages\r\n        };\r\n    }\r\n\r\n    render() {\r\n        var pager = this.state.pager;\r\n\r\n        if (!pager.pages || pager.pages.length <= 1) {\r\n            // don't display pager if there is only 1 page\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className={classNames(\"pager\", this.props.className)}>\r\n                <ul className=\"pagination\">\r\n                    <li className={classNames(\"page-item\", { disabled : pager.currentPage === 1 })}>\r\n                        <a className=\"page-link\" onClick={ () => this.setPage(1) }>{`<`}</a>\r\n                    </li>\r\n                    { pager.pages.map((page, index) =>\r\n                        <li key={ index } className={classNames(\"page-item\", { active : pager.currentPage === page })}>\r\n                            <a className=\"page-link\" onClick={ () => this.setPage(page) }>{ page }</a>\r\n                        </li>\r\n                    ) }\r\n                    <li className={classNames(\"page-item\", { disabled : pager.currentPage === pager.totalPages })}>\r\n                        <a className=\"page-link\" onClick={ () => this.setPage(pager.totalPages) }>{\">\"}</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Pager;","module.exports = (props) => {\r\n    return (\r\n        <div className=\"section-title w-100 text-center mb-3 mb-lg-4 mb-lg-5\">\r\n            <h2 className=\"title\">\r\n                {props.children}\r\n            </h2>\r\n        </div>\r\n    );\r\n}","import React, { Component } from 'react'\r\nimport { default as SidebarWidget } from './sidebar-widget'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nclass SidebarMenu extends Component {\r\n\r\n    render() {\r\n        const { noBorder, title, onTransitionTo, currentUrl, items } = this.props\r\n\r\n        return (\r\n            <SidebarWidget noBorder={ noBorder } title={ title }>\r\n                <ul className=\"sidebar-widget-menu\">\r\n                    {\r\n                        items.map((item, index) => (\r\n                            <li className=\"sidebar-widget-item\" key={ index }>\r\n                                <NavLink className=\"sidebar-widget-link\" to={ item.path } activeClassName='current'>\r\n                                    <span className=\"sidebar-widget-link-title\">\r\n                                        { item.title }\r\n                                    </span>\r\n                                </NavLink>\r\n                            </li>\r\n                        ))\r\n                    }\r\n                </ul>\r\n            </SidebarWidget>\r\n        )\r\n    }\r\n}\r\n\r\nSidebarMenu.defaultProps = {\r\n    items: []\r\n}\r\n\r\n\r\nexport default SidebarMenu;","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { Link } from 'react-router-dom'\r\nimport { Collapse } from 'reactstrap'\r\n\r\nclass SidebarWidget extends Component {\r\n    static propTypes = {\r\n        title: PropTypes.string.isRequired,\r\n        toggleDefault: PropTypes.bool\r\n    };\r\n\r\n    static defaultProps = {\r\n        title: 'Missing title',\r\n        toggleDefault: true\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            toggle: props.toggleDefault\r\n        }\r\n\r\n        this.widgetClassName = classNames(\"widget-item\", { \"no-border\": props.noBorder }, )\r\n        this.titleClassName = classNames('widget-item-title', props.titleClassName)\r\n        this.toggle = this.toggle.bind(this)\r\n        this.renderContent = this.renderContent.bind(this)\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({ toggle: !this.state.toggle })\r\n    }\r\n\r\n    renderContent() {\r\n        const { children, className } = this.props\r\n\r\n        return (\r\n            <div className={ classNames(className, 'widget-item-content') }>\r\n                {\r\n                    children\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { title, link, noCollapse } = this.props\r\n\r\n        return (\r\n            <div className={ this.widgetClassName } >\r\n                <div className=\"widget-item-header\">\r\n                    {\r\n                        link ? (\r\n                            <Link to={ link } className={ this.titleClassName }>\r\n                                { title }\r\n                            </Link>\r\n                        ) :\r\n                            <span href=\"#\" className={ this.titleClassName }>\r\n                                { title }\r\n                            </span>\r\n                    }\r\n\r\n                    {\r\n                        noCollapse || (\r\n                            <span className=\"chevron\" onClick={ this.toggle }>\r\n                                <i className=\"fa fa-angle-down\" aria-hidden=\"true\" />\r\n                            </span>\r\n                        )\r\n                    }\r\n                </div>\r\n                <div className=\"widget-item-content-container\">\r\n                    {\r\n                        noCollapse ? this.renderContent() :\r\n                            (\r\n                                <Collapse isOpen={ this.state.toggle } >\r\n                                    { this.renderContent() }\r\n                                </Collapse>\r\n                            )\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SidebarWidget;","class Sidebar extends React.Component {\r\n    render() {\r\n        const { children } = this.props\r\n        return (\r\n            <aside className=\"sidebar mr-lg-4\">\r\n                { children }\r\n            </aside>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sidebar","﻿const { combineReducers } = require('redux');\r\nconst { routerReducer } = require('react-router-redux');\r\n\r\n//reducers\r\nconst localization = require('./reducers/localization').reducer;\r\nconst menu = require('./_layout/header/menu').reducer;\r\nconst layout = require('./_layout').reducer;\r\nconst connectedBasePage = require('./_layout/main/connected-base-page').reducer;\r\n\r\nimport { googleMapReducer } from './reducers/google-map'\r\nimport { reducer as appRouter } from '../routes'\r\n\r\nconst reducer = combineReducers({\r\n    layout,\r\n    localization,\r\n    menu,\r\n    connectedBasePage,\r\n    router: routerReducer,\r\n    appRouter,\r\n    googleMap: googleMapReducer\r\n})\r\n\r\nmodule.exports = reducer;","const SHOW_MARKER_BALLOON = \"GMAP_SHOW_MARKER_BALLOON\"\r\nconst CREATE_MAP = \"GMAP_CEATE_MAP\"\r\nconst SET_MAP_VALUE = \"GMAP_SET_MAP\"\r\nconst SET_MAP_MARKERS = \"GMAP_SET_MAP_MARKERS\"\r\n\r\nconst showMarkerBalloon = (mapId, markerId) => ({\r\n    type: SHOW_MARKER_BALLOON,\r\n    mapId,\r\n    markerId\r\n})\r\n\r\nconst createMap = (mapId) => ({\r\n    type: CREATE_MAP,\r\n    mapId\r\n})\r\n\r\nconst setMapValue = (mapId, map) => ({\r\n    type: SET_MAP_VALUE,\r\n    mapId,\r\n    map\r\n})\r\n\r\nconst setMapMarkers = (mapId, markers) => ({\r\n    type: SET_MAP_MARKERS,\r\n    mapId, \r\n    markers\r\n})\r\n\r\nconst googleMapInitialState = {\r\n\r\n}\r\n\r\nconst googleMapReducer = (state = googleMapInitialState, action) => {\r\n    switch (action.type) {\r\n        case CREATE_MAP:\r\n            var newState = $.extend(true, {}, state)\r\n            newState[ action.mapId ] = {}\r\n            return newState\r\n        case SET_MAP_VALUE:\r\n            var newState = $.extend(true, {}, state)\r\n            newState[ action.mapId ] = $.extend(true, {}, newState[ action.mapId ], action.map)\r\n            return newState\r\n        case SET_MAP_MARKERS:\r\n            var newState = $.extend(true, {}, state)\r\n\r\n            //Đôi khi, action này đc gọi trước khi init map\r\n            //các giá trị của map sẽ lấy theo mặc định của component\r\n            if(!newState[ action.mapId ])\r\n                newState[ action.mapId ] = {}\r\n\r\n            newState[ action.mapId ].markers = action.markers\r\n            return newState\r\n        case SHOW_MARKER_BALLOON:\r\n            var newState = $.extend(true, {}, state)\r\n            newState[ action.mapId ].showBalloonForMarker = action.markerId\r\n            return newState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport {\r\n    createMap,\r\n    showMarkerBalloon,\r\n    setMapValue,\r\n    setMapMarkers,\r\n    googleMapReducer\r\n}","﻿const $ = require('jquery');\r\n\r\nconst keys = {\r\n    init: \"INIT\",\r\n    swithLanguage: \"SWITH_LANGUAGE\",\r\n}\r\n\r\nconst actions = {\r\n    swithLanguage: (language) => ({\r\n        type: keys.swithLanguage,\r\n        language\r\n    }),\r\n\r\n    //initState:\r\n    // - languages\r\n    // - currentLanguage\r\n    init: (initState) => ({\r\n        type: keys.init,\r\n        initState\r\n    })\r\n}\r\n\r\nconst reducer = (state = {}, action) => {\r\n    const newState = $.extend(true, {}, state);\r\n    switch (action.type) {\r\n        case keys.init:\r\n            return action.initState;\r\n        case keys.swithLanguage:\r\n            newState.currentLanguage = actions.language;\r\n            break;\r\n        default:\r\n            return state;\r\n    }\r\n    return newState;\r\n}\r\n\r\nmodule.exports = {\r\n    actions,\r\n    reducer\r\n}","import dataRequest from './ultilities/requestData'\r\nimport { fetchEntities } from './ultilities/fetchEntities'\r\n\r\nexport { dataRequest, fetchEntities }","const dataRequest = require('./requestData')\r\n\r\nfunction getItemsWithPath(items, basePath) {\r\n    const itemsWithPath = items.map((item) => {\r\n        item.path = `${basePath}/${item.name}`\r\n        return item\r\n    })\r\n    return itemsWithPath\r\n}\r\n\r\nexport function fetchEntities(mvcControllerUrl, postParams, baseItemPath, callBack) {\r\n    const { page, pageSize, filtering, sorted, categories, additionalFields } = postParams\r\n\r\n    dataRequest(mvcControllerUrl + \"/GetTableData\", pageSize, page, sorted, filtering, categories, additionalFields,\r\n        (responseItems) => {\r\n            if (responseItems.length) {\r\n                const itemsWithPath = getItemsWithPath(responseItems, baseItemPath)\r\n                $.get(mvcControllerUrl + '/GetTotalEntitiesCount', function (totalItem) {\r\n                    const totalPages = Math.ceil(totalItem / pageSize)\r\n                    callBack(itemsWithPath, totalPages)\r\n                })\r\n            }\r\n        })\r\n}\r\n","const requestData = (url, pageSize, page, sorted, filtering, taxonomies, additionalFields, callback) => {\r\n    $.ajax({\r\n        url,\r\n        method: \"POST\",\r\n        data: { pageSize, page, sorted, filtering, taxonomies, additionalFields },\r\n        success: callback\r\n    });\r\n}\r\n\r\nmodule.exports = requestData\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n//Components\r\nimport { Container, Row, Col } from 'reactstrap'\r\nimport { Image, Pagination } from '../../shared/components'\r\n\r\n//Helper functions\r\nimport { renderItem } from '../helper/render-items'\r\nconst { fetchEntities } = require('../../shared/ultilities')\r\nconst { getCurrentCategory } = require('../helper/functions')\r\n\r\nconst pageConfigure = require('../configuration.js')\r\n\r\nclass DefaultView extends Component {\r\n    static defaultProps = {\r\n        categories: [],\r\n        pageContent: {\r\n            thumbnail: {}\r\n        }\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (JSON.stringify(nextProps.match) != JSON.stringify(this.props.match) ||\r\n            JSON.stringify(nextProps.categories) != JSON.stringify(this.props.categories)) {\r\n            const { categories, match, onDataFetch } = nextProps\r\n            const currentCategory = getCurrentCategory(match, categories)\r\n            const currentPage = match.params.page\r\n\r\n            const postParams = {\r\n                page: currentPage,\r\n                pageSize: pageConfigure.ITEM_PER_PAGE,\r\n                categories: currentCategory.id && { [ pageConfigure.TAXONOMY_TYPE_ID_CATEGORY ]: currentCategory.id }\r\n            }\r\n            const baseItemPath = `${pageConfigure.page}/${pageConfigure.detailPage}`\r\n\r\n            fetchEntities(pageConfigure.mvcController, postParams, baseItemPath, (items, totalPages) => {\r\n                onDataFetch({ items, totalPages }, 0)\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { match, pageContent: { thumbnail, title }, categories, items, totalPages } = this.props\r\n        const currentCategory = getCurrentCategory(match, categories)\r\n        const currentPage = parseInt(match.params.page)\r\n\r\n        return (\r\n            <Row>\r\n                <Image className=\"h-100\" {...thumbnail} />\r\n                <div className=\"page-titles mt-4 mb-3\">\r\n                    <span className=\"page-title\">{ title }</span>\r\n                    <span>|</span>\r\n                    <span className=\"page-title\">{ currentCategory && currentCategory.title }</span>\r\n                </div>\r\n                {\r\n                    currentCategory && (\r\n                        <Pagination itemWrapperClassName=\"page-item\" className=\"w-100\"\r\n                            items={ items }\r\n                            totalPages={ totalPages }\r\n                            currentPage={ currentPage }\r\n                            getPageUrl={ (pageNumber) =>\r\n                                String(match.path).replace(':category', currentCategory.name).replace(':page', pageNumber)\r\n                            }\r\n\r\n                            renderItem={ renderItem }\r\n                            onPageChange={ this.onPageChange }\r\n                        />\r\n                    )\r\n                }\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const { totalPages, items, categories, pageContent } = state.connectedBasePage.pages[ pageConfigure.page ]\r\n    return {\r\n        totalPages,\r\n        items,\r\n        categories,\r\n        pageContent\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DefaultView)","module.exports = {\r\n    mvcController: '/post',\r\n    page: 'thu-vien',\r\n    detailPage: 'chi-tiet',\r\n    showBreadcrumbs: true,\r\n    ITEM_PER_PAGE: 5,\r\n    TAXONOMY_TYPE_ID_TAG: 40006,\r\n    TAXONOMY_TYPE_ID_CATEGORY: 40005,\r\n}","function getCurrentCategory(match, categories) {\r\n    const currentCategory = categories.filter((categoryItem) => {\r\n        return categoryItem.name === match.params.category\r\n    })[0]\r\n    return currentCategory\r\n}\r\n\r\nfunction getCategoryUrl(match, categoryName, page) {\r\n    return String(match.path).replace(':category', categoryName).replace(':page', 1)\r\n}\r\n\r\nmodule.exports = {\r\n    getCategoryUrl,\r\n    getCurrentCategory,\r\n}","//React/Redux\r\nimport React, { Component } from 'react'\r\nimport { Route, Switch } from 'react-router'\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\n\r\n//Actions\r\nimport { refreshRoutePath } from '../routes'\r\n\r\n//Components\r\nimport BasePage from '../shared/_layout/main/base-page'\r\n\r\nimport { Sidebar, SidebarMenu } from '../shared/components'\r\nimport { Container, Row, Col } from 'reactstrap'\r\n\r\n//Routes component\r\nimport { default as DefaultView } from './components/default-view'\r\n\r\n//Page configuration\r\nconst pageConfigure = require('./configuration.js')\r\nconst { getCategoryUrl, getCurrentCategory } = require('./helper/functions')\r\n\r\n\r\nclass ThuVien extends Component {\r\n    static defaultProps = {\r\n        categories: []\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.renderSidebar = this.renderSidebar.bind(this)\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { match, onError, onDataFetch, refreshRoutePath, categories, pageContent, items } = this.props\r\n\r\n        if (!pageContent)\r\n            $.get(`/page/getsingle?entityName=${pageConfigure.page}`, function (response) {\r\n                onDataFetch({ pageContent: response.details }, 50);\r\n            })\r\n\r\n        if (!categories.length)\r\n            $.get('/TaxonomyUI/GetTaxonomies', { taxonomyTypeId: pageConfigure.TAXONOMY_TYPE_ID_CATEGORY }, function (responseCategories) {\r\n                responseCategories.unshift({\r\n                    name: localizationString.getString('tat-ca'),\r\n                    path: getCategoryUrl(match, localizationString.getString('tat-ca'), 1),\r\n                    title: localizationString.getString(\"Tất cả\")\r\n                })\r\n                onDataFetch({ categories: responseCategories }, 50)\r\n            })\r\n\r\n        refreshRoutePath(pageConfigure.page)\r\n    }\r\n\r\n    renderSidebar() {\r\n        const { categories, match } = this.props;\r\n\r\n        const categoryMenuItems = categories.map(({ name, title }) => {\r\n            return { path: getCategoryUrl(match, name, 1), title }\r\n        })\r\n\r\n        return (\r\n            <Sidebar title={ localizationString.getString(\"Danh mục\") }>\r\n                <SidebarMenu noBorder title={ localizationString.getString('loại công trình') }\r\n                    items={ categoryMenuItems }\r\n                    currentUrl={ match.url }\r\n                />\r\n            </Sidebar>\r\n        )\r\n    }\r\n\r\n    renderRoutes() {\r\n        const { match, categories, onDataFetch } = this.props;\r\n\r\n        return (\r\n            <Switch>\r\n                <Route path={ match.path } render={ (route) => <DefaultView {...route} onDataFetch={ onDataFetch } /> } />\r\n            </Switch>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container id=\"thu-vien\">\r\n                <Row>\r\n                    <Col xl=\"12\" lg=\"4\" xl=\"3\">\r\n                        { this.renderSidebar() }\r\n                    </Col>\r\n                    <Col xl=\"12\" lg=\"8\" xl=\"9\">\r\n                        { this.renderRoutes() }\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    ...bindActionCreators({ refreshRoutePath }, dispatch),\r\n})\r\n\r\nconst ConnectedThuVien = connect(mapStateToProps, mapDispatchToProps)(ThuVien);\r\n\r\nmodule.exports = BasePage({ page: pageConfigure.page, showBreadcrumbs: pageConfigure.showBreadcrumbs })(ConnectedThuVien);","﻿\r\nconst $ = require('jquery');\r\nconst classNames = require('classnames');\r\n\r\nconst { Link } = require('react-router-dom');\r\nconst { Row, Col } = require('reactstrap');\r\nconst Title = require('../../shared/components/section-title');\r\n\r\nmodule.exports = class extends React.Component {  \r\n    render() {\r\n        return (\r\n            <section className={classNames('cong-trinh', this.props.className)}>\r\n                <Title>{localizationString.getString('Công trình')}</Title>\r\n                <Row className=\"mt-2\">\r\n                    <Col xs=\"12\" md={6} className=\"pr-1\">\r\n                        <Row className=\"mb-2\">\r\n                            <Col>\r\n                                <div data-aos=\"fade-left\">\r\n                                    <div className=\"link link-khach-san\">\r\n                                        <Link className=\"title\" to=\"/\" dangerouslySetInnerHTML={{ __html: localizationString.getString(\"Khách<br/>sạn\") }} />\r\n                                    </div>\r\n                                    <img className=\"w-100\" src=\"/img/khach-san-cover.jpg\" />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                <div data-aos=\"fade-left\">\r\n                                    <div className=\"link link-can-ho\">\r\n                                        <Link className=\"title\" to=\"/\" dangerouslySetInnerHTML={{ __html: localizationString.getString(\"Căn<br/>hộ\") }} />\r\n                                    </div>\r\n                                    <img className=\"w-100\" src=\"/img/can-ho-cover.jpg\" />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col xs=\"12\" md={6} className=\"pl-1\">\r\n                        <div className=\"h-100\" data-aos=\"flip-left\" data-aos-delay=\"300\">\r\n                            <div className=\"link link-nha-o\">\r\n                                <Link className=\"title\" to=\"/\" dangerouslySetInnerHTML={{ __html: localizationString.getString(\"Nhà ở\") }} />\r\n                            </div>\r\n                            <img className=\"h-100 w-100\" src=\"/img/nha-o-cover.jpg\" />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </section>\r\n        );\r\n    }\r\n}","const { Row, Col } = require('reactstrap');\r\nconst { Link } = require('react-router-dom');\r\n\r\nconst SectionTitle = require('../../shared/components/section-title');\r\n\r\nconst DuAnItem = require('../../shared/components/du-an/du-an');\r\n\r\nconst { dataRequest } = require('../../shared/ultilities');\r\n\r\nclass DuAn extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            projects: []\r\n        }\r\n\r\n        dataRequest(\"/project/GetTableData\", 7, 1, null, null, null, null, (response) => {\r\n            this.setState({ projects: response });\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <section className={ this.props.className }>\r\n                <SectionTitle>{ localizationString.getString('Dự án') }</SectionTitle>\r\n                <Row className=\"pt-3\">\r\n                    {\r\n                        this.state.projects.length &&\r\n                        this.state.projects.map((project, index) => {\r\n                            return (\r\n                                <Col key={ project.id } xs=\"6\" md=\"4\" lg=\"3\" className=\"page-item\">\r\n                                    <DuAnItem data={ project } />\r\n                                </Col>\r\n                            );\r\n                        })\r\n                    }\r\n                    <Col xs=\"6\" md=\"4\" lg=\"3\" className=\"page-item\">\r\n                        <div className=\"h-100\" data-aos=\"zoom-in-up\">\r\n                            <div className=\"project-load-more\">\r\n                                <div className=\"overlay\" />\r\n                                <div className=\"content mr-3 mr-lg-5\">\r\n                                    <h5 className=\"cant-find\"> can’t find<br /> your project</h5>\r\n                                    <div className=\"dots clearfix\">\r\n                                        <div className=\"dot\" />\r\n                                        <div className=\"dot\" />\r\n                                        <div className=\"dot\" />\r\n                                        <div className=\"dot\" />\r\n                                    </div>\r\n                                    <div className=\"mt-4\">\r\n                                        <Link to=\"/du-an\" className=\"btn-white mt-4\">Load more</Link>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nmodule.exports = DuAn;","﻿\r\nconst $ = require('jquery');\r\nconst OwlCarousel = require('react-owl-carousel2');\r\n\r\nclass Slider extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            slides: []\r\n            /* Chú ý: slides không phải là một array của hình ảnh.\r\n            Ví dụ cho 'slides'\r\n                slides: [\r\n                    {\r\n                        \"image\": {\r\n                            \"urlThumb\": \"uploads/2/2017/6/slider-2-2017-6-9-310_thumb.jpg\",\r\n                            \"dimension\": \"Size [ Width=1058, Height=463 ]\",\r\n                            \"title\": \"slider-2\",\r\n                            \"description\": null,\r\n                            \"fileName\": null,\r\n                            \"url\": \"uploads/2/2017/6/slider-2-2017-6-9-310.jpg\",\r\n                            \"type\": \"Image\",\r\n                            \"extension\": \".jpg\",\r\n                            \"size\": \"194 KB\",\r\n                            \"taxonomyTypes\": null\r\n                        }\r\n                    },...\r\n                ]\r\n            Hình ảnh('image') chỉ là một prop của 'slide', và còn một số prop khác như caption, etc... sẽ được thêm vào sau này nếu cần thiết.\r\n            */,\r\n            options: {\r\n                items: 1,\r\n                nav: false,\r\n                rewind: false,\r\n                autoplay: true\r\n            }\r\n        };\r\n        $.get(\r\n            \"/album/getsingle?entityName=home-slider\",\r\n            (response) => {\r\n                this.setState({slides: response.details.images})\r\n            }\r\n        );\r\n    }\r\n\r\n    componentWillUpdate(){\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className={this.props.className}>\r\n                { this.state.slides.length && \r\n                    <OwlCarousel ref={owl => {this.owl = owl;}} options={this.state.options}>\r\n                    {\r\n                        this.state.slides.map((slide, index) => {\r\n                            return(\r\n                                <div key={index} id={`slide${index}`}>\r\n                                    <img src={slide.image.url} alt={slide.image.description} title={slide.image.title}/>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                    </OwlCarousel>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nmodule.exports = Slider;","﻿\r\nconst { Container } = require('reactstrap');\r\nconst Slider = require('./components/slider');\r\nconst ConTrinh = require('./components/cong-trinh');\r\nconst DuAn = require('./components/du-an');\r\n\r\nconst BasePage = require('../shared/_layout/main/base-page');\r\n\r\nclass PageComponent extends React.Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { onError, onDataFetch, dataFetchProgress } = this.props;\r\n\r\n        if(dataFetchProgress != 100)\r\n            $.get('/', function (response) {\r\n                if (!response)\r\n                    onError('Error');\r\n                else\r\n                    onDataFetch({ temp: response }, 100);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const { dataFetchProgress } = this.props;\r\n\r\n        if (dataFetchProgress != 100)\r\n            return null;\r\n\r\n        return (\r\n            <div id=\"gioi-thieu\">\r\n                <Slider className=\"mb-lg-5\" />\r\n                <Container className=\"pt-5\">\r\n                    <ConTrinh className=\"mb-3 mb-md-5\" />\r\n                    <DuAn className=\"pt-5\" />\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nmodule.exports = BasePage({ page: 'trang-chu' })(PageComponent);","/*!\n  Copyright (c) 2016 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tclasses.push(classNames.apply(null, arg));\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","'use strict';\n\nexports.__esModule = true;\nexports['default'] = shouldPureComponentUpdate;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _shallowEqual = require('./shallowEqual');\n\nvar _shallowEqual2 = _interopRequireDefault(_shallowEqual);\n\nfunction shouldPureComponentUpdate(nextProps, nextState) {\n  return !(0, _shallowEqual2['default'])(this.props, nextProps) || !(0, _shallowEqual2['default'])(this.state, nextState);\n}\n\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\nexports['default'] = shallowEqual;\n\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);\n  for (var i = 0; i < keysA.length; i++) {\n    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = exports['default'];","//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind,\n    nativeCreate       = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.8.3';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n  };\n  _.iteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, undefinedOnly) {\n    return function(obj) {\n      var length = arguments.length;\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var property = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = property('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function(obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    if (isArrayLike(obj)) {\n      key = _.findIndex(obj, predicate, context);\n    } else {\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      var func = isFunc ? method : value[method];\n      return func == null ? func : func.apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var set = isArrayLike(obj) ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iteratee, context) {\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var pass = [], fail = [];\n    _.each(obj, function(value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0;\n    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    return _.unzip(arguments);\n  };\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions\n  function createPredicateIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a predicate test\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n            i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  }\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var args = slice.call(arguments, 2);\n    var bound = function() {\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var i, length = arguments.length, key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  function collectNonEnumProps(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object\n  // In contrast to _.map it returns an object\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys =  _.keys(obj),\n          length = keys.length,\n          results = {},\n          currentKey;\n      for (var index = 0; index < length; index++) {\n        currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s)\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(object, oiteratee, context) {\n    var result = {}, obj = object, iteratee, keys;\n    if (obj == null) return result;\n    if (_.isFunction(oiteratee)) {\n      keys = _.allKeys(obj);\n      iteratee = optimizeCb(oiteratee, context);\n    } else {\n      keys = flatten(arguments, false, false, 1);\n      iteratee = function(value, key, obj) { return key in obj; };\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(flatten(arguments, false, false, 1), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), and in Safari 8 (#1929).\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  _.property = property;\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    return obj == null ? function(){} : function(key) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n   // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return '' + this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define === 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}.call(this));\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}