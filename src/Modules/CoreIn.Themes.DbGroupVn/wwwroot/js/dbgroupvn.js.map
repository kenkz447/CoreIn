{"version":3,"sources":["node_modules/browser-pack/_prelude.js","develop/scripts/develop/scripts/dbgroupvn.jsx","develop/scripts/dbgroupvn/bo-suu-tap/configuration.js","develop/scripts/dbgroupvn/bo-suu-tap/helper/render-items.jsx","develop/scripts/dbgroupvn/bo-suu-tap/index.jsx","develop/scripts/dbgroupvn/bo-suu-tap/views/default-view.jsx","develop/scripts/dbgroupvn/cong-trinh/configuration.js","develop/scripts/dbgroupvn/cong-trinh/index.jsx","develop/scripts/dbgroupvn/cong-trinh/views/default-view.jsx","develop/scripts/dbgroupvn/du-an/components/search-area.jsx","develop/scripts/dbgroupvn/du-an/components/small-map.jsx","develop/scripts/dbgroupvn/du-an/components/sreach-city.jsx","develop/scripts/dbgroupvn/du-an/configuration.js","develop/scripts/dbgroupvn/du-an/helper/get-current-category.js","develop/scripts/dbgroupvn/du-an/helper/render-items.jsx","develop/scripts/dbgroupvn/du-an/index.jsx","develop/scripts/dbgroupvn/du-an/views/big-map.jsx","develop/scripts/dbgroupvn/du-an/views/default-view.jsx","develop/scripts/dbgroupvn/gioi-thieu/components/quy-trinh.jsx","develop/scripts/dbgroupvn/gioi-thieu/index.jsx","develop/scripts/dbgroupvn/hoi-dap/configuration.js","develop/scripts/dbgroupvn/hoi-dap/helpers/render-items.jsx","develop/scripts/dbgroupvn/hoi-dap/index.jsx","develop/scripts/dbgroupvn/hoi-dap/views/default.jsx","develop/scripts/dbgroupvn/lien-he/configuration.js","develop/scripts/dbgroupvn/lien-he/index.jsx","develop/scripts/dbgroupvn/root.jsx","develop/scripts/dbgroupvn/routes.jsx","develop/scripts/dbgroupvn/shared/_layout.jsx","develop/scripts/dbgroupvn/shared/_layout/actions.jsx","develop/scripts/dbgroupvn/shared/_layout/footer.jsx","develop/scripts/dbgroupvn/shared/_layout/footer/copy-right.jsx","develop/scripts/dbgroupvn/shared/_layout/footer/menu.jsx","develop/scripts/dbgroupvn/shared/_layout/footer/socials.jsx","develop/scripts/dbgroupvn/shared/_layout/header.jsx","develop/scripts/dbgroupvn/shared/_layout/header/develop/scripts/dbgroupvn/shared/_layout/header/header-mobile.jsx","develop/scripts/dbgroupvn/shared/_layout/header/language-select.jsx","develop/scripts/dbgroupvn/shared/_layout/header/logo.jsx","develop/scripts/dbgroupvn/shared/_layout/header/menu.jsx","develop/scripts/dbgroupvn/shared/_layout/header/search.jsx","develop/scripts/dbgroupvn/shared/_layout/main/base-page.jsx","develop/scripts/dbgroupvn/shared/_layout/main/develop/scripts/dbgroupvn/shared/_layout/main/connected-base-page.jsx","develop/scripts/dbgroupvn/shared/_layout/main/page-loading.jsx","develop/scripts/dbgroupvn/shared/_layout/mobile/menu.jsx","develop/scripts/dbgroupvn/shared/_localization.jsx","develop/scripts/dbgroupvn/shared/_localization/en-us.jsx","develop/scripts/dbgroupvn/shared/components.jsx","develop/scripts/dbgroupvn/shared/components/_commons/delay-render.jsx","develop/scripts/dbgroupvn/shared/components/_commons/extended-ConnectedRouter.jsx","develop/scripts/dbgroupvn/shared/components/category-menu.jsx","develop/scripts/dbgroupvn/shared/components/connected-breacrumbs.jsx","develop/scripts/dbgroupvn/shared/components/du-an/du-an.jsx","develop/scripts/dbgroupvn/shared/components/gmap/constants/marker-descriptions.js","develop/scripts/dbgroupvn/shared/components/gmap/google-map.jsx","develop/scripts/dbgroupvn/shared/components/gmap/helpers/balloon-pos.js","develop/scripts/dbgroupvn/shared/components/gmap/helpers/calc-markers-visibility.js","develop/scripts/dbgroupvn/shared/components/gmap/helpers/custom-distance.js","develop/scripts/dbgroupvn/shared/components/gmap/helpers/marker-styles.js","develop/scripts/dbgroupvn/shared/components/gmap/marker.jsx","develop/scripts/dbgroupvn/shared/components/image.jsx","develop/scripts/dbgroupvn/shared/components/page-article.jsx","develop/scripts/dbgroupvn/shared/components/page-item.jsx","develop/scripts/dbgroupvn/shared/components/pagination.jsx","develop/scripts/dbgroupvn/shared/components/pagination/item-container.jsx","develop/scripts/dbgroupvn/shared/components/pagination/item-wrapper.jsx","develop/scripts/dbgroupvn/shared/components/pagination/pager-ajax.jsx","develop/scripts/dbgroupvn/shared/components/pagination/pager.jsx","develop/scripts/dbgroupvn/shared/components/section-title.jsx","develop/scripts/dbgroupvn/shared/components/sidebar-menu.jsx","develop/scripts/dbgroupvn/shared/components/sidebar-toggle-start.jsx","develop/scripts/dbgroupvn/shared/components/sidebar-widget.jsx","develop/scripts/dbgroupvn/shared/components/sidebar.jsx","develop/scripts/dbgroupvn/shared/reducer.jsx","develop/scripts/dbgroupvn/shared/reducers/app-routes.jsx","develop/scripts/dbgroupvn/shared/reducers/google-map.jsx","develop/scripts/dbgroupvn/shared/reducers/localization.jsx","develop/scripts/dbgroupvn/shared/utilities.jsx","develop/scripts/dbgroupvn/shared/utilities/createCategoryUrl.jsx","develop/scripts/dbgroupvn/shared/utilities/develop/scripts/dbgroupvn/shared/utilities/fetchEntities.jsx","develop/scripts/dbgroupvn/shared/utilities/fetchSingleEntity.jsx","develop/scripts/dbgroupvn/shared/utilities/fetchTaxonomies.jsx","develop/scripts/dbgroupvn/shared/utilities/generateEntityDetailUrl.jsx","develop/scripts/dbgroupvn/shared/utilities/getCurrentCategory.jsx","develop/scripts/dbgroupvn/shared/utilities/develop/scripts/dbgroupvn/shared/utilities/getOptions.jsx","develop/scripts/dbgroupvn/shared/utilities/requestData.jsx","develop/scripts/dbgroupvn/shared/utilities/sheets.jsx","develop/scripts/dbgroupvn/shared/utilities/treeToList.jsx","develop/scripts/dbgroupvn/thu-vien/configuration.js","develop/scripts/dbgroupvn/thu-vien/helper/render-items.jsx","develop/scripts/dbgroupvn/thu-vien/index.jsx","develop/scripts/dbgroupvn/thu-vien/views/default-view.jsx","develop/scripts/dbgroupvn/trang-chu/components/cong-trinh.jsx","develop/scripts/dbgroupvn/trang-chu/components/du-an.jsx","develop/scripts/dbgroupvn/trang-chu/components/slider.jsx","develop/scripts/dbgroupvn/trang-chu/index.jsx","node_modules/classNames/index.js","node_modules/react-pure-render/function.js","node_modules/react-pure-render/shallowEqual.js","node_modules/underscore/underscore.js"],"names":[],"mappings":"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GAAiB,MAAjB;;;;;;;ACnEA;;;;;;;;;;;;eAEsB,QAAQ,YAAR,C;IAAd,S,YAAA,S;;AACR,IAAM,SAAS,QAAQ,qBAAR,CAAf;AACA,IAAM,WAAW,QAAQ,yBAAR,CAAjB;AACA,IAAM,OAAO,QAAQ,oBAAR,CAAb;;IAGM,a;;;AACF,6BAAc;AAAA;;AAAA;AAEb;;;;6CAEoB;AAAA,yBACiD,KAAK,KADtD;AAAA,gBACT,OADS,UACT,OADS;AAAA,gBACA,WADA,UACA,WADA;AAAA,gBACa,iBADb,UACa,iBADb;AAAA,gBACgC,YADhC,UACgC,YADhC;AAGpB;;;iCAEQ;AAAA,0BACsC,KAAK,KAD3C;AAAA,gBACG,iBADH,WACG,iBADH;AAAA,gBACsB,WADtB,WACsB,WADtB;;;AAGL,mBACI;AAAA;AAAA,kBAAK,IAAG,YAAR;AACI,oCAAC,MAAD,IAAQ,WAAU,SAAlB,GADJ;AAEI;AAAC,6BAAD;AAAA,sBAAW,WAAU,MAArB;AACI,wCAAC,QAAD,IAAU,WAAU,cAApB,GADJ;AAEI,wCAAC,IAAD,IAAM,WAAU,MAAhB,EAAuB,aAAc,WAArC;AAFJ;AAFJ,aADJ;AASH;;;;EAtBuB,MAAM,S;;AAyBlC,OAAO,OAAP,GAAiB,wBAAS,EAAE,MAAM,WAAR,EAAT,EAAgC,aAAhC,CAAjB;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfile":"dbgroupvn.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","﻿\r\nimport { render } from 'react-dom'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { routerMiddleware, push } from 'react-router-redux'\r\n\r\nimport { default as LocalizationString } from './dbgroupvn/shared/_localization'\r\nglobal.localizationString = new LocalizationString()\r\n\r\n//Keys and action\r\nimport { actions as localizationAction } from './dbgroupvn/shared/reducers/localization'\r\n\r\n//Components and middleware\r\nimport { history, Root } from './dbgroupvn/root'\r\nimport { updateLayoutMiddleware } from './dbgroupvn/shared/_layout'\r\n\r\nimport reducer from './dbgroupvn/shared/reducer'\r\n\r\n$(document).ready(function () {\r\n\r\n\r\n    const historyMiddleware = routerMiddleware(history)\r\n    const store = createStore(reducer, applyMiddleware(historyMiddleware, updateLayoutMiddleware));\r\n\r\n    $.ajax({\r\n        url: \"/DbGroupVn/GetSiteInitData\",\r\n        success: (response) => {\r\n\r\n            global.localizationString.setLanguage(response.localization.currentLanguage)\r\n            store.dispatch(localizationAction.init(response.localization))\r\n\r\n            const { INIT_ROUTES } = require('./dbgroupvn/shared/reducers/app-routes')\r\n            const routes = require('./dbgroupvn/routes').default\r\n            \r\n            //Routes\r\n            store.dispatch({ type: INIT_ROUTES, routes })\r\n\r\n            render(\r\n                <Root store={ store } />,\r\n                document.getElementById('root')\r\n            );\r\n        }\r\n    });\r\n});","module.exports = {\r\n    mvcController: '/collection',\r\n    page: 'bo-suu-tap',\r\n    detailPage: 'chi-tiet',\r\n    showBreadcrumbs: true,\r\n    ITEM_PER_PAGE: 9,\r\n    ENTITY_TYPE_ID: 30006,\r\n    TAXONOMY_TYPE_ID_CATEGORY: 30003,\r\n}","import { PageItem } from '../../shared/components'\r\n\r\nfunction renderItem(item) {\r\n    return <PageItem data={ item } extraText={ item.area } path={ item.path } />\r\n}\r\n\r\nexport { renderItem }","//React/Redux\r\nimport React, { Component } from 'react'\r\nimport { Route, Switch } from 'react-router'\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\n\r\n//Convert flat category array to category trees\r\nimport listToTree from 'list-to-tree'\r\n\r\n//Actions\r\n//...\r\n\r\n//Components\r\nimport { default as BasePage } from '../shared/_layout/main/base-page'\r\n\r\nimport { Sidebar, SidebarMenu } from '../shared/components'\r\nimport { Container, Row, Col } from 'reactstrap'\r\n\r\n//Routes component\r\nimport { default as DefaultView } from './views/default-view'\r\n\r\n//Page configuration\r\nconst pageConfigure = require('./configuration.js')\r\n\r\nimport {\r\n    createCategoryUrlFromRoutePathAndCategoryName,\r\n    fetchSingleEntity, fetchPage,\r\n    fetchTaxonomiesByTaxonomyTypeId\r\n} from '../shared/utilities'\r\n\r\nclass PageComponent extends Component {\r\n    static defaultProps = {\r\n        categories: []\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.renderSidebar = this.renderSidebar.bind(this)\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { match, onDataFetch, refreshRoutePath, categories, pageContent, items } = this.props\r\n\r\n        if (!pageContent)\r\n            fetchPage(pageConfigure.page).then(function (response) {\r\n                onDataFetch({ pageContent: response.details }, 50);\r\n            })\r\n\r\n        if (!categories.length)\r\n            fetchTaxonomiesByTaxonomyTypeId(pageConfigure.TAXONOMY_TYPE_ID_CATEGORY).then(function (categories) {\r\n                onDataFetch({ categories }, 50)\r\n            })\r\n    }\r\n\r\n    renderSidebar() {\r\n        const { categories, match: { path, url } } = this.props;\r\n\r\n        return (\r\n            <Sidebar>\r\n                {\r\n                    categories && categories.map((categoryTree) => {\r\n\r\n                        const categoryMenuItems = categoryTree.children && categoryTree.children.map(({ name, title }) => {\r\n                            return { path: createCategoryUrlFromRoutePathAndCategoryName(path, name), title }\r\n                        })\r\n\r\n                        return (\r\n                            <SidebarMenu key={ categoryTree.name } title={ categoryTree.title }\r\n                                titleLink={ createCategoryUrlFromRoutePathAndCategoryName(path, categoryTree.name) }\r\n                                items={ categoryMenuItems }\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </Sidebar>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        $(\"#sidebar-toggle-btn\").stick_in_parent();\r\n\r\n    }\r\n    \r\n    renderRoutes() {\r\n        const { match: { path }, onDataFetch } = this.props;\r\n\r\n        return (\r\n            <Switch>\r\n                <Route exact={ true } path={ path } render={ (route) => <DefaultView {...route} onDataFetch={ onDataFetch } /> } />\r\n                <Route path={ path + '/:page' } render={ (route) => <DefaultView {...route} onDataFetch={ onDataFetch } /> } />\r\n            </Switch>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { dataFetchProgress, match } = this.props\r\n\r\n        if (dataFetchProgress != 100)\r\n            return null\r\n\r\n        if (__DEV__) {\r\n            console.log(pageConfigure.page + ' props: ')\r\n            console.log(this.props)\r\n        }\r\n\r\n        return (\r\n            <Container id=\"thu-vien\">\r\n                <Row>\r\n                    <Col xs=\"12\" lg=\"4\" xl=\"3\">\r\n                        { this.renderSidebar() }\r\n                    </Col>\r\n                    <Col xs=\"12\" lg=\"8\" xl=\"9\">\r\n                        { this.renderRoutes() }\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    ...bindActionCreators({ }, dispatch),\r\n})\r\n\r\nconst ConnectedPageComponent = connect(mapStateToProps, mapDispatchToProps)(PageComponent);\r\n\r\nmodule.exports = BasePage({ page: pageConfigure.page, showBreadcrumbs: pageConfigure.showBreadcrumbs })(ConnectedPageComponent);","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n//Components\r\nimport { Container, Row, Col } from 'reactstrap'\r\nimport { Image, Pagination, SideBarToggleStart } from '../../shared/components'\r\n\r\n//Helper functions\r\nimport { renderItem } from '../helper/render-items'\r\nconst { fetchEntities, getCategoryByNameFromCatogires } = require('../../shared/utilities')\r\n\r\nconst pageConfigure = require('../configuration.js')\r\n\r\nclass DefaultView extends Component {\r\n    static defaultProps = {\r\n        defaultPage: 1,\r\n        categories: [],\r\n        pageContent: {\r\n            thumbnail: {}\r\n        }\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateViewProps = this.updateViewProps.bind(this)\r\n    }\r\n\r\n    updateViewProps(props) {\r\n        const { categories, match: { params: { category, page } }, onDataFetch } = props\r\n        const currentCategory = getCategoryByNameFromCatogires(category, categories)\r\n        const currentPage = page || props.defaultPage\r\n\r\n        const postParams = {\r\n            page: currentPage,\r\n            pageSize: pageConfigure.ITEM_PER_PAGE,\r\n            categories: currentCategory.id && { [ pageConfigure.TAXONOMY_TYPE_ID_CATEGORY ]: currentCategory.id },\r\n            entityTypeId: pageConfigure.ENTITY_TYPE_ID,\r\n            additionalFields: [ 'excerpt' ]\r\n        }\r\n        const baseItemPath = `/${pageConfigure.page}/${pageConfigure.detailPage}`\r\n\r\n        fetchEntities(pageConfigure.mvcController, postParams, baseItemPath, (items, totalPages) => {\r\n            onDataFetch({ items, totalPages }, 0)\r\n        })\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.updateViewProps(this.props)\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (JSON.stringify(nextProps.match) != JSON.stringify(this.props.match) ||\r\n            JSON.stringify(nextProps.categories) != JSON.stringify(this.props.categories)) {\r\n            this.updateViewProps(nextProps)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { match, pageContent: { thumbnail, title }, categories, items, totalPages, defaultPage } = this.props\r\n\r\n        const currentCategory = getCategoryByNameFromCatogires(match.params.category, categories)\r\n        const currentPage = match.params.page ? parseInt(match.params.page) : defaultPage\r\n\r\n        return (\r\n            <Row>\r\n                <Image className=\"h-100\" {...thumbnail} />\r\n                <SideBarToggleStart className=\"mt-4 mb-3\">\r\n                    <h1 className=\"page-titles font-weight-normal\">\r\n                        <span className=\"page-title\">{ title }</span>\r\n                        <span>|</span>\r\n                        <span className=\"page-title\">{ currentCategory && currentCategory.title }</span>\r\n                    </h1>\r\n                </SideBarToggleStart>\r\n                {\r\n                    currentCategory && (\r\n                        <Pagination itemWrapperClassName=\"page-item\" className=\"w-100 pl-2 pl-lg-0 pr-2 pr-lg-0\"\r\n                            layout={ { xs: 6, sm: 6, md: 4, lg: 4, xl: 4 } }\r\n                            items={ items }\r\n                            totalPages={ totalPages }\r\n                            currentPage={ currentPage }\r\n                            templatePath={ String(match.path).replace(':category', currentCategory.name) }\r\n                            renderItem={ renderItem }\r\n                        />\r\n                    )\r\n                }\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const { totalPages, items, categories, pageContent } = state.connectedBasePage.pages[ pageConfigure.page ]\r\n    return {\r\n        totalPages,\r\n        items,\r\n        categories,\r\n        pageContent\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DefaultView)","module.exports = {\r\n    mvcController: '/construction',\r\n    page: 'cong-trinh',\r\n    detailPage: 'chi-tiet',\r\n    showBreadcrumbs: true,\r\n    ITEM_PER_PAGE: 9,\r\n    ENTITY_TYPE_ID: 20006,\r\n    TAXONOMY_TYPE_ID_CATEGORY: 10003,\r\n}","//React/Redux\r\nimport React, { Component } from 'react'\r\nimport { Route, Switch } from 'react-router'\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\n\r\n//Convert flat category array to category trees\r\nimport listToTree from 'list-to-tree'\r\n\r\n//Actions\r\n\r\n//Components\r\nimport { default as BasePage } from '../shared/_layout/main/base-page'\r\n\r\nimport { Sidebar, SidebarMenu } from '../shared/components'\r\nimport { Container, Row, Col } from 'reactstrap'\r\n\r\n//Routes component\r\nimport { default as DefaultView } from './views/default-view'\r\n\r\n//Page configuration\r\nconst pageConfigure = require('./configuration.js')\r\n\r\nimport { createCategoryUrlFromRoutePathAndCategoryName } from '../shared/utilities'\r\n\r\nclass PageComponent extends Component {\r\n    static defaultProps = {\r\n        categories: []\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.renderSidebar = this.renderSidebar.bind(this)\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { match, onError, onDataFetch, refreshRoutePath, categories, pageContent, items } = this.props\r\n\r\n        if (!pageContent)\r\n            $.get(`/page/getsingle?entityName=${pageConfigure.page}`, function (response) {\r\n                onDataFetch({ pageContent: response.details }, 50);\r\n            })\r\n\r\n        if (!categories.length)\r\n            $.get('/TaxonomyUI/GetTaxonomies', { taxonomyTypeId: pageConfigure.TAXONOMY_TYPE_ID_CATEGORY }, function (responseCategories) {\r\n\r\n                const ltt = new listToTree(responseCategories, { key_parent: 'parentId', key_child: 'children' })\r\n                const categories = ltt.GetTree()\r\n\r\n                categories.unshift({\r\n                    name: localizationString.getString('tat-ca'),\r\n                    title: localizationString.getString(\"Tất cả\")\r\n                })\r\n\r\n                onDataFetch({ categories }, 50)\r\n            })\r\n    }\r\n\r\n    renderSidebar() {\r\n        const { categories, match: { path, url } } = this.props;\r\n\r\n        return (\r\n            <Sidebar>\r\n                {\r\n                    categories && categories.map((categoryTree) => {\r\n\r\n                        const categoryMenuItems = categoryTree.children && categoryTree.children.map(({ name, title }) => {\r\n                            return { path: createCategoryUrlFromRoutePathAndCategoryName(path, name), title }\r\n                        })\r\n\r\n                        return (\r\n                            <SidebarMenu key={categoryTree.name} title={ categoryTree.title }\r\n                                titleLink={ createCategoryUrlFromRoutePathAndCategoryName(path, categoryTree.name)}\r\n                                items={ categoryMenuItems }\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n            </Sidebar>\r\n        )\r\n    }\r\n\r\n    renderRoutes() {\r\n        const { match: { path }, onDataFetch } = this.props;\r\n\r\n        return (\r\n            <Switch>\r\n                <Route exact={ true } path={ path } render={ (route) => <DefaultView {...route} onDataFetch={ onDataFetch } /> } />\r\n                <Route path={ path + '/:page' } render={ (route) => <DefaultView {...route} onDataFetch={ onDataFetch } /> } />\r\n            </Switch>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { dataFetchProgress, match } = this.props\r\n\r\n        if(dataFetchProgress != 100)\r\n            return null\r\n\r\n        if (__DEV__) {\r\n            console.log(pageConfigure.page + ' props: ')\r\n            console.log(this.props)\r\n        }\r\n\r\n        return (\r\n            <Container id=\"thu-vien\">\r\n                <Row>\r\n                    <Col xs=\"12\" lg=\"4\" xl=\"3\">\r\n                        { this.renderSidebar() }\r\n                    </Col>\r\n                    <Col xs=\"12\" lg=\"8\" xl=\"9\">\r\n                        { this.renderRoutes() }\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    ...bindActionCreators({  }, dispatch),\r\n})\r\n\r\nconst ConnectedPageComponent = connect(mapStateToProps, mapDispatchToProps)(PageComponent);\r\n\r\nmodule.exports = BasePage({ page: pageConfigure.page, showBreadcrumbs: pageConfigure.showBreadcrumbs })(ConnectedPageComponent);","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n//Components\r\nimport { Container, Row, Col } from 'reactstrap'\r\nimport { Image, Pagination, SideBarToggleStart } from '../../shared/components'\r\n\r\n//Helper functions\r\nimport { renderItem } from '../helper/render-items'\r\nconst { fetchEntities, getCategoryByNameFromCatogires } = require('../../shared/utilities')\r\n\r\nconst pageConfigure = require('../configuration.js')\r\n\r\nclass DefaultView extends Component {\r\n    static defaultProps = {\r\n        defaultPage: 1,\r\n        categories: [],\r\n        pageContent: {\r\n            thumbnail: {}\r\n        }\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateViewProps = this.updateViewProps.bind(this)\r\n    }\r\n\r\n    updateViewProps(props) {\r\n        const { categories, match: { params: { category, page } }, onDataFetch } = props\r\n        const currentCategory = getCategoryByNameFromCatogires(category, categories)\r\n        const currentPage = page || props.defaultPage\r\n\r\n        const postParams = {\r\n            page: currentPage,\r\n            pageSize: pageConfigure.ITEM_PER_PAGE,\r\n            categories: currentCategory.id && { [ pageConfigure.TAXONOMY_TYPE_ID_CATEGORY ]: currentCategory.id },\r\n            entityTypeId: pageConfigure.ENTITY_TYPE_ID,\r\n            additionalFields: [ 'excerpt' ]\r\n        }\r\n        const baseItemPath = `/${pageConfigure.page}/${pageConfigure.detailPage}`\r\n\r\n        fetchEntities(pageConfigure.mvcController, postParams, baseItemPath, (items, totalPages) => {\r\n            onDataFetch({ items, totalPages }, 0)\r\n        })\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.updateViewProps(this.props)\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (JSON.stringify(nextProps.match) != JSON.stringify(this.props.match) ||\r\n            JSON.stringify(nextProps.categories) != JSON.stringify(this.props.categories)) {\r\n            this.updateViewProps(nextProps)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { match, pageContent: { thumbnail, title }, categories, items, totalPages, defaultPage } = this.props\r\n\r\n        const currentCategory = getCategoryByNameFromCatogires(match.params.category, categories)\r\n        const currentPage = match.params.page ? parseInt(match.params.page) : defaultPage\r\n\r\n        return (\r\n            <Row>\r\n                <Image className=\"h-100\" {...thumbnail} />\r\n                <SideBarToggleStart className=\"mt-4 mb-3\">\r\n                    <h1 className=\"page-titles\">\r\n                        <span className=\"page-title\">{ title }</span>\r\n                        <span>|</span>\r\n                        <span className=\"page-title\">{ currentCategory && currentCategory.title }</span>\r\n                    </h1>\r\n                </SideBarToggleStart>\r\n                {\r\n                    currentCategory && (\r\n                        <Pagination itemWrapperClassName=\"page-item\" className=\"w-100 pl-2 pl-lg-0 pr-2 pr-lg-0\"\r\n                            layout={ [\r\n                                { xs: 6, sm: 6, md: 4, lg: 4, xl: 4 },\r\n                                { at:3, xs: 12, sm: 12, md: 12, lg: 4, xl: 4 },\r\n                                ]}\r\n                            items={ items }\r\n                            totalPages={ totalPages }\r\n                            currentPage={ currentPage }\r\n                            templatePath={ String(match.path).replace(':category', currentCategory.name) }\r\n                            renderItem={ renderItem }\r\n                        />\r\n                    )\r\n                }\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const { totalPages, items, categories, pageContent } = state.connectedBasePage.pages[ pageConfigure.page ]\r\n    return {\r\n        totalPages,\r\n        items,\r\n        categories,\r\n        pageContent\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DefaultView)","import React, { Component } from 'react'\r\nimport { Input, Label } from 'reactstrap'\r\nimport { SidebarWidget } from '../../shared/components'\r\n\r\nclass AreaSearch extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.ranges = [\r\n            { form: 1, to: 3 },\r\n            { form: 4, to: 6 },\r\n            { form: 7, to: 9 }\r\n        ]\r\n    }\r\n\r\n    render() {\r\n        const { onSearch } = this.props\r\n        return (\r\n            <SidebarWidget className=\"custom-controls-stacked\" title={ localizationString.getString(\"Diện tích\") }>\r\n                <label className=\"custom-control custom-radio\">\r\n                    <input id=\"radioStacked1\" name=\"radio-stacked\" type=\"radio\" className=\"custom-control-input\" onChange={ () => {\r\n                        onSearch(-1, -1)\r\n                    } } />\r\n                    <span className=\"custom-control-indicator\"></span>\r\n                    <span className=\"custom-control-description\">\r\n                        { `${localizationString.getString('Mọi diện tích')}` }\r\n                    </span>\r\n                </label>\r\n                {\r\n                    this.ranges.map(({ form, to }, index) => (\r\n                        <label key={ index } className=\"custom-control custom-radio\">\r\n                            <input id=\"radioStacked1\" name=\"radio-stacked\" type=\"radio\" className=\"custom-control-input\" data-from={ form } data-to={ to } onChange={ () => {\r\n                                onSearch(form, to)\r\n                            } } />\r\n                            <span className=\"custom-control-indicator\"></span>\r\n                            <span className=\"custom-control-description\">\r\n                                { `${localizationString.getString('từ')} ${form} ${localizationString.getString('đến')} ${to}` }\r\n                            </span>\r\n                        </label>\r\n                    ))\r\n                }\r\n            </SidebarWidget>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AreaSearch;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { Input } from 'reactstrap'\r\nimport { SidebarWidget, GoogleMap } from '../../shared/components'\r\n\r\nimport { default as classNames } from 'classnames'\r\nconst pageConfigures = require('../configuration.js')\r\n\r\nclass SmallMap extends Component {\r\n    renderMarkerContent(marker) {\r\n        return (\r\n            <div className=\"marker-info\">\r\n                <label className=\"label\">\r\n                    { marker.title || `Missing Title` }\r\n                </label>\r\n                <br />\r\n                <a className={ classNames('map-marker-hint__ap-link') }>\r\n                    { localizationString.getString(\"Click to view more info\") }\r\n                </a>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    render() {\r\n        \r\n        return (\r\n            <SidebarWidget noBorder noCollapse title={ localizationString.getString('Bản đồ') }>\r\n                <div className=\"no-left-space\">\r\n                    <div className=\"g-map\">\r\n                        <GoogleMap {...this.props.map} renderMarkerContent={ this.renderMarkerContent } />\r\n                    </div>\r\n                    <div className={classNames('mt-3', {'d-none': this.props.hiddenBigMapLink})}>\r\n                        <Link className=\"btn btn-secondary\" to={ this.props.linkToBigMap }>\r\n                            { localizationString.getString(\"Xem bản đồ\") }\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </SidebarWidget>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        map: state.googleMap[ pageConfigures.smallMapId ]\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(SmallMap);","import React, { Component } from 'react';\r\nimport { Input } from 'reactstrap'\r\nimport { SidebarWidget, GoogleMap } from '../../shared/components'\r\n\r\nconst cities = {\r\n    'Hà Nội': {\r\n        center: [ 21.0227431, 105.8194541 ],\r\n        zoom: 11\r\n    },\r\n    'Đà nẵng': {\r\n        center: [ 16.0646499, 108.2296327 ],\r\n        zoom: 11\r\n    },\r\n    'Hồ Chí Minh': {\r\n        center: [ 10.7687085, 106.7204141 ],\r\n        zoom: 10\r\n    }\r\n}\r\n\r\nclass SearchCity extends Component {\r\n    onCityChange(e) {\r\n        const value = e.target.value\r\n        this.props.onCityChange(value != \"0\" && value, cities[ value ])\r\n    }\r\n\r\n    render() {\r\n        const { onCityChange } = this.props\r\n        return (\r\n            <SidebarWidget noBorder noCollapse title={ localizationString.getString('Vị trí') }>\r\n                <div className=\"no-left-space\">\r\n                    <Input type=\"select\" onChange={ this.onCityChange.bind(this) }>\r\n                        <option value={ 0 }>{ localizationString.getString('Chọn thành phố') }</option>\r\n                        {\r\n                            $.map(cities, (city, index) => {\r\n                                return (\r\n                                    <option key={ index } value={ index }>{ index }</option>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Input>\r\n                </div>\r\n            </SidebarWidget>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchCity;","module.exports = {\r\n    mvcController: '/project',\r\n    page: 'du-an',\r\n    detailPath: '/chi-tiet/:entity',\r\n    smallMapId: \"category-small-map\",\r\n    bigMapId: \"big-map-id\",\r\n    showBreadcrumb: true,\r\n    TAXONOMY_TYPE_ID_CATEGORY: 20003,\r\n    ITEM_PER_PAGE: 6\r\n}","module.exports = function getCurrentCategory(match, categories) {\r\n    const currentCategory = categories.filter((categoryItem) => {\r\n        return categoryItem.name === match.params.category\r\n    })[0]\r\n    return currentCategory\r\n}","import { PageItem } from '../../shared/components'\r\n\r\nfunction renderItem(item) {\r\n    return (\r\n        <PageItem data={ item } extraText={ item.area } path={ item.path } />\r\n    )\r\n}\r\n\r\nexport { renderItem }","\r\nimport _ from 'underscore'\r\nimport { Route, Switch } from 'react-router'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\n\r\n//Actions\r\nimport { setMapValue, setMapMarkers, showMarkerBalloon } from '../shared/reducers/google-map'\r\n\r\n//Global Components\r\nimport { default as BasePage } from '../shared/_layout/main/base-page'\r\nimport { Container, Row, Col } from 'reactstrap'\r\nimport { Sidebar, SidebarMenu, Image, CategoryMenu, PageItem } from '../shared/components'\r\n\r\n//Local Components\r\nimport { default as SearchByArea } from './components/search-area';\r\nimport { default as SearchByCity } from './components/sreach-city';\r\nimport { default as SmallMap } from './components/small-map';\r\n\r\n//Views\r\nimport { default as BigMap } from './views/big-map'\r\nimport { default as DefaultView } from './views/default-view'\r\n\r\n//Helper and utilities\r\nimport {\r\n    createCategoryUrlFromRoutePathAndCategoryName,\r\n    fetchEntities, fetchPage, fetchTaxonomiesByTaxonomyTypeId,\r\n    getCategoryByNameFromCatogires,\r\n    generateEntityDetailUrl,\r\n} from '../shared/utilities'\r\n\r\n//Page configures\r\nconst pageConfigure = require('./configuration.js')\r\n\r\nclass PageComponent extends React.Component {\r\n    static defaultProps = {\r\n        map: {\r\n            center: [ 15.866913899999986, 104.1218629 ],\r\n            zoom: 5,\r\n        },\r\n        items: []\r\n    }\r\n\r\n    constructor() {\r\n        super()\r\n        this.renderSidebar = this.renderSidebar.bind(this)\r\n        this.renderRoutes = this.renderRoutes.bind(this)\r\n        this.getCurrentChildRoute = this.getCurrentChildRoute.bind(this)\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { onError, onDataFetch, refreshRoutePath, categories, pageContent } = this.props\r\n\r\n        if (!pageContent)\r\n            fetchPage(pageConfigure.page).then((response) => {\r\n                onDataFetch({ pageContent: response.details }, 50);\r\n\r\n            })\r\n\r\n        if (!categories)\r\n            fetchTaxonomiesByTaxonomyTypeId(pageConfigure.TAXONOMY_TYPE_ID_CATEGORY).then((responseCategories) => {\r\n                responseCategories.unshift({\r\n                    name: localizationString.getString('tat-ca'),\r\n                    title: localizationString.getString(\"Tất cả\")\r\n                })\r\n                onDataFetch({ categories: responseCategories }, 50)\r\n            })\r\n    }\r\n\r\n    onSearchByArea(from, to) {\r\n        var searchArea = { from, to }\r\n        if (from === -1 || to === -1)\r\n            searchArea = null\r\n        this.props.onDataFetch({ searchArea }, 0)\r\n    }\r\n\r\n    onSearchByCity(city, map) {\r\n        const { setMapValue, searchArea, onDataFetch } = this.props;\r\n\r\n        onDataFetch({ searchCity: city }, 0)\r\n\r\n        setMapValue(pageConfigure.smallMapId, map || defaultMap)\r\n    }\r\n\r\n    renderSidebar() {\r\n        const { categories, currentCategory, match: { path, url }, location } = this.props;\r\n\r\n        const categoryMenuItems = categories.map(({ name, title }) => {\r\n            return { path: createCategoryUrlFromRoutePathAndCategoryName(path, name), title }\r\n        })\r\n\r\n        return (\r\n            <Sidebar>\r\n                <SidebarMenu title={ localizationString.getString('loại công trình') }\r\n                    items={ categoryMenuItems }\r\n                />\r\n                <SearchByArea onSearch={ this.onSearchByArea.bind(this) } />\r\n                <SearchByCity onCityChange={ this.onSearchByCity.bind(this) } />\r\n\r\n                <SmallMap map={ this.props.map }\r\n                    linkToBigMap={ `/${pageConfigure.page}/ban-do/${currentCategory ? currentCategory.name : localizationString.getString('tat-ca')}` }\r\n                    hiddenBigMapLink={ false }\r\n                />\r\n            </Sidebar>\r\n        )\r\n    }\r\n\r\n    renderRoutes() {\r\n        const { match: { path }, onDataFetch, setMapMarkers, showMarkerBalloon } = this.props;\r\n        const commonProps = {\r\n            onDataFetch,\r\n            setMapMarkers,\r\n            showMarkerBalloon\r\n        }\r\n\r\n        return (\r\n            <Switch>\r\n                <Route exact={ true } path={ '/' + pageConfigure.page + '/ban-do/:category' } render={ (route) => <BigMap {...route}\r\n                    onDataFetch={ onDataFetch } {...commonProps} /> } />\r\n\r\n                <Route exact={ true } path={ path } render={ (route) =>\r\n                    <DefaultView {...route} {...commonProps} /> }\r\n                />\r\n\r\n                <Route path={ path + '/:page' } render={ (route) =>\r\n                    (<DefaultView {...route} onDataFetch={ onDataFetch } {...commonProps} />) }\r\n                />\r\n\r\n            </Switch>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        if (this.props.dataFetchProgress != 100)\r\n            return null;\r\n\r\n        console.log(this.props)\r\n\r\n        return (\r\n            <Container id={ pageConfigure.page }>\r\n                <Row>\r\n                    <Col lg=\"3\">\r\n                        { this.renderSidebar() }\r\n                    </Col>\r\n                    <Col xs=\"12\" lg=\"9\">\r\n                        { this.renderRoutes() }\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst stateToProps = (state) => ({\r\n\r\n})\r\n\r\nconst dispathToProps = (dispath) => (\r\n    bindActionCreators({ setMapValue, setMapMarkers, showMarkerBalloon }, dispath)\r\n)\r\n\r\nconst ConnectedPageComponent = connect(stateToProps, dispathToProps)(PageComponent)\r\n\r\nmodule.exports = BasePage({ page: pageConfigure.page, showBreadcrumbs: pageConfigure.showBreadcrumb })(ConnectedPageComponent);","\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { push } from 'react-router-redux'\r\n\r\n\r\nimport { GoogleMap } from '../../shared/components'\r\nimport { Container, Row, Col } from 'reactstrap'\r\nimport { PageItem, Image, Pagination, SideBarToggleStart } from '../../shared/components'\r\n\r\nimport { default as classNames } from 'classnames'\r\nimport { renderItem } from '../helper/render-items'\r\n\r\nconst pageConfigure = require('../configuration.js')\r\n\r\nconst getCurrentCategory = require('../helper/get-current-category.js')\r\n\r\nconst { fetchEntities, getCategoryByNameFromCatogires, generateEntityDetailUrl } = require('../../shared/utilities')\r\n\r\nclass BigMap extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n        this.updateViewProps(props)\r\n        this.onMarkerClick = this.onMarkerClick.bind(this)\r\n        this.renderMarkerContent = this.renderMarkerContent.bind(this)\r\n        this.onMarkerCloseBtnClick = this.onMarkerCloseBtnClick.bind(this)\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.updateViewProps(this.props)\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (JSON.stringify(nextProps) != JSON.stringify(this.props)) {\r\n            this.updateViewProps(nextProps)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { layouttParameters: { mediaSize, viewportHeight, headerHeight } } = this.props\r\n        const $bigMap = $('#big-map')\r\n\r\n        if (mediaSize == 'md' || mediaSize == 'sm' || mediaSize == 'xs') {\r\n            const bigMapHeight = viewportHeight - headerHeight\r\n            $bigMap.find('.g-map').css('height', `${bigMapHeight}px`)\r\n        }\r\n        else {\r\n            var $parentBigMap = $bigMap.parent()\r\n            const bigMapHeight = $parentBigMap.innerHeight()\r\n            $bigMap.find('.g-map').css('height', `${bigMapHeight}px`)\r\n        }\r\n    }\r\n\r\n    setStateRandomProject(randomItems) {\r\n        const { getItemsWithPath } = this.props\r\n        const itemWithPath = generateEntityDetailUrl(randomItems, `/${pageConfigure.page}/${pageConfigure.detailPath}`)\r\n        this.setState({ randomItems: itemWithPath })\r\n    }\r\n\r\n    //request 9 dự án ngẫu nhiên\r\n    componentWillMount() {\r\n        $.ajax({\r\n            url: '/project/getrandomEntity',\r\n            data: { count: 9 },\r\n            success: this.setStateRandomProject.bind(this)\r\n        });\r\n    }\r\n\r\n    updateViewProps(props) {\r\n        const { categories, match: { params: { category, page } }, onDataFetch, setMapMarkers, searchArea, searchCity } = props\r\n        const currentCategory = getCategoryByNameFromCatogires(category, categories)\r\n\r\n        var filtering = []\r\n        if (searchArea)\r\n            filtering.push(\r\n                {\r\n                    id: 'area',\r\n                    value: searchArea.from,\r\n                    operator: '>='\r\n                },\r\n                {\r\n                    id: 'area',\r\n                    value: searchArea.to,\r\n                    operator: '<='\r\n                }\r\n            )\r\n\r\n        if (searchCity)\r\n            filtering.push({\r\n                id: 'city',\r\n                value: searchCity,\r\n                operator: '=='\r\n            })\r\n\r\n        const postParams = {\r\n            categories: currentCategory.id && { [ pageConfigure.TAXONOMY_TYPE_ID_CATEGORY ]: currentCategory.id },\r\n            entityTypeId: pageConfigure.ENTITY_TYPE_ID,\r\n            additionalFields: [ 'mapLongitude', 'mapLatitude' ],\r\n            filtering\r\n        }\r\n        const baseItemPath = `/${pageConfigure.page}/${pageConfigure.detailPage}`\r\n\r\n        fetchEntities(pageConfigure.mvcController, postParams, baseItemPath, (items, totalPages) => {\r\n            items = generateEntityDetailUrl(items, `/${pageConfigure.page}${pageConfigure.detailPath}`)\r\n            onDataFetch({ items, totalPages }, 0)\r\n\r\n            const markers = items.map(({ id, name, thumbnailUrl, moreDetails: { mapLongitude, mapLatitude }, title, path }) => {\r\n                return {\r\n                    id,\r\n                    lat: mapLatitude,\r\n                    lng: mapLongitude,\r\n                    title,\r\n                    thumbnailUrl,\r\n                    redirect: path,\r\n                    height: 280,\r\n                }\r\n            })\r\n            setMapMarkers(pageConfigure.smallMapId, markers)\r\n        })\r\n    }\r\n\r\n    onMarkerClick(marker) {\r\n        const { layouttParameters: { mediaSize } } = this.props\r\n        if (mediaSize == 'md' || mediaSize == 'sm' || mediaSize == 'xs')\r\n            this.setState({ showBalloonForMarker: marker.id })\r\n        else\r\n            this.props.dispatch(push(marker.redirect))\r\n    }\r\n\r\n    onMarkerCloseBtnClick() {\r\n        this.setState({ showBalloonForMarker: -1 })\r\n    }\r\n\r\n    renderMarkerContent(marker) {\r\n        return (\r\n            <div className=\"marker-balloon\">\r\n                <div className=\"marker-balloon-close\" onClick={ this.onMarkerCloseBtnClick }\r\n                >\r\n                    <span className=\"marker-balloon-close-icon\">X</span>\r\n                </div>\r\n                <div className=\"marker-thumbnail mb-3\">\r\n                    <Image className=\"h-100\" url={ marker.thumbnailUrl } description={ `${marker.title} thumbnail` } />\r\n                </div>\r\n                <div className=\"marker-info mb-2\">\r\n                    <label className=\"marker-label\">\r\n                        { marker.title || `Missing Title` }\r\n                    </label>\r\n                    <br />\r\n                    <a className={ classNames('map-marker-hint__ap-link') }>\r\n                        { localizationString.getString(\"Click to view more info\") }\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { map } = this.props\r\n\r\n        return (\r\n            <div id=\"big-map\" className=\"big-map-container \">\r\n                <div className=\"g-map g-map-big\">\r\n                    <GoogleMap {...map}\r\n                        renderMarkerContent={ this.renderMarkerContent }\r\n                        showBalloonForMarker={ this.state.showBalloonForMarker }\r\n                        onMarkerClick={ this.onMarkerClick } />\r\n                    <SideBarToggleStart className=\"float static\" />\r\n                </div>\r\n                <div className=\"page-titles mt-4 mb-3\">\r\n                    <span className=\"page-title\">{ localizationString.getString(\"Dự án\") }</span>\r\n                    <span>|</span>\r\n                    <span className=\"page-title\">{ localizationString.getString(\"Công trình khác\") }</span>\r\n                </div>\r\n\r\n                <Pagination items={ this.state.randomItems } className=\"w-100 pl-2 pl-lg-0 pr-2 pr-lg-0\"\r\n                    layout={ [\r\n                        { xs: 6, sm: 6, md: 4, lg: 4, xl: 4 },\r\n                        { at: 3, xs: 12, sm: 12, md: 12, lg: 4, xl: 4 }\r\n                    ] }\r\n                    itemWrapperClassName=\"page-item\"\r\n                    itemPerPage={ 3 }\r\n                    renderItem={ renderItem } />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { totalPages, items, categories, pageContent, searchArea, searchCity } = state.connectedBasePage.pages[ pageConfigure.page ]\r\n    const { mediaSize, viewportHeight, header } = state.layout.parameters\r\n    return {\r\n        totalPages,\r\n        items,\r\n        categories,\r\n        pageContent,\r\n        searchArea, searchCity,\r\n        map: state.googleMap[ pageConfigure.smallMapId ],\r\n        layouttParameters: { mediaSize, viewportHeight, headerHeight: header.height }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(BigMap);","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n//Components\r\nimport { Container, Row, Col } from 'reactstrap'\r\nimport { Image, Pagination, SideBarToggleStart } from '../../shared/components'\r\n\r\n//Helper functions\r\nimport { renderItem } from '../helper/render-items'\r\nconst { fetchEntities, getCategoryByNameFromCatogires, generateEntityDetailUrl } = require('../../shared/utilities')\r\n\r\nconst pageConfigure = require('../configuration.js')\r\n\r\nclass DefaultView extends Component {\r\n\r\n    static defaultProps = {\r\n        defaultPage: 1,\r\n        categories: [],\r\n        pageContent: {\r\n            thumbnail: {}\r\n        }\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateViewProps = this.updateViewProps.bind(this)\r\n        this.onItemHover = this.onItemHover.bind(this)\r\n    }\r\n\r\n    updateViewProps(props) {\r\n        const { categories, match: { params: { category, page } }, onDataFetch, setMapMarkers, searchArea, searchCity } = props\r\n        const currentCategory = getCategoryByNameFromCatogires(category, categories)\r\n        const currentPage = page || props.defaultPage\r\n\r\n        var filtering = []\r\n        if (searchArea)\r\n            filtering.push(\r\n                {\r\n                    id: 'area',\r\n                    value: searchArea.from,\r\n                    operator: '>='\r\n                },\r\n                {\r\n                    id: 'area',\r\n                    value: searchArea.to,\r\n                    operator: '<='\r\n                }\r\n            )\r\n\r\n        if (searchCity)\r\n            filtering.push({\r\n                id: 'city',\r\n                value: searchCity,\r\n                operator: '=='\r\n            })\r\n\r\n        const postParams = {\r\n            page: currentPage,\r\n            pageSize: pageConfigure.ITEM_PER_PAGE,\r\n            categories: currentCategory.id && { [ pageConfigure.TAXONOMY_TYPE_ID_CATEGORY ]: currentCategory.id },\r\n            entityTypeId: pageConfigure.ENTITY_TYPE_ID,\r\n            additionalFields: [ 'mapLongitude', 'mapLatitude' ],\r\n            filtering\r\n        }\r\n        const baseItemPath = `/${pageConfigure.page}/${pageConfigure.detailPage}`\r\n\r\n        fetchEntities(pageConfigure.mvcController, postParams, baseItemPath, (items, totalPages) => {\r\n            items = generateEntityDetailUrl(items, `/${pageConfigure.page}/${pageConfigure.detailPath}`)\r\n            onDataFetch({ items, totalPages }, 0)\r\n\r\n            const markers = items.map(({ id, name, thumbnailUrl, moreDetails: { mapLongitude, mapLatitude }, title, path }) => {\r\n                return {\r\n                    id,\r\n                    lat: mapLatitude,\r\n                    lng: mapLongitude,\r\n                    title,\r\n                    thumbnailUrl: `/${thumbnailUrl}`,\r\n                    redirect: path,\r\n                    height: 48,\r\n                }\r\n            })\r\n            setMapMarkers(pageConfigure.smallMapId, markers)\r\n        })\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.updateViewProps(this.props)\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (JSON.stringify(nextProps) != JSON.stringify(this.props)) {\r\n            this.updateViewProps(nextProps)\r\n        }\r\n    }\r\n\r\n    onItemHover(isHover, item) {\r\n        const { showMarkerBalloon } = this.props\r\n        var markerId = isHover ? item.id : null\r\n\r\n        showMarkerBalloon(pageConfigure.smallMapId, markerId)\r\n    }\r\n\r\n    render() {\r\n        const { match, pageContent: { thumbnail, title }, categories, items, totalPages, defaultPage } = this.props\r\n\r\n        const currentCategory = getCategoryByNameFromCatogires(match.params.category, categories)\r\n        const currentPage = match.params.page ? parseInt(match.params.page) : defaultPage\r\n\r\n        return (\r\n            <Row>\r\n                <Image className=\"h-100\" {...thumbnail} />\r\n                <SideBarToggleStart className=\" mt-4 mb-3\">\r\n                    <h1 className=\"page-titles\">\r\n                        <span className=\"page-title\">{ title }</span>\r\n                        <span>|</span>\r\n                        <span className=\"page-title\">{ currentCategory && currentCategory.title }</span>\r\n                    </h1>\r\n                </SideBarToggleStart>\r\n                {\r\n                    currentCategory && (\r\n                        <Pagination itemWrapperClassName=\"page-item\" className=\"w-100 pl-2 pl-lg-0 pr-2 pr-lg-0\"\r\n                            layout={ { xs: 6, sm: 6, md: 4, lg: 4, xl: 4 } }\r\n                            items={ items }\r\n                            totalPages={ totalPages }\r\n                            currentPage={ currentPage }\r\n                            templatePath={ String(match.path).replace(':category', currentCategory.name) }\r\n                            renderItem={ renderItem }\r\n                            onItemHover={ this.onItemHover }\r\n                        />\r\n                    )\r\n                }\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const { totalPages, items, categories, pageContent, searchArea, searchCity } = state.connectedBasePage.pages[ pageConfigure.page ]\r\n    return {\r\n        totalPages,\r\n        items,\r\n        categories,\r\n        pageContent,\r\n        searchArea, searchCity\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DefaultView)","const { Container } = require('reactstrap');\r\nconst { Title } = require('../../shared/components');\r\n\r\nmodule.exports = class extends React.Component {\r\n    componentDidMount() {\r\n        $(\".cd-timeline-block\").each(function (index) {\r\n            const $this = $(this);\r\n            var objPrev = $this.prev('.cd-timeline-block');\r\n            if (objPrev.hasClass('odd')) {\r\n                $this.find('.cd-timeline-content p').attr('data-aos', 'zoom-in');\r\n                $this.find('.cd-timeline-content h2').attr('data-aos', 'zoom-in');\r\n\r\n                $this.addClass('even');\r\n            } else {\r\n                $this.find('.cd-timeline-content p').attr('data-aos', 'zoom-in');\r\n                $this.find('.cd-timeline-content h2').attr('data-aos', 'zoom-in');\r\n                $this.addClass('odd');\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        const { items, title } = this.props;\r\n\r\n        var array = items.map(item => {\r\n            var strs = String(item.value).split('\\n');\r\n            var obj = {};\r\n            for (var i in strs) {\r\n                var str = strs[i].split(':');\r\n                if (str.length == 2) {\r\n                    var kv = str;\r\n                    var k = kv[0].trim();\r\n                    var v = kv[1].trim();\r\n                    obj[k] = v;\r\n                }\r\n            }\r\n            return obj;\r\n        });\r\n\r\n        return (\r\n            <Container>\r\n                <Title>{title}</Title>\r\n                <section id=\"cd-timeline\">\r\n                    {\r\n                        array.map((item, index) => {\r\n                            if (!item.content) {\r\n                                return (\r\n                                    <p className=\"cd-timeline-title\">\r\n                                        <span className=\"text\">\r\n                                            {item.label}\r\n                                        </span>\r\n                                    </p>\r\n                                );\r\n                            }\r\n                            return (\r\n                                <div className=\"cd-timeline-block clearfix\">\r\n                                    <div className=\"cd-timeline-dot\" />\r\n                                    <div className=\"cd-timeline-content clearfix\">\r\n                                        <h2>{item.label}</h2>\r\n                                        <p>{item.content}</p>\r\n                                        <div className=\"cd-icon\">\r\n                                            <img src={item.icon} alt={item.title} />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n\r\n                        })\r\n                    }\r\n                </section>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n","﻿const { bindActionCreators } = require('redux');\r\n\r\nconst { Container, Row } = require('reactstrap');\r\nconst { Image,  Title, PageArticle } = require('../shared/components');\r\nconst QuyTrinh = require('./components/quy-trinh');\r\n\r\nimport { default as BasePage } from '../shared/_layout/main/base-page'\r\n\r\nclass PageComponent extends React.Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { onError, onDataFetch, article, procedure } = this.props;\r\n\r\n        if(!article)\r\n            $.get('/page/GetSingle?entityName=ve-chung-toi', function (response) {\r\n                onDataFetch({ article: response}, 50);\r\n            });\r\n\r\n        if(!procedure)    \r\n            $.get('/optionGroup/GetSingle?entityName=quy-trinh', function (response) {\r\n                onDataFetch({ procedure: response.details }, 50);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        if (this.props.dataFetchProgress != 100)\r\n            return null;\r\n\r\n        const { article, procedure } = this.props;\r\n\r\n        return (\r\n            <div id=\"gioi-thieu\">\r\n                { article && <PageArticle className=\"mb-5 mb-xl-6\" {...article.details}/> }\r\n                { procedure && <QuyTrinh items={ procedure.options } title={procedure.title}/> }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nmodule.exports = BasePage({ page: 'gioi-thieu' })(PageComponent);","module.exports = {\r\n    mvcController: '/post',\r\n    page: 'hoi-dap',\r\n    ITEM_PER_PAGE: 1,\r\n    ENTITY_TYPE_ID: 40008,\r\n}","import { Link } from 'react-router-dom'\r\n\r\nimport { PageItem } from '../../shared/components'\r\nimport { Row, Col } from 'reactstrap'\r\nimport { Image } from '../../shared/components'\r\n\r\nconst pageConfigure = require('../configuration.js')\r\n\r\nfunction renderItem(item) {\r\n    try {\r\n        const { thumbnailUrl, moreDetails } = item\r\n\r\n        return (\r\n            <article className=\"hoi-dap-item w-100\">\r\n                <div className=\"hoi-dap-item-thumbnail mb-5\">\r\n                    <Image url={ thumbnailUrl }\r\n                        title={ moreDetails && moreDetails.thumbnailTitle && moreDetails.thumbnailTitle }\r\n                        alt={ moreDetails && moreDetails.thumbnailAlt && moreDetails.thumbnailAlt } />\r\n                </div>\r\n                <div className=\"hoi-dap-item-content\" dangerouslySetInnerHTML={ moreDetails && { __html: moreDetails.content } } />\r\n            </article>\r\n        )\r\n    }\r\n    catch (e) {\r\n        console.error('renderItem Error:')\r\n        console.log(item)\r\n        console.error(e)\r\n    }\r\n}\r\n\r\nexport { renderItem }","//React/Redux\r\nimport React, { Component } from 'react'\r\nimport { Switch, Route } from 'react-router'\r\n\r\n//Components\r\nimport { default as BasePage } from '../shared/_layout/main/base-page'\r\nimport { Container } from 'reactstrap'\r\n\r\n//Views\r\nimport { default as DefaultView } from './views/default'\r\n\r\n//Helper function\r\nconst { fetchEntities } = require('../shared/utilities')\r\n\r\n//Page configuration\r\nconst pageConfigure = require('./configuration.js')\r\n\r\nclass HoiDap extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.renderRoutes = this.renderRoutes.bind(this)\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { onError, onDataFetch, items } = this.props\r\n\r\n        if (!items) {\r\n            const postParams = {\r\n                entityTypeId: pageConfigure.ENTITY_TYPE_ID,\r\n                additionalFields: [ 'content' ]\r\n            }\r\n\r\n            fetchEntities(pageConfigure.mvcController, postParams, null, (items) => {\r\n                onDataFetch({ items, totalPages: items.length }, 100)\r\n            })\r\n        }\r\n    }\r\n\r\n    renderRoutes() {\r\n        const { match } = this.props\r\n        return (\r\n            <Switch>\r\n                <Route exact={ true } path={ `${match.path}` } component={ DefaultView } />\r\n                <Route path={ `${match.path}/:page` } component={ DefaultView } />\r\n            </Switch>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { dataFetchProgress, items, totalPages, match } = this.props\r\n        const currentPage = match.params ? parseInt(match.params.page) : 1\r\n        if (dataFetchProgress != 100)\r\n            return null\r\n\r\n        if (__DEV__) {\r\n            console.log(pageConfigure.page + ' props: ')\r\n            console.log(this.props)\r\n        }\r\n\r\n        return (\r\n            <Container id=\"thu-vien\">\r\n                { this.renderRoutes() }\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nmodule.exports = BasePage({ page: pageConfigure.page, showBreadcrumbs: pageConfigure.showBreadcrumbs })(HoiDap);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\n\r\nimport { Pagination } from '../../shared/components'\r\n\r\nimport { renderItem } from '../helpers/render-items'\r\n\r\nconst pageConfigure = require('../configuration.js')\r\n\r\nclass DefaultView extends Component {\r\n    static defaultProps = {\r\n        items: []\r\n    }\r\n\r\n    render() {\r\n        const { match, items, totalPages } = this.props\r\n        const currentPage = match.params.page ? parseInt(match.params.page) : 1\r\n\r\n        if(__DEV__){\r\n            console.warn('DefaultView Props:')\r\n            console.log(this.props)\r\n        }\r\n\r\n        return (\r\n            <Pagination itemWrapperClassName=\"hoi-dap-item\" className=\"w-100\"\r\n                layout={ { xs: 12, sm: 12, md: 12, lg: 12, xl: 12 } }\r\n                items={ items.length ? [ items[ currentPage - 1 ] ] : [] }\r\n                totalPages={ totalPages }\r\n                currentPage={ currentPage }\r\n                templatePath={ match.path }\r\n                renderItem={ renderItem }\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const { items, totalPages } = state.connectedBasePage.pages[ pageConfigure.page ]\r\n    return {\r\n        items, totalPages\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DefaultView);","module.exports = {\r\n    mvcController: '/post',\r\n    page: 'lien-he',\r\n    showBreadcrumbs: true\r\n}","//React/Redux\r\nimport React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\n//Actions\r\nimport { refreshRoutePath } from '../routes'\r\n\r\n//Components\r\nimport { default as BasePage } from '../shared/_layout/main/base-page'\r\nimport { Image, GoogleMap } from '../shared/components'\r\nimport { Container, Row, Col } from 'reactstrap'\r\n\r\n//Helper function\r\nconst { dataRequest, getOptions } = require('../shared/utilities')\r\n\r\n//Page configuration\r\nconst pageConfigure = require('./configuration.js')\r\n\r\nclass LienHe extends Component {\r\n    componentWillMount() {\r\n        const { onError, onDataFetch, dispatch, contactOptions } = this.props\r\n\r\n        if (!contactOptions)\r\n            getOptions('lien-he').then(function (contactOptions) {\r\n                const constBodyStyle = { background: `url(${contactOptions.cover_image.url})` }\r\n                onDataFetch({ contactOptions, constBodyStyle }, 100)\r\n            })\r\n\r\n        dispatch(refreshRoutePath(pageConfigure.page))\r\n    }\r\n\r\n    render() {\r\n        if (this.props.dataFetchProgress != 100)\r\n            return null\r\n\r\n        const { match, constBodyStyle, contactOptions: { cover_image, texts, address, call_us, form, google_map } } = this.props\r\n\r\n        if (__DEV__) {\r\n            console.log(pageConfigure.page + ' props: ')\r\n            console.log(this.props)\r\n        }\r\n        const map = {\r\n            center: [ parseFloat(google_map.lat), parseFloat(google_map.lng) ],\r\n            zoom: 15,\r\n            markers: [\r\n                {\r\n                    id: 1,\r\n                    lat: google_map.lat,\r\n                    lng: google_map.lng\r\n                }\r\n            ]\r\n        }\r\n\r\n        return (\r\n            <div id=\"contact\" className=\"contact pt-lg-5\">\r\n                <div className=\"contact-body mb-5\">\r\n                    <div className=\"contact-body-content p-5\" style={ constBodyStyle }>\r\n                        <Container>\r\n                            <h1 className=\"contact-title text-center h2 mb-3\">{ texts.text1 }</h1>\r\n                            <h4 className=\"text-center\">{ texts.text2 }</h4>\r\n                            <Row className=\"mt-5\">\r\n                                <Col xs={ 12 } lg={ 7 } className=\"mb-2 mb-lg-0\">\r\n                                    <p className=\"h5 mb-4\"><strong>{ texts.text3 }</strong></p>\r\n                                    <dl className=\"mb-4 pt-2\">\r\n                                        <dd>{ address.text1 }</dd>\r\n                                        <dd><address className=\"m-0\">{ address.text2 }</address></dd>\r\n                                        <dd>{ address.text3 }</dd>\r\n                                    </dl>\r\n                                    <p className=\"h5 mb-4 pt-2\"><strong>{ texts.text5 }</strong></p>\r\n                                    <div className=\"pt-2\">\r\n                                        {\r\n                                            $.map(call_us, (call, index) => {\r\n                                                const tellNumber = String(call).replace('(', '').replace(')', '').replace(/\\s/g, \"\")\r\n                                                return (\r\n                                                    <p key={ index } className=\"call-us\">\r\n                                                        <a href={ `tel:${tellNumber}` } title=\"Click here to call...\"><span className=\"icon\">{ index }</span> { call } </a>\r\n                                                    </p>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </div>\r\n                                </Col>\r\n                                <Col xs={ 12 } lg={ 5 } className=\"pt-2 pt-lg-0\">\r\n                                    <p className=\"h5 mb-4\"><strong>{ texts.text4 }</strong></p>\r\n                                    <form className=\"contact-from pt-2\" method=\"POST\" className=\"fro\">\r\n                                        <div className=\"from-group mb-3\">\r\n                                            <input className=\"form-control\" placeholder={ form.full_name } />\r\n                                        </div>\r\n                                        <div className=\"from-group mb-3\">\r\n                                            <input className=\"form-control\" placeholder={ form.email } />\r\n                                        </div>\r\n                                        <div className=\"from-group mb-3\">\r\n                                            <input className=\"form-control\" placeholder={ form.phone } />\r\n                                        </div>\r\n                                        <div className=\"from-group mb-3\">\r\n                                            <textarea className=\"form-control\" placeholder={ form.message } />\r\n                                        </div>\r\n                                        <button className=\"send\" type=\"submit\">\r\n                                            <img className=\"w-100\" src={ form.send_button_image_Url } alt=\"Send you message\" />\r\n                                        </button>\r\n                                    </form>\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </div>\r\n                </div>\r\n                <Container className=\"\">\r\n                    <Row>\r\n                        <div className=\"contact-map-container\">\r\n                            <div className=\"contact-map\">\r\n                                <GoogleMap {...map} renderMarkerContent={ (marker) => {\r\n                                    return <span style={ { color: '#000' } }>{ google_map.marker_text }</span>\r\n                                } } />\r\n                            </div>\r\n                        </div>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst ConnectedLienHe = connect()(LienHe)\r\n\r\nmodule.exports = BasePage({ page: pageConfigure.page, showBreadcrumbs: pageConfigure.showBreadcrumbs })(ConnectedLienHe);","﻿const { Route, Switch } = require('react-router')\nconst { Provider, connect } = require('react-redux')\nconst { createBrowserHistory } = require('history')\nconst { ConnectedRouter } = require('react-router-redux')\n\nconst PropTypes = require('prop-types');\n\nconst history = createBrowserHistory()\n\n// Pages:\nconst Layout = require('./shared/_layout').default\n\nimport { default as ExtendConnectedRouter } from './shared/components/_commons/extended-ConnectedRouter';\n\nclass Root extends React.Component {\n    constructor(props) {\n        super(props);\n        AOS.init();\n    }\n\n    render() {\n        const { menuItems, store } = this.props;\n        return (\n            <Provider store={ store }>\n                <ExtendConnectedRouter history={ history } wrapper={Layout}/>\n            </Provider>\n        );\n    }\n}\n\nRoot.propTypes = {\n    store: PropTypes.object.isRequired,\n};\n\nconst stateToProps = (state) => ({\n    menuItems: state.menu.menuItems\n})\n\nmodule.exports = {\n    Root: connect(stateToProps)(Root),\n    history\n};\n\nexport default exports","\r\nimport TrangChu from './trang-chu/index'\r\nimport VeChungToi from './gioi-thieu/index'\r\nimport CongTrinh from './cong-trinh/index'\r\nimport BoSuuTap from './bo-suu-tap/index'\r\nimport DuAn from './du-an/index'\r\nimport ThuVien from './thu-vien/index'\r\nimport HoiDap from './hoi-dap/index'\r\nimport LienHe from './lien-he/index'\r\nimport { DEFAULT_MENU } from './shared/reducers/app-routes'\r\n\r\nconst routes = ({\r\n    exact: true,\r\n    path: '/',\r\n    name: 'trang-chu',\r\n    label: localizationString.getString('Trang chủ'),\r\n    menuOrders: {\r\n        [ DEFAULT_MENU ]: 1,\r\n        footer: 3\r\n    },\r\n    component: TrangChu,\r\n    childRoutes: [\r\n        {\r\n            exact: true,\r\n            path: '/ve-chung-toi',\r\n            name: 've-chung-toi',\r\n            defaultLabel: localizationString.getString('Về chúng tôi'),\r\n            menuOrders: {\r\n                [ DEFAULT_MENU ]: 2,\r\n            },\r\n            component: VeChungToi\r\n        },\r\n        {\r\n            path: '/cong-trinh',\r\n            name: 'cong-trinh',\r\n            defaultLabel: localizationString.getString('Công trình'),\r\n            menuOrders: {\r\n                [ DEFAULT_MENU ]: 3,\r\n            },\r\n            component: CongTrinh,\r\n            redirectToChild: 1,\r\n            childRoutes: [\r\n                {\r\n                    path: '/chi-tiet/:entity',\r\n                    name: 'cong-trinh-chi-tiet',\r\n                },\r\n                {\r\n                    exact: false,\r\n                    path: '/:category',\r\n                    name: 'cong-trinh-category',\r\n                    defaultLocation: '/tat-ca',\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            path: '/bo-suu-tap',\r\n            name: 'bo-suu-tap',\r\n            defaultLabel: localizationString.getString('Bộ sưu tập'),\r\n            menuOrders: {\r\n                [ DEFAULT_MENU ]: 4,\r\n            },\r\n            component: BoSuuTap,\r\n            redirectToChild: 1,\r\n            childRoutes: [\r\n                {\r\n                    path: '/chi-tiet/:entity',\r\n                    name: 'bo-suu-tap-chi-tiet',\r\n                },\r\n                {\r\n                    exact: false,\r\n                    path: '/:category',\r\n                    name: 'bo-suu-tap-category',\r\n                    defaultLocation: '/tat-ca',\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            path: '/du-an',\r\n            name: 'du-an',\r\n            defaultLabel: localizationString.getString('Dự án'),\r\n            menuOrders: {\r\n                [ DEFAULT_MENU ]: 5,\r\n            },\r\n            component: DuAn,\r\n            redirectToChild: 1,\r\n            childRoutes: [\r\n                {\r\n                    path: '/du-an/ban-do/:category',\r\n                    name: 'ban-do-du-an',\r\n                },\r\n                {\r\n                    path: '/du-an/loai-cong-trinh/:category',\r\n                    name: 'du-an-category',\r\n                    defaultLocation: '/loai-cong-trinh/tat-ca',\r\n                },\r\n                {\r\n                    path: '/du-an/chi-tiet/:du-an',\r\n                    name: 'du-an-chi-tiet',\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            path: '/thu-vien',\r\n            name: 'thu-vien',\r\n            redirectToChild: 1,\r\n            defaultLabel: localizationString.getString('Thư viện'),\r\n            component: ThuVien,\r\n            menuOrders: {\r\n                [ DEFAULT_MENU ]: 6,\r\n            },\r\n            childRoutes: [\r\n                {\r\n                    path: '/chi-tiet/:blog',\r\n                    name: 'thu-vien-chi-tiet',\r\n                },\r\n                {\r\n                    exact: false,\r\n                    path: '/:category',\r\n                    name: 'thu-vien-category',\r\n                    defaultLocation: '/tat-ca',\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            path: '/hoi-dap',\r\n            name: 'hoi-dap',\r\n            defaultLabel: localizationString.getString('Hỏi đáp'),\r\n            menuOrders: {\r\n                [ DEFAULT_MENU ]: 7,\r\n                footer: 2\r\n            },\r\n            component: HoiDap\r\n        },\r\n        {\r\n            path: '/lien-he',\r\n            name: 'lien-he',\r\n            defaultLabel: localizationString.getString('Liên hệ'),\r\n            menuOrders: {\r\n                [ DEFAULT_MENU ]: 8,\r\n            },\r\n            component: LienHe\r\n        },\r\n        {\r\n            path: '/phuong-phap',\r\n            name: 'phuong-phap',\r\n            defaultLabel: localizationString.getString('Liên hệ'),\r\n            menuOrders: {\r\n                footer: 1\r\n            },\r\n            component: LienHe\r\n        },\r\n    ]\r\n})\r\n\r\nexport default routes","﻿import { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport { LOCATION_CHANGE } from 'react-router-redux';\r\n\r\nimport {\r\n    TOGGLE_MOBILE_SIDEBAR, UPDATE_LAYOUT, TOGGLE_PAGE_LOADING,\r\n    toggleMobileSidebar, updateLayout, togglePageLoading\r\n} from './_layout/actions'\r\n\r\nconst Header = require('./_layout/header');\r\nconst Footer = require('./_layout/footer');\r\nconst OutNav = require('./_layout/mobile/menu');\r\nconst PageLoading = require('./_layout/main/page-loading');\r\n\r\nconst initState = {\r\n    loadingFadeOutTime: 500,\r\n}\r\n\r\nconst reducer = (state = initState, action) => {\r\n    var newState = {};\r\n    switch (action.type) {\r\n        case UPDATE_LAYOUT:\r\n            newState = $.extend(true, {}, state);\r\n            newState.parameters = action.parameters;\r\n            return newState;\r\n        case TOGGLE_PAGE_LOADING:\r\n            newState = $.extend(true, {}, state);\r\n            newState.isPageLoadingVisible = action.toggle;\r\n            return newState;\r\n        case TOGGLE_MOBILE_SIDEBAR:\r\n            newState = $.extend(true, {}, state);\r\n            newState.isMobileSidebarOpen = action.toggle\r\n            return newState\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction onElementHeightChange(elm, callback) {\r\n    var lastHeight = elm.clientHeight, newHeight;\r\n    (function run() {\r\n        newHeight = elm.clientHeight;\r\n        if (lastHeight != newHeight)\r\n            callback();\r\n        lastHeight = newHeight;\r\n\r\n        if (elm.onElementHeightChangeTimer)\r\n            clearTimeout(elm.onElementHeightChangeTimer);\r\n\r\n        elm.onElementHeightChangeTimer = setTimeout(run, 200);\r\n    })();\r\n}\r\n\r\n//middle ware to update layout after switch page, etc...\r\nconst updateLayoutMiddleware = store => next => action => {\r\n    if (action.type == UPDATE_LAYOUT) {\r\n        const mainElement = document.getElementById('main');\r\n\r\n        onElementHeightChange(document.body, function () {\r\n            //Nếu height của body thay đổi thì refresh AOS\r\n            AOS.refresh();\r\n        });\r\n\r\n        onElementHeightChange(mainElement, function () {\r\n            store.dispatch(action)\r\n        });\r\n\r\n        const footerElement = document.getElementById('footer')\r\n        const breadcrumbs = document.getElementById('breadcrumbs')\r\n\r\n        const toggleSidebarWrapper = document.getElementById('sidebar-toggle-wrapper')\r\n\r\n        const headerHeight = document.getElementById('header').clientHeight;\r\n        const footerHeight = footerElement.clientHeight;\r\n        const viewportHeight = window.innerHeight;\r\n\r\n        const toggleSidebarButtonOffsetTop = toggleSidebarWrapper &&\r\n            parseInt($(toggleSidebarWrapper).offset().top - $(toggleSidebarWrapper).outerHeight() -\r\n                (toggleSidebarWrapper ? $(toggleSidebarWrapper).outerHeight() / 2 : 0) - (breadcrumbs ? breadcrumbs.clientHeight / 2 : 0))\r\n\r\n        const layoutParameters = {\r\n            header: { id: header, height: headerHeight },\r\n            main: { id: main, minHeight: viewportHeight - footerHeight - headerHeight },\r\n            footer: { id: footer, height: footerHeight },\r\n            loading: { id: loading },\r\n            breadcrumbs: { height: breadcrumbs && parseInt(breadcrumbs.clientHeight) },\r\n            toggleSidebarButtonOffsetTop,\r\n            viewportHeight,\r\n        }\r\n        var windowWidth = parseInt(window.innerWidth)\r\n        if (windowWidth > 1200)\r\n            layoutParameters.mediaSize = 'xl'\r\n        else if (windowWidth > 992)\r\n            layoutParameters.mediaSize = 'lg'\r\n        else if (windowWidth > 786)\r\n            layoutParameters.mediaSize = 'md'\r\n        else if (windowWidth > 579)\r\n            layoutParameters.mediaSize = 'md'\r\n        else\r\n            layoutParameters.mediaSize = 'xs'\r\n\r\n        $(mainElement).css('min-height', layoutParameters.main.minHeight)\r\n        $(document.getElementById('layout')).fadeTo(500, 1)\r\n        $(document.getElementById('loading')).css('height', layoutParameters.main.minHeight)\r\n        action.parameters = layoutParameters;\r\n    }\r\n    if (action.type === TOGGLE_MOBILE_SIDEBAR) {\r\n        if (action.toggle)\r\n            $('html').css('overflow-y', 'hidden')\r\n        else\r\n            $('html').css('overflow-y', 'auto')\r\n    }\r\n\r\n    //hidden sidebar after navigated\r\n    if (action.type === LOCATION_CHANGE) {\r\n        store.dispatch(toggleMobileSidebar(false))\r\n    }\r\n\r\n    return next(action)\r\n}\r\n\r\n\r\nclass LayoutController extends React.Component {\r\n    componentDidUpdate() {\r\n        const { layoutLoaded } = this.props;\r\n        if (layoutLoaded) {\r\n            const { updateLayout } = this.props;\r\n            updateLayout();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"layout-controller\" />;\r\n    }\r\n}\r\n\r\nconst stateToProps = (state) => ({\r\n});\r\n\r\nconst reducerToProps = (reducer) => (\r\n    bindActionCreators({ updateLayout, togglePageLoading }, reducer)\r\n);\r\n\r\nconst ConnectedLayoutController = connect(stateToProps, reducerToProps)(LayoutController);\r\n\r\nclass Layout extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loaded: false\r\n        }\r\n\r\n        this.elementRefs = {\r\n            layout: 'layout',\r\n            header: 'header',\r\n            main: 'main',\r\n            footer: 'footer',\r\n            loading: 'loader'\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ loaded: true });\r\n    }\r\n\r\n    render() {\r\n        const { children } = this.props;\r\n        return (\r\n            <div id={ this.elementRefs.layout } className=\"layout perspective\" style={ { opacity: 0 } }>\r\n                <div className=\"wrapper\">\r\n                    <Header id={ this.elementRefs.header } className=\"p-3 pt-lg-4 pb-lg-4\" />\r\n                    <div id={ this.elementRefs.main } className=\"main pb-5 mt-lg-3\">\r\n                        { children }\r\n                        <PageLoading id={ this.elementRefs.loading } />\r\n                    </div>\r\n                    <Footer id={ this.elementRefs.footer } className=\"p-4\" />\r\n                </div>\r\n                <OutNav />\r\n                <ConnectedLayoutController {...this.elementRefs} layoutLoaded={ this.state.loaded } />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    updateLayoutMiddleware,\r\n    actions: { toggleMobileSidebar, updateLayout, togglePageLoading },\r\n    reducer,\r\n    default: Layout\r\n}","const UPDATE_LAYOUT = \"SET_LAYOUT_PARAMETER\"\r\nconst TOGGLE_PAGE_LOADING = \"TOGGLE_PAGE_LOADING\"\r\nconst TOGGLE_MOBILE_SIDEBAR = \"TOGGLE_MOBILE_SIDEBAR\"\r\n\r\nconst updateLayout = () => ({\r\n    type: UPDATE_LAYOUT\r\n})\r\n\r\nconst togglePageLoading = (toggle) => ({\r\n    type: TOGGLE_PAGE_LOADING,\r\n    toggle\r\n})\r\n\r\nconst toggleMobileSidebar = (toggle) => ({\r\n    type: TOGGLE_MOBILE_SIDEBAR,\r\n    toggle\r\n})\r\n\r\n\r\nexport { TOGGLE_MOBILE_SIDEBAR, UPDATE_LAYOUT, TOGGLE_PAGE_LOADING,\r\n     toggleMobileSidebar, updateLayout, togglePageLoading }\r\n\r\n\r\n","const classNames = require('classnames');\r\n\r\nconst { Container, Row, Col } = require('reactstrap');\r\nconst CopyRight = require('./footer/copy-right');\r\nconst Socials = require('./footer/socials');\r\nconst Menu = require('./footer/menu');\r\n\r\nmodule.exports = class extends React.Component {\r\n    render() {\r\n        return (\r\n            <div {...this.props}>\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col xs=\"12\" lg=\"4\" xl=\"6\" className=\"mb-3 mb-lg-0\">\r\n                            <CopyRight className=\"text-center text-xl-left\"/>\r\n                        </Col>\r\n                        <Col xs=\"12\" md=\"8\" lg=\"6\" xl=\"4\">\r\n                            <Menu className=\"text-center text-md-left text-xl-right\"/>\r\n                        </Col>\r\n                        <Col xs=\"12\" md=\"4\" lg=\"2\" xl=\"2\">\r\n                            <Socials  className=\"text-center text-md-right text-xl-right\"/>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}","const classNames = require('classnames');\r\n\r\nmodule.exports = class extends React.Component {\r\n    render(){\r\n        return(\r\n            <div className={classNames(\"copyright\", this.props.className)}>\r\n                C 2017 dbgroup. All rights reserved\r\n            </div>\r\n        )\r\n    }\r\n}","const $ = require('jquery');\r\nconst _ = require('underscore');\r\nconst { Row, Col } = require('reactstrap');\r\nconst { Link } = require('react-router-dom');\r\nconst { connect } = require('react-redux');\r\nconst PropTypes = require('prop-types');\r\nconst classNames = require('classnames');\r\n\r\nimport { DEFAULT_MENU } from '../../reducers/app-routes'\r\n\r\nconst stateToProps = (state) => ({\r\n    menuItems: state.appRouter.menus[ DEFAULT_MENU ]\r\n});\r\n\r\nclass Menu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const footerMenuItem = props.menuItems.filter(item => {\r\n            return item.footer;\r\n        });\r\n\r\n        this.state = {\r\n            menuItems: _.sortBy(footerMenuItem, 'footer') \r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <Row className={classNames(\"text-uppercase pl-0 mb-0\", this.props.className)}>\r\n                {\r\n                    this.state.menuItems.map((menuItem, index) => {\r\n                        return (\r\n                            <Col key={index} className=\"menu-item d-inline-block\">\r\n                                <Link to={menuItem.url}>\r\n                                    <span>{menuItem.title}</span>\r\n                                </Link>\r\n                            </Col>)\r\n                    })\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nMenu.propTypes = {\r\n    menuItems: PropTypes.array.isRequired\r\n}\r\n\r\nmodule.exports = connect(stateToProps)(Menu)","const classNames = require('classnames');\r\n\r\nmodule.exports = class extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            facebook: \"/\",\r\n            twitter: \"/\",\r\n            instagram: \"/\"\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <ul className={classNames(\"socials pl-0\", this.props.className)}>\r\n                <li className=\"facebook\"><a href={this.state.facebook}><i className=\"fa fa-facebook-official\"/></a></li>\r\n                <li className=\"twitter\"><a href={this.state.twitter}><i className=\"fa fa-twitter\"/></a></li>\r\n                <li className=\"instagram\"><a href={this.state.instagram}><i className=\"fa fa-instagram\"/></a></li>\r\n            </ul>\r\n        )\r\n    }\r\n}","﻿const { Container, Row, Col } = require('reactstrap');\r\n\r\nimport { default as Menu } from './header/menu'\r\n\r\nconst LanguageSelect = require('./header/language-select');\r\nconst Search = require('./header/search');\r\nconst Logo = require('./header/logo');\r\nconst MobileHeader = require('./header/header-mobile');\r\nconst classNames = require('classnames');\r\n\r\nmodule.exports = class extends React.Component {\r\n    render() {\r\n        return (\r\n            <header {...this.props}>\r\n                <Container className=\"d-none d-md-block\">\r\n                    <Row>\r\n                        <Col md=\"2\">\r\n                            <Logo />\r\n                        </Col>\r\n                        <Col md=\"10\">\r\n                            <Row>\r\n                                <div className=\"w-100\">\r\n                                    <div className=\"float-right\">\r\n                                        <div className=\"float-left language-select pr-3 mr-3\">\r\n                                            <LanguageSelect />\r\n                                        </div>\r\n                                        <div className=\"float-left\">\r\n                                            <Search />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </Row>\r\n                            <Row className=\"menu-container\">\r\n                                <div className=\"align-items-end d-flex\">\r\n                                    <Menu />\r\n                                </div>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n                <MobileHeader className=\"d-block d-md-none\" />\r\n            </header>\r\n        );\r\n    }\r\n\r\n}","const classNames = require('classnames');\r\nconst LanguageSelect = require('./language-select');\r\nconst Search = require('./search');\r\n\r\n\r\nmodule.exports = class extends React.Component {\r\n\topenMenu() {\r\n\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tif ('ontouchstart' in window)\r\n\t\t\tvar click = 'touchstart';\r\n\t\telse\r\n\t\t\tvar click = 'click';\r\n\r\n\t\tvar $layout = $($('.layout')[0]);\r\n\t\tvar $wrapper = $layout.find('.wrapper');\r\n\t\tvar $burger = $layout.find('.burger');\r\n\r\n\t\tglobal.closeMenu = function closeMenu() {\r\n\t\t\t$layout.removeClass('animate').delay(500).queue(function () {\r\n\t\t\t\t$wrapper.unbind(click);\r\n\t\t\t\t$layout.removeClass('modalview').dequeue();\r\n\t\t\t});\r\n\t\t\t$burger.removeClass('open');\r\n\t\t}\r\n\r\n\t\tglobal.openMenu = function openMenu() {\r\n\t\t\t$burger.addClass('open');\r\n\t\t\t$layout.addClass('modalview');\r\n\t\t\t$layout.addClass('animate').delay(500).queue(function () {\r\n\t\t\t\t$wrapper.bind(click, function () {\r\n\t\t\t\t\tif ($layout.hasClass('modalview'))\r\n\t\t\t\t\t\tcloseMenu();\r\n\t\t\t\t});\r\n\t\t\t\t$layout.addClass('modalview').dequeue();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t$burger.on(click, function () {\r\n\t\t\topenMenu();\r\n\t\t});\r\n\r\n\t\tvar $nav = $layout.find('.outer-nav');\r\n\t\t$nav.find('a').bind(click, function() {\r\n\t\t\tcloseMenu();\r\n\t\t});\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className={classNames(\"header-mobile clearfix\", this.props.className)}>\r\n\t\t\t\t<div className=\"float-left mt-1\">\r\n\t\t\t\t\t<div className=\"burger\">\r\n\t\t\t\t\t\t<span></span>\r\n\t\t\t\t\t\t<span></span>\r\n\t\t\t\t\t\t<span></span>\r\n\t\t\t\t\t\t<span></span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"float-right\">\r\n\t\t\t\t\t<div className=\"float-left language-select pr-3 mr-3\">\r\n\t\t\t\t\t\t<LanguageSelect />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"float-left\">\r\n\t\t\t\t\t\t<Search />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","﻿const $ = require('jquery');\r\nconst { connect } = require('react-redux');\r\nconst { bindActionCreators } = require('redux');\r\nconst { Input } = require('reactstrap');\r\n\r\nconst { swithLanguage } = require('../../reducers/localization').actions;\r\n\r\nclass LanguageSelect extends React.Component {\r\n    render(){\r\n        const { languages, currentLanguage, swithLanguage } = this.props;\r\n        return (\r\n            <form method=\"post\" action=\"localization/switch\" ref=\"form\">\r\n                <Input name=\"culture\" value={currentLanguage} className=\"text-uppercase border-0 p-0\" type=\"select\" onChange={(e) => { this.refs.form.submit(); }}>\r\n                    { \r\n                        languages.map((language) => {\r\n                            return <option key={language.name} value={language.name}>{language.title}</option>;\r\n                        })\r\n                    }\r\n                </Input>\r\n            </form>\r\n            );\r\n    }\r\n}\r\n\r\nconst stateToProps = (state) => ({\r\n    currentLanguage: state.localization.currentLanguage,\r\n    languages: state.localization.languages\r\n});\r\n\r\nconst dispathToProps = (dispatch) => (\r\n    bindActionCreators({  }, dispatch)\r\n);\r\n\r\nmodule.exports = connect(stateToProps, dispathToProps)(LanguageSelect)","﻿module.exports = (props) => {\r\n    return (\r\n        <div className=\"logo\">\r\n            <img src=\"/img/logo.png\" />\r\n        </div>\r\n        );\r\n}","﻿import $ from 'jquery'\r\nimport { NavLink } from'react-router-dom'\r\nimport { connect } from'react-redux'\r\nimport { bindActionCreators } from'redux'\r\nimport { default as PropTypes} from 'prop-types'\r\n\r\nimport { DEFAULT_MENU } from '../../reducers/app-routes'\r\n\r\nconst keys = {\r\n    init: \"MENU_INIT\"\r\n}\r\n\r\nconst actions = {\r\n    /**\r\n     * {menuItems: flat array}\r\n     */\r\n    init: (initState) => ({\r\n        type: keys.init,\r\n        initState\r\n    })\r\n}\r\n\r\nconst reducer = (state = {}, action) => {\r\n    const newState = $.extend(true, {}, state);\r\n    switch (action.type) {\r\n        case keys.init:\r\n            return action.initState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst stateToProps = (state) => {\r\n    return ({\r\n        menuItems: state.appRouter.menus[ DEFAULT_MENU ]\r\n    })\r\n}\r\n\r\nclass Menu extends React.Component {\r\n    static propTypes = {\r\n        menuItems: PropTypes.array.isRequired\r\n    }\r\n\r\n    static defaultProps = {\r\n        menuItems: []\r\n    }\r\n\r\n    render() {\r\n        const { menuItems } = this.props;\r\n        return (\r\n            <ul className=\"menu text-uppercase pl-0 mb-0\">\r\n                {\r\n                    menuItems.map(({ exact, url, label }, index) => {\r\n                        return (\r\n                            <li key={ index } className=\"menu-item d-inline-block\">\r\n                                <NavLink exact={ exact } to={ url } activeClassName=\"current\">\r\n                                    <span>{ label }</span>\r\n                                </NavLink>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport {\r\n    actions,\r\n    reducer\r\n}\r\n\r\nexport default connect(stateToProps, null, null, { pure: false })(Menu)","﻿const { Button } = require('reactstrap');\r\n\r\nmodule.exports = (props) => {\r\n    return (\r\n        <div>\r\n            <Button color=\"link\" className=\"btn-search text-uppercase pl-0 pr-0 border-0\">\r\n                <i className=\"fa fa-search mr-2\" aria-hidden=\"true\"/> search\r\n            </Button>\r\n        </div>\r\n        )\r\n}","import  ConnectedBasePage from './connected-base-page'\r\nimport { default as PropTypes } from 'prop-types'\r\n\r\nexport default (args = {}) => Element => class BasePage extends React.Component {\r\n    static propsType = {\r\n        page: PropTypes.string.require\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ConnectedBasePage {...args} {...this.props} component={ Element } />\r\n        )\r\n    }\r\n}","import { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { Swipeable, defineSwipe } from 'react-touch'\n\n//Actions\nimport { togglePageLoading, updateLayout } from '../actions'\n\n//Components\nimport { ConnectedBreacrumbs, RenderDelay } from '../../components'\nimport { refreshRoutePath } from '../../reducers/app-routes'\n\nconst keys = {\n  createNewPage: \"CREATE_NEW_PAGE\",\n  onDataFetch: \"ON_PAGE_FETCH_DATA\"\n}\n\nconst actions = {\n  createNewPage: (page) => ({\n    type: keys.createNewPage,\n    page\n  }),\n\n  //progress: 0 - 100.\n  onDataFetch: (page, data, progress = 100) => ({\n    type: keys.onDataFetch,\n    page,\n    data,\n    progress\n  })\n}\n\nconst initState = {\n  pages: {} //data of all page\n}\n\nconst reducer = (state = initState, action) => {\n  var newState = {};\n  switch (action.type) {\n    case keys.onDataFetch:\n      newState = $.extend(true, {}, state);\n      var pages = newState.pages;\n      var currentPageData = $.extend(pages[ action.page ], action.data);\n      currentPageData.dataFetchProgress += action.progress;\n      if (currentPageData.dataFetchProgress > 100)\n        console.error(`'dataFetchProgress' phải từ 0 đến 100, hiện tại ${currentPageData.dataFetchProgress}.`);\n      newState.pages[ action.page ] = currentPageData;\n      return newState;\n    case keys.createNewPage:\n      newState = $.extend(true, {}, state);\n      newState.pages[ action.page ] = {\n        dataFetchProgress: 0\n      };\n      return newState;\n    default:\n      return state;\n\n  }\n}\n\nclass BasePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.baseDelay = 1000;\n    const { component } = this.props;\n\n    this.swipeLeft = this.swipeLeft.bind(this);\n    this.onDataFetch = this.onDataFetch.bind(this);\n\n    this.ElementWithDelayRender = RenderDelay({\n      delay: this.baseDelay,\n      onRender: this.onPageComponentRender.bind(this)\n    })(component);\n  }\n\n  componentWillUnmount() {\n    const { togglePageLoading, updateLayout } = this.props;\n    //updateLayout();\n    togglePageLoading(true);\n  }\n\n  swipeLeft() {\n    global.openMenu();\n  }\n\n  onDataFetch(data, progress) {\n    const { onDataFetch, page } = this.props;\n    onDataFetch(page, data, progress);\n  }\n\n  onPageComponentRender() {\n    const { togglePageLoading, loadingFadeOutTime } = this.props;\n    const $element = $(ReactDOM.findDOMNode(this));\n\n    togglePageLoading(false);\n    $element.delay(this.baseDelay).fadeTo(500, 1);\n  }\n\n  componentWillMount() {\n    const { refreshRoutePath, createNewPage,\n      pages,\n      page } = this.props;\n    const pageData = pages[ page ];\n    if (!pageData)\n      createNewPage(page);\n      \n    refreshRoutePath(page)\n  }\n\n  render() {\n    const { createNewPage, component,\n      pages,\n      page, //page name of component\n      routes, match, showBreadcrumbs, location } = this.props;\n\n    const pageData = pages[ page ];\n    if (!pageData)\n      return null;\n\n    return (\n      <div className=\"base-page\" style={ { opacity: 0 } }>\n        <Swipeable onSwipeRight={ this.swipeLeft }>\n          <div className=\"swipeable\" />\n        </Swipeable>\n        {\n          showBreadcrumbs && <ConnectedBreacrumbs routes={ routes } params={ match.params } />\n        }\n        <this.ElementWithDelayRender {...pageData} location={ location } match={ match } onDataFetch={ this.onDataFetch } />\n      </div>\n    );\n  }\n};\n\nconst stateToProps = (state) => ({\n  layoutParameter: state.layout.parameters,//remove will take no effect!\n  loadingFadeOutTime: state.layout.loadingFadeOutTime,\n  pages: state.connectedBasePage.pages,\n  routes: state.routes\n});\n\nconst dispathToProps = (dispath) => (\n  bindActionCreators({\n    togglePageLoading,\n    updateLayout,\n    createNewPage: actions.createNewPage,\n    onDataFetch: actions.onDataFetch,\n    refreshRoutePath\n  }, dispath)\n);\n\nexport { actions, reducer }\n\nexport default connect(stateToProps, dispathToProps)(BasePage)","const { connect } = require('react-redux');\r\nconst svg = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"> <g class=\"anim-0\"> <circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"white\" /> </g> <g class=\"anim-1\"> <circle cx=\"50\" cy=\"50\" r=\"5\" fill=\"#ff5e7C\" /> </g> <g class=\"anim-2\"> <circle cx=\"75\" cy=\"50\" r=\"5\" fill=\"#ff5e7C\" /> <line x1=\"25\" y1=\"50\" x2=\"75\" y2=\"50\" stroke=\"#ff5e7C\" stroke-width=\"3\" /> </g> <g class=\"anim-3\"> <circle cx=\"50\" cy=\"25\" r=\"5\" fill=\"#ff5e7C\" /> <line x1=\"50\" y1=\"25\" x2=\"25\" y2=\"75\" stroke=\"#ff5e7C\" stroke-width=\"3\" /> <line x1=\"50\" y1=\"25\" x2=\"75\" y2=\"75\" stroke=\"#ff5e7C\" stroke-width=\"3\" /> </g> <g class=\"anim-4\"> <circle cx=\"75\" cy=\"25\" r=\"5\" fill=\"#ff5e7C\" /> <line x1=\"75\" y1=\"25\" x2=\"25\" y2=\"25\" stroke=\"#ff5e7C\" stroke-width=\"3\" /> </g></svg>';\r\n\r\nclass Loading extends React.Component {\r\n    componentDidUpdate() {\r\n        const { isVisible } = this.props;\r\n        var $element = $(ReactDOM.findDOMNode(this));\r\n\r\n        if(isVisible)\r\n            $element.fadeTo(500, 1, function(){\r\n            });   \r\n        else\r\n            $element.fadeTo(500, 0, function(){\r\n                $element.hide();\r\n            });   \r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"loading\" dangerouslySetInnerHTML={{ __html: svg }} />\r\n        )\r\n    }\r\n}\r\n\r\nconst stateToProps = (state) => ({\r\n    isVisible: state.layout.isPageLoadingVisible\r\n})\r\n\r\nmodule.exports = connect(stateToProps)(Loading);","const $ = require('jquery');\r\nconst { NavLink } = require('react-router-dom');\r\nconst { connect } = require('react-redux');\r\nconst PropTypes = require('prop-types');\r\n\r\nimport { DEFAULT_MENU } from '../../reducers/app-routes'\r\n\r\nclass Menu extends React.Component {\r\n    render() {\r\n        const { menuItems } = this.props;\r\n        return (\r\n            <nav className=\"left outer-nav vertical\">\r\n                {\r\n                    menuItems.map((menuItem, index) => {\r\n                        return (\r\n                            <NavLink key={ index } exact={ menuItem.url == '/' } to={ menuItem.url } activeClassName=\"current\">\r\n                                { menuItem.label }\r\n                            </NavLink>\r\n                        )\r\n                    })\r\n                }\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nMenu.propTypes = {\r\n    menuItems: PropTypes.array.isRequired\r\n}\r\n\r\nconst stateToProps = (state) => ({\r\n    menuItems: state.appRouter.menus[ DEFAULT_MENU ]\r\n});\r\n\r\nmodule.exports = connect(stateToProps, null, null, { pure: false })(Menu);","import { default as enUS } from './_localization/en-us'\r\n\r\nconst strings = {\r\n    'vi-VN': {\r\n    },\r\n    'en-US': enUS\r\n};\r\n\r\nexport default class {\r\n    constructor() {\r\n        this.strings = strings;\r\n    }\r\n\r\n    setLanguage(language) {\r\n        this.language = language;\r\n    }\r\n\r\n    getString(string) {\r\n        return this.strings[ this.language ][ string ] || string;\r\n    }\r\n}","export default {\r\n    'Tìm kiếm': \"Search\",\r\n    'Công trình': \"Construction\",\r\n    'Dự án': \"Project\",\r\n    'Khách<br/>sạn': \"Hotel\",\r\n    'Nhà ở': \"Home\",\r\n    'Căn<br/>hộ': \"Department\"\r\n}","import { default as Title } from './components/section-title'\r\nimport { default as PageArticle } from './components/page-article'\r\nimport { default as Image } from './components/image'\r\nimport { default as RenderDelay } from './components/_commons/delay-render'\r\n\r\nimport { default as ConnectedBreacrumbs } from './components/connected-breacrumbs'\r\nimport { default as Sidebar } from './components/sidebar'\r\nimport { default as CategoryMenu } from './components/category-menu'\r\nimport { default as PageItem } from './components/page-item'\r\nimport { default as SidebarMenu } from './components/sidebar-menu'\r\nimport { default as SidebarWidget } from './components/sidebar-widget'\r\nimport { default as GoogleMap } from './components/gmap/google-map'\r\nimport { default as Pagination } from './components/pagination'\r\nimport { default as SideBarToggleStart } from './components/sidebar-toggle-start'\r\n\r\nexport {\r\n    RenderDelay,\r\n    Title,\r\n    PageArticle,\r\n    Image,\r\n    ConnectedBreacrumbs,\r\n    Sidebar,\r\n    CategoryMenu,\r\n    PageItem,\r\n    SidebarMenu,\r\n    SidebarWidget,\r\n    GoogleMap,\r\n    Pagination,\r\n    SideBarToggleStart\r\n}","const RenderDelay = (args = {}) => (Element) => class Component extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { ready: true };\r\n  }\r\n\r\n  componentWillMount() {\r\n    const { delay, onRender } = args;\r\n    const d = parseInt(delay, 10);\r\n    if (d && d > 0) {\r\n      this.setState({ ready: false });\r\n      this.timeout = setTimeout(() => {\r\n        this.setState({ ready: true });\r\n        if (onRender && typeof onRender === 'function') {\r\n          onRender();\r\n        }\r\n      }, delay);\r\n    } else {\r\n      this.setState({ ready: true });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.state.ready) {\r\n      return (\r\n        <Element {...this.props} />\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default RenderDelay","import { Route, Switch, Redirect } from 'react-router'\r\nimport { ConnectedRouter, } from 'react-router-redux'\r\nimport { connect } from 'react-redux'\r\n\r\nconst DuAn = require('../../../du-an/index')\r\n\r\nconst renderRoute = (route) => {\r\n    const { name, childRoutes, redirectToChild, path, component } = route\r\n\r\n    if (redirectToChild != null || redirectToChild != undefined)\r\n        return (\r\n            <Switch key={ name }>\r\n                {\r\n                    childRoutes.map((child, index) => {\r\n                        if (!child.defaultLabel)\r\n                            child.defaultLabel = route.defaultLabel\r\n\r\n                        if (String(child.path).startsWith('/:'))\r\n                            child.path = path + child.path\r\n\r\n                        if (!child.component)\r\n                            child.component = component\r\n                            \r\n                        return renderRoute(child)\r\n                    })\r\n                }\r\n                <Redirect from={ path } to={ path + childRoutes[ redirectToChild ].defaultLocation } />\r\n            </Switch>\r\n        )\r\n\r\n    return <Route key={ name } {...route} />\r\n}\r\n\r\nconst renderRoutes = ({ path, exact, component, childRoutes }) => {\r\n    const routeComponents = childRoutes.map(renderRoute);\r\n\r\n    //Root route\r\n    routeComponents.unshift(<Route exact={ exact } key={ path } path={ path } component={ component } />)\r\n\r\n    return routeComponents;\r\n}\r\n\r\nconst ExtendedConnectedRouter = ({ routes, history, wrapper }) => {\r\n    const Wrapper = wrapper\r\n    return (\r\n        <ConnectedRouter history={ history }>\r\n            <Wrapper>\r\n                {\r\n                    routes && renderRoutes(routes)\r\n                }\r\n            </Wrapper>\r\n        </ConnectedRouter>\r\n    )\r\n}\r\n\r\nconst stateToProps = (state) => ({\r\n    routes: state.appRouter.routes\r\n})\r\n\r\nexport default connect(stateToProps)(ExtendedConnectedRouter)","import listToTree from 'list-to-tree'\r\nimport { Collapse } from 'reactstrap'\r\nimport classNames from 'classnames'\r\n\r\nclass CategoryMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        const { categories, openListByDefault } = props\r\n\r\n        const tree = new listToTree(categories, { key_parent: 'parentId', key_child: 'children' }).GetTree()\r\n\r\n        var collapse = {}\r\n\r\n        for(var index in categories){\r\n            collapse[categories[index].name] = openListByDefault\r\n        }\r\n\r\n        this.state = {\r\n            collapse,\r\n            tree\r\n        }\r\n\r\n        this.renderCategories = this.renderCategories.bind(this)\r\n        this.renderCategory = this.renderCategory.bind(this)\r\n    }\r\n\r\n    renderCategories(categoryItems) {\r\n        return (\r\n            <ul className=\"category-menu-dropdown\">\r\n                {\r\n                    categoryItems.map((categoryItem, index) => {\r\n                        return this.renderCategory(categoryItem)\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    renderCategory({ title, id, name, children }, className) {\r\n        const { onDataFetch, currentCategory } = this.props\r\n\r\n        return (\r\n            <li id={ id && `category-${id}` } data-name={ name } className={classNames(\"category-menu-item\", className, {'current': currentCategory && currentCategory.id === id })} >\r\n                <a href=\"#\" className=\"all category-menu-item-link\" onClick={ (e) => { \r\n                    e.preventDefault();\r\n                    onDataFetch({currentCategory: { title, id, name }}, 0) } }>\r\n                    { title }\r\n                </a>\r\n                {\r\n                                        children && (\r\n                        <span className=\"chevron\" onClick={() => { this.toogle(name) }}>\r\n                            <i className=\"fa fa-angle-down\" aria-hidden=\"true\" />\r\n                        </span>\r\n                    )\r\n                }\r\n                {\r\n                    children && (\r\n                        <Collapse isOpen={ this.state.collapse[ name ] }>\r\n                            {this.renderCategories(children)}\r\n                        </Collapse>\r\n                    )\r\n                }\r\n            </li>\r\n        )\r\n    }\r\n\r\n    toogle(name) {\r\n        const { collapse } = this.state;\r\n        this.setState({collapse: $.extend(true, {}, collapse, {[name]: !collapse[name]})})\r\n    }\r\n\r\n    render() {\r\n        const  {currentCategory} = this.props;\r\n        const { tree } = this.state;\r\n        return (\r\n            <section className=\"category-menu\">\r\n                <ul className=\"category-menu-list d-none d-lg-block\">\r\n                    { this.renderCategory({ title: localizationString.getString('Tất cả') }, !currentCategory && 'current') }\r\n                    {\r\n                        tree && tree.map((item) => {\r\n                                return this.renderCategory(item)\r\n                        })\r\n                    }\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nCategoryMenu.defaultProps = {\r\n    categories: [],\r\n    openListByDefault: true\r\n}\r\n\r\nexport default CategoryMenu","import { Container } from 'reactstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\n\r\nconst ConnectedBreadcrumbs = (props) => {\r\n    const { routes, params } = props;\r\n    if (routes)\r\n        return (\r\n            <Container className=\"mb-lg-4\">\r\n                <div id=\"breadcrumbs\" className=\"breadcrumbs\">\r\n                    {\r\n                        routes.map((route, index) => {\r\n                            const isLast = (route.path === routes[ routes.length -1 ].path)\r\n\r\n                            return (\r\n                                <span key={index} className=\"\">\r\n                                    {\r\n                                        !isLast ? <Link to={ route.path }>{route.label}</Link>\r\n                                            : <a>{route.label}</a>\r\n                                    }\r\n                                </span>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </Container>\r\n        )\r\n    else\r\n        return null\r\n}\r\n\r\nConnectedBreadcrumbs.defaultProps = {\r\n    routes: []\r\n}\r\n\r\nconst stateToProps = (state) => ({\r\n    routes: state.appRouter.routePath\r\n});\r\n\r\n\r\nexport default connect(stateToProps)(ConnectedBreadcrumbs)","const { Link } = require('react-router-dom');\r\n\r\nclass DuAn extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.renderLink = this.renderLink.bind(this);\r\n    }\r\n\r\n    renderLink(title) {\r\n        return(\r\n            <Link to=\"/du-an\"><span>{title}</span></Link>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { data: { thumbnailUrl, title} } = this.props;\r\n\r\n        return (\r\n            <div data-aos=\"zoom-in-up\">\r\n                <div className=\"page-item-thumbnail\">\r\n                    <img className=\"w-100\" src={`/${thumbnailUrl}`}/>\r\n                    <div className=\"overlay\"/>\r\n                    {this.renderLink(localizationString.getString(\"Chi tiết\"))}\r\n                </div>\r\n                <div className=\"page-item-title\">\r\n                    {this.renderLink(title)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nmodule.exports = DuAn;","/*\r\n * marker visual parameters\r\n * image param is more prior than imageClass if both defined\r\n */\r\n\r\nconst markerDescriptions = [{\r\n    size: { width: 33, height: 51 },\r\n    origin: { x: 15 / 33, y: 1 },\r\n    withText: true,\r\n    // image: require('icons/map_icons/map_icon_text_red.svg')\r\n    imageClass: 'map_icon_text_red'\r\n}];\r\n\r\nexport default markerDescriptions;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { default as PropTypes } from 'prop-types'\r\n\r\nimport controllable from 'react-controllables';\r\nimport shouldPureComponentUpdate from 'react-pure-render/function';\r\n\r\nimport GoogleMap from 'google-map-react';\r\nimport Marker, { K_SCALE_NORMAL } from './marker.jsx';\r\n\r\nimport { getScale, getRealFromTo } from './helpers/calc-markers-visibility.js';\r\nimport markerDescriptions from './constants/marker-descriptions.js';\r\nimport { customDistanceToMouse } from './helpers/custom-distance.js';\r\n\r\nconst K_MARGIN_TOP = 30;\r\nconst K_MARGIN_RIGHT = 30;\r\nconst K_MARGIN_BOTTOM = 30;\r\nconst K_MARGIN_LEFT = 30;\r\n\r\nconst K_HOVER_DISTANCE = 30;\r\n\r\n@controllable([ 'center', 'zoom', 'markers' ])\r\nclass MainMapBlock extends Component {\r\n    static propTypes = {\r\n        onCenterChange: PropTypes.func, // @controllable generated fn\r\n        onZoomChange: PropTypes.func, // @controllable generated fn\r\n        onBoundsChange: PropTypes.func,\r\n        onMarkerHover: PropTypes.func,\r\n        onChildClick: PropTypes.func,\r\n        center: PropTypes.any,\r\n        zoom: PropTypes.number,\r\n        markers: PropTypes.any,\r\n        visibleRowFirst: PropTypes.number,\r\n        visibleRowLast: PropTypes.number,\r\n        maxVisibleRows: PropTypes.number,\r\n        hoveredRowIndex: PropTypes.number,\r\n        openBallonIndex: PropTypes.number,\r\n    }\r\n\r\n    static defaultProps = {\r\n        center: [ 15.866913899999986, 104.1218629 ],\r\n        zoom: 5,\r\n        options: {\r\n            styles: [ { \"featureType\": \"administrative\", \"elementType\": \"labels.text.fill\", \"stylers\": [ { \"color\": \"#444444\" }] }, { \"featureType\": \"landscape\", \"elementType\": \"all\", \"stylers\": [ { \"color\": \"#f2f2f2\" }] }, { \"featureType\": \"poi\", \"elementType\": \"all\", \"stylers\": [ { \"visibility\": \"off\" }] }, { \"featureType\": \"road\", \"elementType\": \"all\", \"stylers\": [ { \"saturation\": -100 }, { \"lightness\": 45 }] }, { \"featureType\": \"road.highway\", \"elementType\": \"all\", \"stylers\": [ { \"visibility\": \"simplified\" }] }, { \"featureType\": \"road.arterial\", \"elementType\": \"labels.icon\", \"stylers\": [ { \"visibility\": \"off\" }] }, { \"featureType\": \"transit\", \"elementType\": \"all\", \"stylers\": [ { \"visibility\": \"off\" }] }, { \"featureType\": \"water\", \"elementType\": \"all\", \"stylers\": [ { \"color\": \"#878787\" }, { \"visibility\": \"on\" }] }, { \"featureType\": \"water\", \"elementType\": \"geometry\", \"stylers\": [ { \"invert_lightness\": true }, { \"weight\": \"3.37\" }, { \"gamma\": \"5\" }, { \"saturation\": \"0\" }, { \"lightness\": \"0\" }] }]\r\n        },\r\n        visibleRowFirst: -1,\r\n        visibleRowLast: -1,\r\n        hoveredRowIndex: -1,\r\n        maxVisibleRows: 10,\r\n        markers: []\r\n    }\r\n\r\n    shouldComponentUpdate = shouldPureComponentUpdate;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        const { center, zoom } = this.props\r\n        if (nextProps.center != center || nextProps.zoom != zoom) {\r\n            this.props.onCenterChange(center);\r\n            this.props.onZoomChange(zoom);\r\n        }\r\n    }\r\n\r\n    _onBoundsChange = ({ center, zoom, bounds, marginBounds }) => {\r\n    }\r\n\r\n    _onChildClick = (key, childProps) => {\r\n        const markerId = childProps.marker.id;\r\n        const index = this.props.markers.findIndex(m => m.id === markerId);\r\n        var currentMarker = this.props.markers[ index ];\r\n        \r\n        this.props.onMarkerClick(currentMarker)\r\n    }\r\n\r\n    _onChildMouseEnter = (key, childProps) => {\r\n        const markerId = childProps.marker.id;\r\n        const index = this.props.markers.findIndex(m => m.id === markerId);\r\n        if (this.props.onMarkerHover) {\r\n            this.props.onMarkerHover(index);\r\n        }\r\n    }\r\n\r\n    _onChildMouseLeave = (/* key, childProps */) => {\r\n        if (this.props.onMarkerHover) {\r\n            this.props.onMarkerHover(-1);\r\n        }\r\n    }\r\n\r\n    _onBalloonCloseClick = () => {\r\n        if (this.props.onChildClick) {\r\n            this.props.onChildClick(-1);\r\n        }\r\n    }\r\n\r\n    _distanceToMouse = customDistanceToMouse;\r\n\r\n    render() {\r\n\r\n        const Markers = this.props.markers &&\r\n            this.props.markers.map((marker, index) => (\r\n                <Marker\r\n                    // required props\r\n                    key={ marker.id }\r\n                    lat={ marker.lat }\r\n                    lng={ marker.lng }\r\n                    // any user props\r\n                    showBallon={ marker.id === this.props.showBalloonForMarker }\r\n                    onCloseClick={ this._onBalloonCloseClick }\r\n                    renderMarkerContent={ this.props.renderMarkerContent }\r\n\r\n                    scale={  K_SCALE_NORMAL }\r\n                    {...markerDescriptions[ 0 ]}\r\n                    marker={ marker } />\r\n            ));\r\n\r\n        return (\r\n            <GoogleMap\r\n                bootstrapURLKeys={ { key: \"AIzaSyBB5V34f3crBWyutuwFCy73IzRCdIwqUrI\" } }\r\n                center={ this.props.center }\r\n                zoom={ this.props.zoom }\r\n                options={ this.props.options }\r\n                onChange={ this._onBoundsChange }\r\n                onChildClick={ this._onChildClick }\r\n                onChildMouseEnter={ this._onChildMouseEnter }\r\n                onChildMouseLeave={ this._onChildMouseLeave }\r\n                margin={ [ K_MARGIN_TOP, K_MARGIN_RIGHT, K_MARGIN_BOTTOM, K_MARGIN_LEFT ] }\r\n                hoverDistance={ K_HOVER_DISTANCE }\r\n                distanceToMouse={ this._distanceToMouse }\r\n            >\r\n                { Markers }\r\n            </GoogleMap>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default MainMapBlock\r\n","const K_MAX_BALLOON_HEIGHT = 120;\r\n\r\nexport function getHintBaloonVerticalPosClass(y, mapHeight, balloonHeight) {\r\n    balloonHeight = balloonHeight || K_MAX_BALLOON_HEIGHT\r\n\r\n    return y > balloonHeight ? 'hint--top' : 'hint--bottom';\r\n}\r\n\r\nexport function getHintBaloonHorizontalPosStyle(x, markerWidth, markerOffset, mapWidth) {\r\n    const K_BALLOON_WIDTH_BASE = 250;\r\n    // offset from map side\r\n    const K_BALLOON_MAP_OFFSET = 10;\r\n    // balloon with not more than map width\r\n    const K_BALLOON_WIDTH = Math.min(K_BALLOON_WIDTH_BASE, mapWidth - 2 * K_BALLOON_MAP_OFFSET);\r\n    // default ballon offset from arrow center i want\r\n    const K_BALLOON_DEFAULT_OFFSET = K_BALLOON_WIDTH * 0.15;\r\n    // from corner\r\n    const offset = -K_BALLOON_DEFAULT_OFFSET + markerWidth * 0.5;\r\n    // overflow in px (marker assymetric)\r\n    const leftX = x + offset - markerWidth * markerOffset;\r\n    const rightX = leftX + K_BALLOON_WIDTH;\r\n    // recalc if overflow\r\n    const mapOffset = offset + Math.min(0, (mapWidth - K_BALLOON_MAP_OFFSET) - rightX) + Math.max(0, K_BALLOON_MAP_OFFSET - leftX);\r\n\r\n    const K_BALLOON_WIDTH_STYLE = {\r\n        width: `${K_BALLOON_WIDTH}px`,\r\n        left: `${mapOffset}px`,\r\n        marginLeft: '0px'\r\n    };\r\n    return K_BALLOON_WIDTH_STYLE;\r\n}\r\n\r\nexport function getHintBottomOffsetClass(markerWidth, markerOffset) {\r\n    const K_HINT_ARROW_WIDTH = 12;\r\n    const offset = Math.round(-(markerWidth / 2 + K_HINT_ARROW_WIDTH / 2 - markerOffset * markerWidth));\r\n    if (__DEV__) {\r\n        if (offset < -40 || offset > 40) {\r\n            console.error('HintBottomOffset is out of range, extend range at sass/markers/map_marker.sass'); // eslint-disable-line no-console\r\n        }\r\n    }\r\n    // classes generated at sass/markers/map_marker.sass\r\n    return 'map-marker--hint-bottom-delta-' + offset;\r\n}","// import {K_SCALE_NORMAL} from 'components/markers/map_marker.jsx';\r\n// import invariant from 'fixed-data-table-ice/internal/invariant.js';\r\n\r\n// {l: 10, scale: 0.3}, {l: 5, scale: 0.4} - означает\r\n// 10 элементов размера 0.3, потом 5 размера 0.4, потом те что видны в табличке обычного размера\r\n// потом снова потом 5 размера 0.4, и 10 элементов размера 0.3\r\n// если поставить пусто то на карте будут видны тока те что на экране\r\nconst K_SCALE_SMALL = 0.3;\r\nconst K_SCALE_MEDIUM = 0.45;\r\nconst K_BEFORE_AFTER_SCALES = [{ l: 15, scale: K_SCALE_SMALL }, { l: 10, scale: K_SCALE_MEDIUM }];\r\nconst K_SCALES_SUM = K_BEFORE_AFTER_SCALES.reduce((sum, el) => el.l + sum, 0);\r\n\r\n\r\nexport function getScale(rowIndex, rowFrom, rowTo, K_SCALE_NORMAL) {\r\n    if (rowIndex >= rowFrom && rowIndex <= rowTo) {\r\n        return K_SCALE_NORMAL;\r\n    }\r\n\r\n    if (K_BEFORE_AFTER_SCALES.length) {\r\n        if (rowIndex < rowFrom) {\r\n            let deltaS = rowFrom;\r\n            for (let index = K_BEFORE_AFTER_SCALES.length - 1; index >= 0; --index) {\r\n                deltaS -= K_BEFORE_AFTER_SCALES[index].l;\r\n                if (rowIndex >= deltaS) {\r\n                    return K_BEFORE_AFTER_SCALES[index].scale;\r\n                }\r\n            }\r\n\r\n            // yes, the code can be here (dirty calculus)\r\n            return K_BEFORE_AFTER_SCALES[0].scale;\r\n        }\r\n\r\n        if (rowIndex > rowTo) {\r\n            let deltaS = rowTo;\r\n            for (let index = K_BEFORE_AFTER_SCALES.length - 1; index >= 0; --index) {\r\n                deltaS += K_BEFORE_AFTER_SCALES[index].l;\r\n                if (rowIndex <= deltaS) {\r\n                    return K_BEFORE_AFTER_SCALES[index].scale;\r\n                }\r\n            }\r\n\r\n            // yes, the code can be here (dirty calculus)\r\n            return K_BEFORE_AFTER_SCALES[0].scale;\r\n        }\r\n    }\r\n    return K_SCALE_NORMAL;\r\n}\r\n\r\n// this calculations is not precise (dirty)\r\nfunction _getRealFromTo(rowFrom, rowTo, maxVisibleRows, totalSize) {\r\n    let addFrom = ((rowFrom + maxVisibleRows + K_SCALES_SUM) > (totalSize - 1)) ? ((rowFrom + maxVisibleRows + K_SCALES_SUM) - (totalSize - 1)) : 0;\r\n\r\n    const dadd = K_SCALES_SUM - rowFrom;\r\n    let addTo = dadd >= 0 ? dadd : 0;\r\n\r\n    return {\r\n        rowFrom: Math.max(0, rowFrom - K_SCALES_SUM - addFrom),\r\n        rowTo: Math.min(totalSize - 1, rowFrom + maxVisibleRows + K_SCALES_SUM + addTo)\r\n    };\r\n}\r\n\r\nexport function getRealFromTo(rowFrom, rowTo, maxVisibleRows, totalSize) {\r\n    const current = _getRealFromTo(rowFrom, rowTo, maxVisibleRows, totalSize);\r\n\r\n    const result = {\r\n        rowFrom: current.rowFrom,\r\n        rowTo: current.rowTo\r\n    };\r\n\r\n    return result;\r\n}","export function customDistanceToMouse(pt, mousePos, markerProps) {\r\n    const K_SCALE_NORMAL = 0.65;\r\n\r\n    const K_MARKER_HEIGHT = 60;\r\n    // marker is more tall at top, so calc distance to some point at marker top\r\n    const K_MARKER_WEIGHT_PT = K_MARKER_HEIGHT * 0.7;\r\n    // distance to markers depends on scale so hover on big markers is more probable\r\n    const scale = markerProps.scale;\r\n    const x = pt.x;\r\n    const y = pt.y - K_MARKER_WEIGHT_PT * scale;\r\n\r\n    const scaleNormalized = Math.min(scale / K_SCALE_NORMAL, 1);\r\n    const K_MIN_DIST_MIN_KOEF = 0.6;\r\n\r\n    const distKoef = 1 + scaleNormalized * (K_MIN_DIST_MIN_KOEF - 1);\r\n    return distKoef * Math.sqrt((x - mousePos.x) * (x - mousePos.x) + (y - mousePos.y) * (y - mousePos.y));\r\n}","export function getMarkerHolderStyle(size, origin) {\r\n  const left = -size.width * origin.x;\r\n  const top = -size.height * origin.y;\r\n  return {\r\n    position: 'absolute',\r\n    width: size.width,\r\n    height: size.height,\r\n    left: left,\r\n    top: top,\r\n    cursor: 'pointer'\r\n  };\r\n}\r\n\r\nexport function getMarkerStyle(size, origin) {\r\n  const sizeOriginX = size.width * origin.x;\r\n  const sizeOriginY = size.height * origin.y;\r\n\r\n  return {\r\n    position: 'absolute',\r\n    width: size.width,\r\n    height: size.height,\r\n    left: 0,\r\n    top: 0,\r\n    willChange: 'transform', // it looks like this setting make firefox random marker movements smaller\r\n    backgroundSize: `${size.width}px ${size.height}px`,\r\n    backgroundRepeat: 'no-repeat',\r\n    // transition: 'transform 0.25s ease',\r\n    transition: 'transform 0.25s cubic-bezier(0.485, 1.650, 0.545, 0.835)',\r\n    WebkitTransition: '-webkit-transform 0.25s cubic-bezier(0.485, 1.650, 0.545, 0.835)',\r\n    transformOrigin: `${sizeOriginX}px ${sizeOriginY}px`,\r\n    WebkitTransformOrigin: `${sizeOriginX}px ${sizeOriginY}px`\r\n  };\r\n}\r\n\r\nconst textStyle_ = {\r\n  width: '100%',\r\n  textAlign: 'center',\r\n  marginTop: 10,\r\n  fontWeight: 'bold',\r\n  fontSize: '18px',\r\n  color: 'black'\r\n};\r\n\r\nexport function getMarkerTextStyle() {\r\n  return textStyle_;\r\n}","import React, { Component } from 'react'\r\nimport { default as PropTypes } from 'prop-types'\r\nimport cx from 'classnames';\r\n\r\nimport controllable from 'react-controllables';\r\n\r\nimport shouldPureComponentUpdate from 'react-pure-render/function';\r\nimport { getHintBottomOffsetClass, getHintBaloonVerticalPosClass, getHintBaloonHorizontalPosStyle } from './helpers/balloon-pos.js';\r\nimport { getMarkerHolderStyle, getMarkerStyle, getMarkerTextStyle } from './helpers/marker-styles.js';\r\n\r\nconst K_HINT_HTML_DEFAULT_Z_INDEX = 1000000;\r\nconst K_SCALE_HOVER = 1;\r\nconst K_SCALE_TABLE_HOVER = 1;\r\nconst K_SCALE_NORMAL = 0.65;\r\nconst K_MIN_CONTRAST = 0.4;\r\n\r\n\r\nfunction calcMarkerMarkerStyle(scale, zIndexStyle, markerStyle, imageStyle) {\r\n    const contrast = K_MIN_CONTRAST + (1 - K_MIN_CONTRAST) * Math.min(scale / K_SCALE_NORMAL, 1);\r\n\r\n    return {\r\n        transform: `scale(${scale} , ${scale})`,\r\n        WebkitTransform: `scale(${scale} , ${scale})`,\r\n        filter: `contrast(${contrast})`,\r\n        WebkitFilter: `contrast(${contrast})`,\r\n        ...markerStyle,\r\n        ...zIndexStyle,\r\n        ...imageStyle\r\n    };\r\n}\r\n\r\nfunction calcMarkerTextStyle(scale, markerTextStyle) {\r\n    const K_MAX_COLOR_VALUE = 0;\r\n    const K_MIN_COLOR_VALUE = 8;\r\n    const colorV = Math.ceil(K_MIN_COLOR_VALUE + (K_MAX_COLOR_VALUE - K_MIN_COLOR_VALUE) * Math.min(scale / K_SCALE_NORMAL, 1));\r\n    const colorHex = colorV.toString(16);\r\n    const colorHTML = `#${colorHex}${colorHex}${colorHex}`;\r\n\r\n    return {\r\n        ...markerTextStyle,\r\n        color: colorHTML\r\n    };\r\n}\r\n\r\nexport { K_SCALE_NORMAL };\r\n\r\n@controllable([ 'hoverState', 'showBallonState' ])\r\nexport default class MapMarker extends Component {\r\n    static propTypes = {\r\n        $hover: PropTypes.bool,\r\n        $dimensionKey: PropTypes.any,\r\n        $getDimensions: PropTypes.func,\r\n        $geoService: PropTypes.any,\r\n        $onMouseAllow: PropTypes.func,\r\n\r\n        marker: PropTypes.any,\r\n        hoveredAtTable: PropTypes.bool,\r\n        scale: PropTypes.number,\r\n        showBallon: PropTypes.bool,\r\n        onCloseClick: PropTypes.func,\r\n        showBallonState: PropTypes.bool.isRequired,\r\n        onShowBallonStateChange: PropTypes.func.isRequired,\r\n\r\n        // animation helpers\r\n        hoverState: PropTypes.bool.isRequired,\r\n        onHoverStateChange: PropTypes.func.isRequired,\r\n\r\n        size: PropTypes.any,\r\n        origin: PropTypes.any,\r\n        imageClass: PropTypes.string,\r\n        image: PropTypes.string,\r\n        withText: PropTypes.bool,\r\n        hintType: PropTypes.string\r\n    };\r\n\r\n    static defaultProps = {\r\n        scale: K_SCALE_NORMAL,\r\n        hoverState: false,\r\n        showBallonState: false,\r\n        withText: false,\r\n        size: { width: 62, height: 60 },\r\n        origin: { x: 15 / 62, y: 1 },\r\n        imageClass: 'map-marker__marker--big',\r\n        hintType: 'hint--info'\r\n    };\r\n\r\n    shouldComponentUpdate = shouldPureComponentUpdate;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.alive = true;\r\n    }\r\n\r\n    _onShowBallonStateChange = (...args) => {\r\n        if (!this.alive) return;\r\n        this.props.onShowBallonStateChange(...args);\r\n    }\r\n\r\n    _onHoverStateChange = (...args) => {\r\n        if (!this.alive) return;\r\n        this.props.onHoverStateChange(...args);\r\n    }\r\n\r\n    _onMouseEnterContent = (/*e*/) => {\r\n        this.props.$onMouseAllow(false); // disable mouse move hovers\r\n    }\r\n\r\n    _onMouseLeaveContent = (/*e*/) => {\r\n        this.props.$onMouseAllow(true); // enable mouse move hovers\r\n    }\r\n\r\n    _onCloseClick = () => {\r\n        if (this.props.onCloseClick) {\r\n            this.props.onCloseClick();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // if (this.props.onCloseClick) {\r\n        //   this.props.onCloseClick();\r\n        // }\r\n        this.alive = false;\r\n    }\r\n\r\n    // no optimizations at all\r\n    render() {\r\n        let scale = this.props.$hover || this.props.showBallon ? K_SCALE_HOVER : K_SCALE_NORMAL\r\n        scale = this.props.hoveredAtTable ? K_SCALE_TABLE_HOVER : scale;\r\n\r\n        const markerHolderStyle = getMarkerHolderStyle(this.props.size, this.props.origin);\r\n        const markerStyle = getMarkerStyle(this.props.size, this.props.origin);\r\n\r\n        const zIndexStyle = {\r\n            zIndex: Math.round(scale * 10000) - (this.props.showBallon ? 20 : 0) + (this.props.$hover ? K_HINT_HTML_DEFAULT_Z_INDEX : 0) // balloon\r\n        };\r\n\r\n        const textStyleDef = getMarkerTextStyle();\r\n        const textStyle = calcMarkerTextStyle(scale, textStyleDef);\r\n\r\n        const showHint = this.props.hoverState || this.props.showBallonState; // || this.props.hoveredAtTable;\r\n\r\n        // baloon position calc\r\n        const mapWidth = this.props.$geoService.getWidth();\r\n        const mapHeight = this.props.$geoService.getHeight();\r\n        const markerDim = this.props.$getDimensions(this.props.$dimensionKey);\r\n\r\n        const hintBaloonHorizontalPosStyle = getHintBaloonHorizontalPosStyle(markerDim.x, this.props.size.width, this.props.origin.x, mapWidth);\r\n        const hintBaloonVerticalPosClass = getHintBaloonVerticalPosClass(markerDim.y, mapHeight, this.props.marker.height);\r\n\r\n        const hintBalloonBottomOffsetClass = getHintBottomOffsetClass(this.props.size.width, this.props.origin.x);\r\n\r\n        // set baloon position at first and then animate (it must be some lib for react animations)\r\n        const noTransClass = this.props.$hover === true && this.props.hoverState !== true ? 'hint--notrans' : '';\r\n        const noTransBalloonClass = this.props.showBallon === true && this.props.showBallonState !== true ? 'hint--notrans' : '';\r\n\r\n        const imageClass = this.props.image ? '' : this.props.imageClass;\r\n        const imageStyle = this.props.image ? {\r\n            backgroundImage: `url(${this.props.image})`\r\n        } : null;\r\n\r\n        const styleMarkerMarker = calcMarkerMarkerStyle(scale, zIndexStyle, markerStyle, imageStyle);\r\n\r\n        // css hints library https://github.com/istarkov/html-hint\r\n        return (\r\n            <div style={ markerHolderStyle }\r\n                    className={ cx('map-marker hint hint--html',\r\n                    this.props.hintType,\r\n                    hintBalloonBottomOffsetClass,\r\n                    noTransClass, noTransBalloonClass, hintBaloonVerticalPosClass,\r\n                    this.props.showBallon ? 'hint--balloon' : '',\r\n                    showHint ? 'hint--always' : 'hint--hidden') }>\r\n                <div\r\n                    style={ styleMarkerMarker }\r\n                    className={ cx('map-marker__marker', imageClass) }>\r\n                    { this.props.withText ?\r\n                        <div style={ textStyle }>\r\n                            { this.props.marker.number }\r\n                        </div>\r\n                        :\r\n                        <div /> }\r\n                </div>\r\n                <div style={ hintBaloonHorizontalPosStyle } className={ cx('hint__content map-marker-hint', this.props.showBallon ? '' : 'noevents') }\r\n                    onMouseEnter={ this._onMouseEnterContent }\r\n                    onMouseLeave={ this._onMouseLeaveContent }>\r\n                    { this.props.renderMarkerContent(this.props.marker) }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const K_TRANS_DELAY = 30;\r\n\r\n        if (prevProps.$hover !== this.props.$hover) {\r\n            setTimeout(() => this._onHoverStateChange(this.props.$hover), K_TRANS_DELAY);\r\n        }\r\n\r\n        if (prevProps.showBallon !== this.props.showBallon) {\r\n            setTimeout(() => this._onShowBallonStateChange(this.props.showBallon), K_TRANS_DELAY);\r\n        }\r\n    }\r\n}","const Image = (props) => {\r\n    const { url, title, description, className } = props;\r\n\r\n    const src = String(url).startsWith('uploads') ? '/' + url : url\r\n\r\n    return (\r\n        <img className={`w-100 ${className}`} src={src} title={title && title} alt={description && description}/>\r\n    );\r\n}\r\n\r\nexport default Image","const classnames = require('classNames');\r\nconst { Container, Row } = require('reactstrap');\r\nconst Title = require('./section-title');\r\nconst Image = require('./image');\r\n\r\nconst renderArticle = (props) => {\r\n    const { className, thumbnail, title, content } = props;\r\n    return (\r\n        <article className={classnames(className)}>\r\n            <Container fluid className=\"mb-5\">\r\n                <Row>\r\n                    <Image className=\"h-100\" {...thumbnail} />\r\n                </Row>\r\n            </Container>\r\n            <Container>\r\n                <Title>{title}</Title>\r\n                <div className=\"ml-3 mr-3 ml-lg-0 mr-lg-0\" dangerouslySetInnerHTML={{ __html: content }} />\r\n            </Container>\r\n        </article>\r\n    );\r\n}\r\n\r\nexport default renderArticle;","const { Link } = require('react-router-dom');\r\nconst Image = require('./image')\r\n\r\nclass PageItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.renderLink = this.renderLink.bind(this);\r\n    }\r\n\r\n    renderLink(title) {\r\n        const { path } = this.props\r\n        return (\r\n            <Link to={ path }><span>{ title }</span></Link>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { data: { thumbnailUrl, title }, extraText } = this.props;\r\n\r\n        return (\r\n            <div className=\"page-item-wrapper\">\r\n                <div className=\"page-item-thumbnail\">\r\n                    <Image className=\"w-100\" url={ thumbnailUrl } description={ title } />\r\n                    <div className=\"overlay\" />\r\n                    { this.renderLink(localizationString.getString(\"Chi tiết\")) }\r\n                </div>\r\n                <div className=\"page-item-title\">\r\n                    { this.renderLink(title) }\r\n                    <span className=\"extra-text\">\r\n                        { extraText }\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nPageItem.defautProps = {\r\n    basePath: '/',\r\n    extraText: '',\r\n    data: {\r\n        title: 'Missing title!',\r\n        thumbnailUrl: '/img/default.png'\r\n    }\r\n}\r\n\r\nmodule.exports = PageItem;","import React, { Component } from 'react';\r\n\r\nimport { default as PropTypes } from 'prop-types'\r\nimport { default as classNames } from 'classnames'\r\n\r\nimport { default as Pager } from './pagination/pager'\r\nimport { default as ItemContainer } from './pagination/item-container'\r\nimport { default as PagerAjax } from './pagination/pager-ajax'\r\n\r\nclass componentName extends Component {\r\n    static propTypes = {\r\n        renderItem: PropTypes.func.isRequired\r\n    }\r\n\r\n    static defaultProps = {\r\n        items: [],\r\n        itemPerPage: 9,\r\n        layout: {\r\n            xs: 12, sm: 6, md: 4, lg: 4, xl: 4\r\n        }\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            currentPage: 1\r\n        }\r\n        this.onItemsChange = this.onItemsChange.bind(this)\r\n    }\r\n\r\n    onItemsChange(pageItems, currentPage, totalPages) {\r\n        this.setState({ pageItems, currentPage, totalPages })\r\n    }\r\n\r\n    render() {\r\n        const { className,\r\n            items, layout, itemWrapperClassName, renderItem,\r\n            itemPerPage, currentPage, templatePath, totalPages\r\n        } = this.props\r\n\r\n        //ItemContainer will render current page item\r\n        //Ajax pager render page list only\r\n        return (\r\n            <div className={ classNames(className, \"pagination-container clearfix\") }>\r\n                <ItemContainer className={ \"mb-4\" }\r\n                    items={ this.state.pageItems || items }\r\n                    layout={ layout }\r\n                    renderItem={ renderItem }\r\n                    itemWrapperClassName={ itemWrapperClassName } />\r\n                {\r\n                    templatePath ?\r\n                        <PagerAjax className=\"float-right\"\r\n                            currentPage={ currentPage }\r\n                            totalPages={ totalPages }\r\n                            itemPerPage={ itemPerPage }\r\n                            templatePath={ templatePath }\r\n                            onItemsChange={ this.onItemsChange }\r\n                        /> :\r\n                        <Pager className=\"float-right\"\r\n                            items={ items }\r\n                            itemPerPage={ itemPerPage }\r\n                            onItemsChange={ this.onItemsChange }\r\n                        />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default componentName;","import React, { Component } from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport { Row } from 'reactstrap'\r\nimport { default as PagingItemWrapper } from './item-wrapper'\r\nimport $ from 'jquery'\r\nimport { default as classNames } from 'classnames'\r\n\r\nclass PagingItemContainer extends Component {\r\n    static defaultProps = {\r\n        items: []\r\n    }\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            itemToDisplay: []\r\n        }\r\n        this.refreshContainerView = this.refreshContainerView.bind(this)\r\n        this.displayNewItems = this.displayNewItems.bind(this)\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (JSON.stringify(nextProps.items) != JSON.stringify(this.props.items)) {\r\n            this.refreshContainerView(nextProps.items)\r\n        }\r\n    }\r\n\r\n    displayNewItems() { \r\n        this.setState({ displayNewItems: this.itemToDisplay })\r\n    }\r\n\r\n    refreshContainerView(itemToDisplay) {\r\n        this.itemToDisplay = itemToDisplay\r\n\r\n        const $wrapper = $(ReactDOM.findDOMNode(this.refs[ 'wrapper' ]))\r\n        $('.paging-item-wrapper.on-display').addClass('fade-left').delay(500).queue(this.displayNewItems)\r\n    }\r\n\r\n    render() {\r\n        const { className, items, renderItem, layout, itemWrapperClassName } = this.props\r\n        return (\r\n            <div className={classNames(\"paging-wrapper\", className)} ref=\"wrapper\">\r\n                <Row className=\"paging-item-container\">\r\n                    {\r\n                        items.map((item, index) => {\r\n                            var itemLayout = layout;\r\n                            if(Array.isArray(layout))\r\n                                itemLayout = itemLayout.filter((layout) => {\r\n                                    return (layout.at - 1) === index\r\n                                })[0]\r\n\r\n                            return <PagingItemWrapper key={index} className={classNames(\"paging-item-wrapper\", itemWrapperClassName)} {...itemLayout} item={ item } renderItem={ renderItem } />\r\n                        })\r\n                    }\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PagingItemContainer","import React, { Component } from 'react'\r\nimport { Col } from 'reactstrap'\r\n\r\nclass PagingItemWrapper extends Component {\r\n    componentWillUnmount() {\r\n    }\r\n\r\n    render() {\r\n        const { xs, sm, md, lg, xl, item, renderItem, className } = this.props\r\n        return (\r\n            <Col className={ className } xs={ xs } sm={ sm } md={ md } lg={ lg } xl={ xl }>\r\n                { renderItem(item) }\r\n            </Col>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PagingItemWrapper","import React, { PropTypes } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport _ from 'underscore'\r\nimport { default as classNames } from 'classnames'\r\n\r\nclass Pager extends React.Component {\r\n\r\n    static propTypes = {\r\n        onItemsChange: PropTypes.func.isRequired,\r\n        initialPage: PropTypes.number\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { pager: {} };\r\n        this.renderPage = this.renderPage.bind(this)\r\n        this.renderPageLink = this.renderPageLink.bind(this)\r\n        this.getPageUrl = this.getPageUrl.bind(this)\r\n    }\r\n\r\n    getPageUrl(pageNumber) {\r\n        var templatePath = String(this.props.templatePath)\r\n        const paramKey = String(this.props.paramKey || ':page')\r\n\r\n        if (templatePath.indexOf(paramKey) >= 1)\r\n            return templatePath.replace(paramKey, pageNumber)\r\n\r\n        return templatePath += `/${pageNumber}`\r\n    }\r\n\r\n    renderPageLink(page, label) {\r\n        const { getPageUrl } = this.props\r\n        return (<Link className=\"page-link\" to={ this.getPageUrl(page) } dangerouslySetInnerHTML={ { __html: label || page } } />)\r\n    }\r\n\r\n    renderPage() {\r\n        const { currentPage, totalPages, basePath } = this.props\r\n        const pageComonents = []\r\n\r\n        for (var page = 1; page <= totalPages; page++) {\r\n            pageComonents.push(\r\n                <li key={ page } className={ classNames(\"page-item\", { active: currentPage === page }) }>\r\n                    { this.renderPageLink(page) }\r\n                </li>\r\n            )\r\n        }\r\n\r\n        return pageComonents\r\n    }\r\n\r\n    render() {\r\n        const { totalPages, currentPage } = this.props\r\n\r\n        if (!totalPages || totalPages <= 1) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className={ classNames(\"pager\", this.props.className) }>\r\n                <ul className=\"pagination m-0\">\r\n                    <li className={ classNames(\"page-item\", { disabled: currentPage === 1 }) }>\r\n                        { this.renderPageLink(1, '<i class=\"fa fa-angle-left\" aria-hidden=\"true\"></i>') }\r\n                    </li>\r\n                    { this.renderPage() }\r\n                    <li className={ classNames(\"page-item\", { disabled: currentPage === totalPages }) }>\r\n                        { this.renderPageLink(totalPages, '<i class=\"fa fa-angle-right\" aria-hidden=\"true\"></i>') }\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pager;","import React, { PropTypes } from 'react'\r\nimport _ from 'underscore'\r\nimport {default as classNames } from 'classnames'\r\n\r\nclass Pager extends React.Component {\r\n    static defaultProps = {\r\n        initialPage: 1,\r\n    }\r\n    static propTypes = {\r\n        items: PropTypes.array.isRequired,\r\n        onItemsChange: PropTypes.func.isRequired,\r\n        initialPage: PropTypes.number\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { pager: {} };\r\n    }\r\n\r\n    componentWillMount() {\r\n        // set page if items array isn't empty\r\n        if (this.props.items && this.props.items.length) {\r\n            this.setPage(this.props.initialPage);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // reset page if items array has changed\r\n        if (this.props.items !== prevProps.items) {\r\n            this.setPage(this.props.initialPage);\r\n        }\r\n    }\r\n\r\n    setPage(page) {\r\n        var items = this.props.items;\r\n        var pager = this.state.pager;\r\n\r\n        if (page < 1 || page > pager.totalPages) {\r\n            return;\r\n        }\r\n\r\n        // get new pager object for specified page\r\n        pager = this.getPager(items.length, page);\r\n\r\n        // get new page of items from items array\r\n        var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\r\n\r\n        // update state\r\n        this.setState({ pager: pager });\r\n\r\n        // call change page function in parent component\r\n        this.props.onItemsChange(pageOfItems);\r\n    }\r\n\r\n    getPager(totalItems, currentPage, pageSize) {\r\n        // default to first page\r\n        currentPage = currentPage || 1;\r\n\r\n        // default page size is 10\r\n        pageSize = pageSize || this.props.itemPerPage;\r\n\r\n        // calculate total pages\r\n        var totalPages = Math.ceil(totalItems / pageSize);\r\n\r\n        var startPage, endPage;\r\n        if (totalPages <= 10) {\r\n            // less than 10 total pages so show all\r\n            startPage = 1;\r\n            endPage = totalPages;\r\n        } else {\r\n            // more than 10 total pages so calculate start and end pages\r\n            if (currentPage <= 6) {\r\n                startPage = 1;\r\n                endPage = 10;\r\n            } else if (currentPage + 4 >= totalPages) {\r\n                startPage = totalPages - 9;\r\n                endPage = totalPages;\r\n            } else {\r\n                startPage = currentPage - 5;\r\n                endPage = currentPage + 4;\r\n            }\r\n        }\r\n\r\n        // calculate start and end item indexes\r\n        var startIndex = (currentPage - 1) * pageSize;\r\n        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\r\n\r\n        // create an array of pages to ng-repeat in the pager control\r\n        var pages = _.range(startPage, endPage + 1);\r\n\r\n        // return object with all pager properties required by the view\r\n        return {\r\n            totalItems: totalItems,\r\n            currentPage: currentPage,\r\n            pageSize: pageSize,\r\n            totalPages: totalPages,\r\n            startPage: startPage,\r\n            endPage: endPage,\r\n            startIndex: startIndex,\r\n            endIndex: endIndex,\r\n            pages: pages\r\n        };\r\n    }\r\n\r\n    render() {\r\n        var pager = this.state.pager;\r\n\r\n        if (!pager.pages || pager.pages.length <= 1) {\r\n            // don't display pager if there is only 1 page\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className={classNames(\"pager\", this.props.className)}>\r\n                <ul className=\"pagination\">\r\n                    <li className={classNames(\"page-item\", { disabled : pager.currentPage === 1 })}>\r\n                        <a className=\"page-link\" onClick={ () => this.setPage(1) }>{`<`}</a>\r\n                    </li>\r\n                    { pager.pages.map((page, index) =>\r\n                        <li key={ index } className={classNames(\"page-item\", { active : pager.currentPage === page })}>\r\n                            <a className=\"page-link\" onClick={ () => this.setPage(page) }>{ page }</a>\r\n                        </li>\r\n                    ) }\r\n                    <li className={classNames(\"page-item\", { disabled : pager.currentPage === pager.totalPages })}>\r\n                        <a className=\"page-link\" onClick={ () => this.setPage(pager.totalPages) }>{\">\"}</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Pager;","export default (props) => {\r\n    return (\r\n        <div className=\"section-title w-100 text-center mb-3 mb-lg-4 mb-lg-5\">\r\n            <h2 className=\"title\">\r\n                {props.children}\r\n            </h2>\r\n        </div>\r\n    );\r\n}","import React, { Component } from 'react'\r\nimport { default as classNames } from 'classnames'\r\nimport { default as SidebarWidget } from './sidebar-widget'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nclass SidebarMenu extends Component {\r\n\r\n    render() {\r\n        const { noBorder, title, titleLink, onTransitionTo, items } = this.props\r\n\r\n        return (\r\n            <SidebarWidget noBorder={ noBorder } noCollapse={ !items.length } title={ title } link={ titleLink }>\r\n                {\r\n                    items && <ul className=\"sidebar-widget-menu\">\r\n                        {\r\n                            items.map((item, index) => (\r\n                                <li className={ classNames(\"sidebar-widget-item\") } key={ index }>\r\n                                    <NavLink className={ classNames(\"sidebar-widget-link\") } to={ item.path } activeClassName='current'>\r\n                                        <span className=\"sidebar-widget-link-title\">\r\n                                            { item.title }\r\n                                        </span>\r\n                                    </NavLink>\r\n                                </li>\r\n                            ))\r\n                        }\r\n                    </ul>\r\n                }\r\n            </SidebarWidget>\r\n        )\r\n    }\r\n}\r\n\r\nSidebarMenu.defaultProps = {\r\n    items: []\r\n}\r\n\r\n\r\nexport default SidebarMenu;","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport $ from 'jquery'\r\nimport { default as classNames } from 'classnames'\r\nimport { connect } from 'react-redux'\r\nimport { toggleMobileSidebar } from '../_layout/actions'\r\n\r\nclass SideBarToggleStart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const $button = $(ReactDOM.findDOMNode(this.refs.button))\r\n        const $content = $(ReactDOM.findDOMNode(this.refs.content))\r\n        const contentHeight = $content.outerHeight();\r\n        $button.css('top', '-' + Math.ceil(contentHeight / 2) + 'px')\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        const $button = $(ReactDOM.findDOMNode(this.refs.button))\r\n        const $content = $(ReactDOM.findDOMNode(this.refs.content))\r\n        const $wrapper = $(ReactDOM.findDOMNode(this.refs.wrapper))\r\n        const $window = $(window)\r\n        const { layoutParameters: { header, breadcrumbs } } = nextProps\r\n        const contentHeight = $content.outerHeight();\r\n        const btnHeight = $button.height()\r\n        const isWrapperFloat = $wrapper.hasClass('float')\r\n\r\n        var toggleSidebarButtonOffsetTop = nextProps.layoutParameters.toggleSidebarButtonOffsetTop + 1\r\n\r\n        if (nextProps.isMobileSidebarOpen == false)\r\n            $button.removeClass('open').delay(500).queue(() => {\r\n                $button.removeClass('transition-advance')\r\n                $button.dequeue()\r\n            })\r\n        else\r\n            $content.css('margin-left', '4rem')\r\n\r\n        if (isWrapperFloat)\r\n            toggleSidebarButtonOffsetTop = Math.ceil($wrapper.offset().top)\r\n\r\n        if(!$wrapper.hasClass('static'))\r\n            $(window).on('scroll.myscroll', function () {\r\n                const windowSrcollTop = $window.scrollTop()\r\n                if (windowSrcollTop > header.height) {\r\n                    $button.css('position', 'fixed')\r\n                    $button.css('top', toggleSidebarButtonOffsetTop)\r\n                }\r\n                else {\r\n                    $button.css('position', 'absolute')\r\n                    $button.css('top', '-' + Math.ceil(contentHeight / 2 - 2) + 'px')\r\n                }\r\n\r\n                if (windowSrcollTop > header.height + btnHeight)\r\n                    $content.css('margin-left', '1rem')\r\n                else\r\n                    $content.css('margin-left', '4rem')\r\n\r\n            });\r\n\r\n    }\r\n\r\n    buttonClick(e) {\r\n        const $button = $(ReactDOM.findDOMNode(this.refs.button))\r\n\r\n        this.props.dispatch(toggleMobileSidebar(!$button.hasClass('open')))\r\n\r\n        if ($button.hasClass('open')) {\r\n            $button.removeClass('open').delay(500).queue(() => {\r\n                $button.removeClass('transition-advance')\r\n                $button.dequeue()\r\n            })\r\n        }\r\n        else {\r\n            $button.addClass('transition-advance')\r\n            $button.addClass('open')\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div ref=\"wrapper\" id=\"sidebar-toggle-wrapper\" className={ classNames(this.props.className, \"sidebar-toggle-start\") }>\r\n                <div ref=\"content\" className=\"sidebar-toggle-start-content transition-basic\">\r\n                    { this.props.children }\r\n                </div>\r\n                <div ref=\"button\" id=\"sidebar-toggle-btn\" className=\"sidebar-toggle-btn d-lg-none ml-2 text-primary\" onClick={ this.buttonClick.bind(this) }>\r\n                    <i className=\"fa fa-angle-double-right\" aria-hidden=\"true\"></i>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isMobileSidebarOpen: state.layout.isMobileSidebarOpen,\r\n        layoutParameters: state.layout.parameters\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(SideBarToggleStart);","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { Collapse } from 'reactstrap'\r\n\r\nclass SidebarWidget extends Component {\r\n    static propTypes = {\r\n        title: PropTypes.string.isRequired,\r\n        toggleDefault: PropTypes.bool\r\n    };\r\n\r\n    static defaultProps = {\r\n        title: 'Missing title',\r\n        toggleDefault: true\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            toggle: props.toggleDefault\r\n        }\r\n\r\n        this.widgetClassName = classNames(\"widget-item\", { \"no-border\": props.noBorder }, )\r\n        this.titleClassName = classNames('widget-item-title', props.titleClassName)\r\n        this.toggle = this.toggle.bind(this)\r\n        this.renderContent = this.renderContent.bind(this)\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({ toggle: !this.state.toggle })\r\n    }\r\n\r\n    renderContent() {\r\n        const { children, className } = this.props\r\n\r\n        return (\r\n            <div className={ classNames(className, 'widget-item-content') }>\r\n                {\r\n                    children\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { title, link, noCollapse } = this.props\r\n\r\n        return (\r\n            <div className={ this.widgetClassName } >\r\n                <div className=\"widget-item-header\">\r\n                    {\r\n                        link ? (\r\n                            <NavLink to={ link } className={ this.titleClassName } activeClassName=\"current\">\r\n                                { title }\r\n                            </NavLink>\r\n                        ) :\r\n                            <span href=\"#\" className={ this.titleClassName }>\r\n                                { title }\r\n                            </span>\r\n                    }\r\n\r\n                    {\r\n                        noCollapse || (\r\n                            <span className=\"chevron\" onClick={ this.toggle }>\r\n                                <i className=\"fa fa-angle-down\" aria-hidden=\"true\" />\r\n                            </span>\r\n                        )\r\n                    }\r\n                </div>\r\n                <div className=\"widget-item-content-container\">\r\n                    {\r\n                        noCollapse ? this.renderContent() :\r\n                            (\r\n                                <Collapse isOpen={ this.state.toggle } >\r\n                                    { this.renderContent() }\r\n                                </Collapse>\r\n                            )\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SidebarWidget;","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { connect } from 'react-redux'\r\nimport { default as classNames } from 'classnames'\r\nimport { toggleMobileSidebar } from '../_layout/actions'\r\n\r\nclass Sidebar extends React.Component {\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.isMobileSidebarOpen) {\r\n            const { parameters: { viewportHeight, header, breadcrumbs } } = nextProps\r\n            const $element = $(ReactDOM.findDOMNode(this.refs.sidebarMobile));\r\n\r\n            const scrollTop = Math.ceil($(window).scrollTop())\r\n            $element.css('height', Math.ceil(window.innerHeight))\r\n            $element.css('top', scrollTop - header.height - breadcrumbs.height)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { children, isMobileSidebarOpen } = this.props\r\n        return (\r\n            <div className=\"mr-lg-4\">\r\n                <aside className=\"d-none d-lg-block sidebar\">\r\n                    { children }\r\n                </aside>\r\n\r\n                <aside ref=\"sidebarMobile\"\r\n                    className={ classNames(\"d-lg-none transition-advance sidebar sidebar-mobile\", { open: isMobileSidebarOpen }) }\r\n                >\r\n                    <div className=\"overlay\" onClick={ (e) => {\r\n                        this.props.dispatch(toggleMobileSidebar(false))\r\n                    } } />\r\n\r\n                    <div className=\"sidebar-mobile-wrapper transition-advance\">\r\n                        {\r\n                            children\r\n                        }\r\n                    </div>\r\n                </aside>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isMobileSidebarOpen: state.layout.isMobileSidebarOpen,\r\n        parameters: state.layout.parameters\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Sidebar)","﻿import { combineReducers } from 'redux'\r\nimport { routerReducer as router } from 'react-router-redux'\r\n\r\n//Reducers\r\nimport { googleMapReducer as googleMap } from './reducers/google-map'\r\nimport { reducer as appRouter } from './reducers/app-routes'\r\n\r\nconst localization = require('./reducers/localization').reducer;\r\nconst menu = require('./_layout/header/menu').reducer;\r\nconst layout = require('./_layout').reducer;\r\nconst connectedBasePage = require('./_layout/main/connected-base-page').reducer;\r\n\r\nconst reducer = combineReducers({\r\n    layout,\r\n    localization,\r\n    menu,\r\n    connectedBasePage,\r\n    router,\r\n    appRouter,\r\n    googleMap\r\n})\r\n\r\nmodule.exports = reducer;","\r\nconst DEFAULT_MENU = 'PRIMARY'\r\nconst INIT_ROUTES = 'INIT_ROUTES'\r\nconst REFRESH_ROUTE_PATH = 'REFRESG_ROUTE_PATH'\r\n\r\nconst popularMenusFromRoute = (menus, route) => {\r\n    let { exact, path, label, defaultLabel, menuOrders, childRoutes } = route\r\n\r\n    //Nếu menuOrders không được định nghĩa thì không thêm route vào menu\r\n    if (!menuOrders)\r\n        return\r\n\r\n    for (var menuLocation in menuOrders) {\r\n\r\n        //Tạo menu nếu trong route được định nghĩa menuOrders\r\n        if (!menus[ menuLocation ])\r\n            menus[ menuLocation ] = []\r\n\r\n        //Thứ tự của \r\n        let menuOrder = menuOrders[ menuLocation ]\r\n\r\n        menus[ menuLocation ].push({\r\n            exact, url: path, label: label || defaultLabel, order: menuOrder\r\n        })\r\n    }\r\n\r\n    return menus\r\n}\r\n\r\nconst menuFormRootRoute = (rootRoute) => {\r\n    //menus là một object tập hợp của nhiều menu, với property là têm menu và value và array menu item\r\n    //Mặc định cho menu của app là 'PRIMARY' được định nghĩa bởi const 'DEFAULT_MENU'\r\n    var menus = {\r\n        [ DEFAULT_MENU ]: []\r\n    }\r\n\r\n    //tạo menu item cho  trang chủ (root route)\r\n    menus = popularMenusFromRoute(menus, rootRoute);\r\n\r\n    let { childRoutes } = rootRoute\r\n\r\n    //tạo menu item cho các route con\r\n    for (var childIndex in childRoutes) {\r\n        menus = popularMenusFromRoute(menus, childRoutes[ childIndex ])\r\n    }\r\n\r\n    return menus\r\n}\r\n\r\nconst getRoutePath = (routes = [], currentRouteName, labels) => {\r\n    var resultRoutePath = []\r\n\r\n    for (var routeIndex in routes) {\r\n        var route = routes[ routeIndex ]\r\n\r\n        if (labels && labels[ route.name ])\r\n            route.label = labels[ route.name ]\r\n        else\r\n            route.label = route.defaultLabel\r\n        if (route.name == currentRouteName) {\r\n            resultRoutePath.push(route)\r\n            return resultRoutePath\r\n        } else if (route.childRoutes) {\r\n            resultRoutePath.push(route)\r\n            var nextRoute = getRoutePath(route.childRoutes, currentRouteName, labels);\r\n            if (nextRoute.length) {\r\n                resultRoutePath = resultRoutePath.concat(nextRoute)\r\n                return resultRoutePath\r\n            } else\r\n                resultRoutePath = []\r\n        } else {\r\n            resultRoutePath = []\r\n        }\r\n    }\r\n\r\n    return resultRoutePath\r\n}\r\n\r\nconst refreshRoutePath = (currentRouteName, replaceRouteDefaultLabels) => ({\r\n    type: REFRESH_ROUTE_PATH,\r\n    currentRouteName,\r\n    replaceRouteDefaultLabels\r\n})\r\n\r\nconst reducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case INIT_ROUTES:\r\n            const routes = action.routes\r\n            const menus = menuFormRootRoute(routes)\r\n            const newState = { routes, menus }\r\n            return newState\r\n        case REFRESH_ROUTE_PATH:\r\n            const routePath = getRoutePath(state.routes.childRoutes, action.currentRouteName, action.routeLabels);\r\n            routePath.unshift(state.routes)\r\n            return $.extend(true, {}, state, { routePath })\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport { reducer, refreshRoutePath, INIT_ROUTES, DEFAULT_MENU }","const SHOW_MARKER_BALLOON = \"GMAP_SHOW_MARKER_BALLOON\"\r\nconst CREATE_MAP = \"GMAP_CEATE_MAP\"\r\nconst SET_MAP_VALUE = \"GMAP_SET_MAP\"\r\nconst SET_MAP_MARKERS = \"GMAP_SET_MAP_MARKERS\"\r\n\r\nconst showMarkerBalloon = (mapId, markerId) => ({\r\n    type: SHOW_MARKER_BALLOON,\r\n    mapId,\r\n    markerId\r\n})\r\n\r\nconst createMap = (mapId) => ({\r\n    type: CREATE_MAP,\r\n    mapId\r\n})\r\n\r\nconst setMapValue = (mapId, map) => ({\r\n    type: SET_MAP_VALUE,\r\n    mapId,\r\n    map\r\n})\r\n\r\nconst setMapMarkers = (mapId, markers) => ({\r\n    type: SET_MAP_MARKERS,\r\n    mapId, \r\n    markers\r\n})\r\n\r\nconst googleMapInitialState = {\r\n\r\n}\r\n\r\nconst googleMapReducer = (state = googleMapInitialState, action) => {\r\n    switch (action.type) {\r\n        case CREATE_MAP:\r\n            var newState = $.extend(true, {}, state)\r\n            newState[ action.mapId ] = {}\r\n            return newState\r\n        case SET_MAP_VALUE:\r\n            var newState = $.extend(true, {}, state)\r\n            newState[ action.mapId ] = $.extend(true, {}, newState[ action.mapId ], action.map)\r\n            return newState\r\n        case SET_MAP_MARKERS:\r\n            var newState = $.extend(true, {}, state)\r\n\r\n            //Đôi khi, action này đc gọi trước khi init map\r\n            //các giá trị của map sẽ lấy theo mặc định của component\r\n            if(!newState[ action.mapId ])\r\n                newState[ action.mapId ] = {}\r\n\r\n            newState[ action.mapId ].markers = action.markers\r\n            return newState\r\n        case SHOW_MARKER_BALLOON:\r\n            var newState = $.extend(true, {}, state)\r\n            newState[ action.mapId ].showBalloonForMarker = action.markerId\r\n            return newState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport {\r\n    createMap,\r\n    showMarkerBalloon,\r\n    setMapValue,\r\n    setMapMarkers,\r\n    googleMapReducer\r\n}","﻿const $ = require('jquery');\r\n\r\nconst keys = {\r\n    init: \"INIT\",\r\n    swithLanguage: \"SWITH_LANGUAGE\",\r\n}\r\n\r\nconst actions = {\r\n    swithLanguage: (language) => ({\r\n        type: keys.swithLanguage,\r\n        language\r\n    }),\r\n\r\n    //initState:\r\n    // - languages\r\n    // - currentLanguage\r\n    init: (initState) => ({\r\n        type: keys.init,\r\n        initState\r\n    })\r\n}\r\n\r\nconst reducer = (state = {}, action) => {\r\n    const newState = $.extend(true, {}, state);\r\n    switch (action.type) {\r\n        case keys.init:\r\n            return action.initState;\r\n        case keys.swithLanguage:\r\n            newState.currentLanguage = actions.language;\r\n            break;\r\n        default:\r\n            return state;\r\n    }\r\n    return newState;\r\n}\r\n\r\nmodule.exports = {\r\n    actions,\r\n    reducer\r\n}","import dataRequest from './utilities/requestData'\r\nimport { fetchEntities } from './utilities/fetchEntities'\r\nimport { default as StyleSheet } from './utilities/sheets'\r\nimport { getOptions, getOption } from './utilities/getOptions'\r\nimport { default as getCategoryByNameFromCatogires } from './utilities/getCurrentCategory'\r\nimport { default as createCategoryUrlFromRoutePathAndCategoryName } from './utilities/createCategoryUrl'\r\nimport { default as generateEntityDetailUrl } from './utilities/generateEntityDetailUrl'\r\nimport { treeToList } from './utilities/treeToList'\r\nimport { fetchSingleEntity, fetchPage } from './utilities/fetchSingleEntity'\r\nimport {default as fetchTaxonomiesByTaxonomyTypeId } from './utilities/fetchTaxonomies'\r\n\r\nexport {\r\n    dataRequest,\r\n    fetchEntities,\r\n    StyleSheet, \r\n    getOptions, getOption,\r\n    getCategoryByNameFromCatogires,\r\n    createCategoryUrlFromRoutePathAndCategoryName,\r\n    treeToList,\r\n    generateEntityDetailUrl,\r\n    fetchSingleEntity, fetchPage,\r\n    fetchTaxonomiesByTaxonomyTypeId\r\n}","function createCategoryUrlFromRoutePathAndCategoryName(routePath, categoryName, categoryParamKeyWithColon = ':category') {\r\n    return String(routePath).replace(categoryParamKeyWithColon, categoryName)\r\n}\r\n\r\nexport default createCategoryUrlFromRoutePathAndCategoryName","const dataRequest = require('./requestData')\r\n/**\r\n * Gắn property 'path' cho mỗi item trong list\r\n * @param {Array} items \r\n * @param {String} basePath \r\n */\r\nfunction getItemsWithPath(items, basePath) {\r\n    const itemsWithPath = items.map((item) => {\r\n        item.path = `${basePath}/${item.name}`\r\n        return item\r\n    })\r\n    return itemsWithPath\r\n}\r\n\r\n/**\r\n * @param {String} mvcControllerUrl\r\n * @param {Object} postParams Các params sẽ được gởi đi, bao gồm PageSize, Page, Filtering, Sorted, Categories({CategoryType: CategoryId}), EntityTypeId, AdditionalFields\r\n * @param {String} baseItemPath Url đặt phía trước sẽ nối với 'entity name' để dẫn đến trang chi tiết, ví dụ '/thu-vien/chi-tiet/:entity-name'\r\n * @param {Func} callBack Sẽ có 2 giá trị được truyền vào bao gồm entities(entities của trang hiện tại với property 'path' được gán cho mỗi entity), totalPages(tổng số trang trước khi skip-take)\r\n */\r\nexport function fetchEntities(mvcControllerUrl, postParams, baseItemPath, callBack) {\r\n    const { page, pageSize, filtering, sorted, categories, entityTypeId, additionalFields } = postParams\r\n\r\n    dataRequest(global.APP_DOMAIN + mvcControllerUrl + \"/GetTableData\", pageSize, page, sorted, filtering, categories, entityTypeId, additionalFields,\r\n        (response) => {\r\n            const { entities, totalCount } = response\r\n            const itemsWithPath = getItemsWithPath(entities, baseItemPath)\r\n            const totalPages = Math.ceil(totalCount / pageSize)\r\n            callBack(itemsWithPath, totalPages)\r\n        })\r\n} \r\n","import jQuery from 'jquery';\r\n\r\nconst GET_SINGLE_ACTION = '/getsingle'\r\nconst PAGE_CONTROLLER = '/page'\r\n\r\nfunction fetchSingleEntity(entityName, mvcController) {\r\n    return new Promise((executor, reject) => {\r\n        const requestUrl = `${globa.APP_DOMAIN}${mvcController}${GET_SINGLE_ACTION}`\r\n        $.ajax({\r\n            url: requestUrl,\r\n            data: { entityName },\r\n            method: \"GET\",\r\n            success: (entityResponse) => {\r\n                executor(entityResponse)\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nfunction fetchPage(entityName) {\r\n    return new Promise((executor, reject) => {\r\n        const requestUrl = `${globa.APP_DOMAIN}${PAGE_CONTROLLER}${GET_SINGLE_ACTION}`\r\n        $.ajax({\r\n            url: requestUrl,\r\n            data: { entityName },\r\n            method: \"GET\",\r\n            success: (entityResponse) => {\r\n                executor(entityResponse)\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport { fetchPage, fetchSingleEntity }","import jQuery from 'jquery';\r\nimport { default as listToTree } from 'list-to-tree'\r\nimport { default as createCategoryUrlFromRoutePathAndCategoryName } from './createCategoryUrl'\r\n\r\nconst TAXONOMY_CONTROLLER = '/TaxonomyUI'\r\nconst GET_TAXONOMIES_ACTION = '/GetTaxonomies'\r\n\r\nfunction fetchTaxonomiesByTaxonomyType(taxonomyTypeId) {\r\n    return new Promise((executor, reject) => {\r\n        const requestUrl = `${TAXONOMY_CONTROLLER}${GET_TAXONOMIES_ACTION}`\r\n        \r\n        $.ajax({\r\n            url: requestUrl,\r\n            data: { taxonomyTypeId },\r\n            method: \"GET\",\r\n            success: (responseFlatCategoryArray) => {\r\n                const ltt = new listToTree(responseFlatCategoryArray, { key_parent: 'parentId', key_child: 'children' })\r\n                const categories = ltt.GetTree()\r\n\r\n                categories.unshift({\r\n                    name: localizationString.getString('tat-ca'),\r\n                    title: localizationString.getString(\"Tất cả\"),\r\n                })\r\n                executor(categories)\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport default fetchTaxonomiesByTaxonomyType","function generateEntityDetailUrl(entities, routePath, paramKey = ':entity') {\r\n    entities = entities.map((entity) => {\r\n        entity.path = String(routePath).replace(paramKey, entity.name)\r\n        return entity\r\n    })\r\n    return entities\r\n}\r\n\r\nexport default generateEntityDetailUrl","\r\nimport { treeToList } from './treeToList'\r\n\r\nfunction getCategoryByNameFromCatogires(categoryName, categories) {\r\n    const flatCategoryArray = treeToList(categories, 'name')\r\n\r\n    const currentCategory = flatCategoryArray.filter((categoryItem) => {\r\n        return categoryItem.name === categoryName\r\n    })[ 0 ]\r\n    return currentCategory\r\n}\r\n\r\nexport default getCategoryByNameFromCatogires","const OPPTION_CONTROLLER = '/optionGroup'\r\nconst GET_OPTION_ACTION = '/GetSingle'\r\n\r\nconst GET_OPTION_LINK = global.APP_DOMAIN + OPPTION_CONTROLLER + GET_OPTION_ACTION\r\n\r\nfunction arrayNameValueString_To_ArrayNameValueObject(options) {\r\n    return options.map(item => {\r\n        var strs = String(item.value).split('\\n');\r\n        var obj = { name: item.name };\r\n        for (var i in strs) {\r\n            var str = strs[ i ].split(':');\r\n            if (str.length == 2) {\r\n                var kv = str;\r\n                var k = kv[ 0 ].trim();\r\n                var v = kv[ 1 ].trim();\r\n                obj[ k ] = v;\r\n            }\r\n        }\r\n        return obj;\r\n    });\r\n}\r\n\r\nfunction arrayNameValueObject_To_Object(array) {\r\n    const obj = {}\r\n    for (var index in array) {\r\n        var arrayObj = array[ index ];\r\n        obj[ arrayObj.name ] = arrayObj\r\n        delete obj[ arrayObj.name ].name\r\n    }\r\n    return obj\r\n}\r\n\r\nfunction getOptions(entityName) {\r\n    return new Promise((resolve, reject) => {\r\n        $.get(GET_OPTION_LINK, { entityName }, function (response) {\r\n            var array = arrayNameValueString_To_ArrayNameValueObject(response.details.options)\r\n            var options = arrayNameValueObject_To_Object(array)\r\n            resolve(options);\r\n        });\r\n    })\r\n}\r\n\r\nfunction getOption(optionName, options) {\r\n    return options.filter(option => option.name === optionName)[ 0 ]\r\n}\r\n\r\nexport { getOption, getOptions }\r\n","const requestData = (url, pageSize, page, sorted, filtering, taxonomies, entityTypeId, additionalFields, callback) => {\r\n    $.ajax({\r\n        url,\r\n        method: \"POST\",\r\n        error: (xhr, ajaxOptions, thrownError) => {\r\n            console.log('requestData error: ' + xhr.responseText)\r\n            console.log(xhr)\r\n        },\r\n        data: { pageSize, page, sorted, filtering, taxonomies, entityTypeId, additionalFields },\r\n        success: callback\r\n    });\r\n}\r\n\r\nmodule.exports = requestData\r\n","//???\r\nclass StyleSheet {\r\n    constructor(styles) {\r\n        // Create the <style> tag\r\n        var style = document.createElement(\"style\");\r\n\r\n        // WebKit hack\r\n        style.appendChild(document.createTextNode(\"\"));\r\n\r\n\r\n        // Add the <style> element to the page\r\n        document.head.appendChild(style);\r\n\r\n\r\n        this.style = style\r\n        this.insertRule = this.insertRule.bind(this)\r\n        this.insertRule(styles)\r\n    }\r\n\r\n    insertRule(styles, index = 0) {\r\n        this.style.sheet.insertRule(styles, index)\r\n    }\r\n\r\n    removeStyle() {\r\n        document.head.removeChild(this.style)\r\n    }\r\n}\r\n\r\nexport default StyleSheet","function visitNode(node, hashMap, array, nodeKeyName) {\r\n    if (!hashMap[ node[ nodeKeyName ] ]) {\r\n        hashMap[ node[ nodeKeyName ] ] = true;\r\n        array.push(node);\r\n    }\r\n}\r\n\r\n/**\r\n * Convert a object to list\r\n * @param {Object} rootNode object with children(flat Array) property\r\n * @param {String} nodeKeyName node need a unique key, and this is name of key. Ex: 'id', or 'name' or etc...\r\n */\r\nfunction treeToList(rootNode, nodeKeyName) {\r\n    var stack = [], array = [], hashMap = {}\r\n    var root = rootNode\r\n\r\n    //nếu rootNode là array thì convert thành object\r\n    if (Array.isArray(rootNode))\r\n        root = { children: rootNode }\r\n\r\n    stack.push(root);\r\n\r\n    while (stack.length !== 0) {\r\n        var node = stack.pop();\r\n        var notRoot = node[ nodeKeyName ] && true;\r\n\r\n        if (!node.children) {\r\n            visitNode(node, hashMap, array, nodeKeyName);\r\n        } else {\r\n            if (notRoot)\r\n                array.push(node);\r\n            for (var i = node.children.length - 1; i >= 0; i--) {\r\n                node.children[ i ].parentId = node[ nodeKeyName ]\r\n                stack.push(node.children[ i ]);\r\n            }\r\n        }\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nexport { treeToList }\r\n","module.exports = {\r\n    mvcController: '/post',\r\n    page: 'thu-vien',\r\n    detailPage: 'chi-tiet',\r\n    showBreadcrumbs: true,\r\n    ITEM_PER_PAGE: 5,\r\n    ENTITY_TYPE_ID: 20005,\r\n    TAXONOMY_TYPE_ID_TAG: 40006,\r\n    TAXONOMY_TYPE_ID_CATEGORY: 40005,\r\n}","import { Link } from 'react-router-dom'\r\n\r\nimport { PageItem } from '../../shared/components'\r\nimport { Row, Col } from 'reactstrap'\r\nimport { Image } from '../../shared/components'\r\n\r\nconst pageConfigure = require('../configuration.js')\r\n\r\nfunction renderItem(item) {\r\n\r\n    try {\r\n        const tags = item.taxonomyTypes[ pageConfigure.TAXONOMY_TYPE_ID_TAG ] || []\r\n        const { title, moreDetails: { excerpt }, path } = item\r\n\r\n        return (\r\n            <div className=\"liblary-item w-100 mb-4 mb-lg-5 pb-4 pb-lg-0\">\r\n                <Row>\r\n                    <Col xs=\"12\" md=\"8\">\r\n                        <Image className=\"h-100\" url={ item.thumbnailUrl } />\r\n                    </Col>\r\n                    <Col md={ 4 }>\r\n                        <h6 className=\"mt-3 mt-lg-0\">{ title }</h6>\r\n                        <dl>\r\n                            <dt className=\"d-inline\">{ localizationString.getString('Thời gian') }: </dt>\r\n                            <dd className=\"d-inline\">5/08/2017 <br /></dd>\r\n\r\n                            <dt className=\"d-inline\">{ localizationString.getString('Đăng bởi') }: </dt>\r\n                            <dd className=\"d-inline\">Admin <br /></dd>\r\n\r\n                            <dt className=\"d-inline\">{ localizationString.getString('Tag') }: </dt>\r\n                            \r\n                            <dd className=\"d-inline\">\r\n                                {\r\n                                    tags.map((tag, index) =>\r\n                                        <span key={ tag.id }>\r\n                                            { (tags.length === index + 1) ? tag.title : tag.title + \", \" }\r\n                                        </span>\r\n                                    )\r\n                                }\r\n                                <br />\r\n                                { excerpt }\r\n                            </dd>\r\n                        </dl>\r\n                        <div>\r\n                            <Link to={path} className=\"read-more text-uppercase btn btn-secondary w-100 w-lg-auto\">{localizationString.getString('Read More')}</Link>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n\r\n        )\r\n    }\r\n    catch (e) {\r\n        console.error('renderItem Error:')\r\n        console.log(item)\r\n        console.error(e)\r\n    }\r\n}\r\n\r\nexport { renderItem }","//React/Redux\r\nimport React, { Component } from 'react'\r\nimport { Route, Switch } from 'react-router'\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\n\r\n//Actions\r\n\r\n//Components\r\nimport { default as BasePage } from '../shared/_layout/main/base-page'\r\nimport { Sidebar, SidebarMenu } from '../shared/components'\r\nimport { Container,  Row, Col} from 'reactstrap'\r\n\r\n//Routes component\r\nimport { default as DefaultView } from './views/default-view'\r\n\r\n//Page configuration\r\nconst pageConfigure = require('./configuration.js')\r\n\r\nimport { createCategoryUrlFromRoutePathAndCategoryName } from '../shared/utilities'\r\n\r\nclass ThuVien extends Component {\r\n    static defaultProps = {\r\n        categories: []\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.renderSidebar = this.renderSidebar.bind(this)\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { match, onError, onDataFetch, refreshRoutePath, categories, pageContent, items } = this.props\r\n\r\n        if (!pageContent)\r\n            $.get(`/page/getsingle?entityName=${pageConfigure.page}`, function (response) {\r\n                onDataFetch({ pageContent: response.details }, 50);\r\n            })\r\n\r\n        if (!categories.length)\r\n            $.get('/TaxonomyUI/GetTaxonomies', { taxonomyTypeId: pageConfigure.TAXONOMY_TYPE_ID_CATEGORY }, function (responseCategories) {\r\n                responseCategories.unshift({\r\n                    name: localizationString.getString('tat-ca'),\r\n                    path: createCategoryUrlFromRoutePathAndCategoryName(match.path, localizationString.getString('tat-ca')),\r\n                    title: localizationString.getString(\"Tất cả\")\r\n                })\r\n                onDataFetch({ categories: responseCategories }, 50)\r\n            })\r\n    }\r\n\r\n    renderSidebar() {\r\n        const { categories, match: { path, url } } = this.props;\r\n\r\n        const categoryMenuItems = categories.map(({ name, title }) => {\r\n            return { path: createCategoryUrlFromRoutePathAndCategoryName(path, name), title }\r\n        })\r\n\r\n        return (\r\n            <Sidebar title={ localizationString.getString(\"Danh mục\") }>\r\n                <SidebarMenu noBorder title={ localizationString.getString('loại công trình') }\r\n                    items={ categoryMenuItems }\r\n                    currentUrl={ url }\r\n                />\r\n            </Sidebar>\r\n        )\r\n    }\r\n\r\n    renderRoutes() {\r\n        const { match: { path }, categories, onDataFetch } = this.props;\r\n\r\n        return (\r\n            <Switch>\r\n                <Route exact={ true } path={ path } render={ (route) => <DefaultView {...route} onDataFetch={ onDataFetch } /> } />\r\n                <Route path={ path + '/:page' } render={ (route) => <DefaultView {...route} onDataFetch={ onDataFetch } /> } />\r\n            </Switch>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { dataFetchProgress, match } = this.props\r\n\r\n        if (__DEV__) {\r\n            console.log(pageConfigure.page + ' props: ')\r\n            console.log(this.props)\r\n        }\r\n\r\n        if(dataFetchProgress != 100)\r\n            return null\r\n\r\n        return (\r\n            <Container id=\"thu-vien\">\r\n                <Row>\r\n                    <Col xs=\"12\" lg=\"4\" xl=\"3\">\r\n                        { this.renderSidebar() }\r\n                    </Col>\r\n                    <Col xs=\"12\" lg=\"8\" xl=\"9\">\r\n                        { this.renderRoutes() }\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    ...bindActionCreators({ }, dispatch),\r\n})\r\n\r\nconst ConnectedThuVien = connect(mapStateToProps, mapDispatchToProps)(ThuVien);\r\n\r\nmodule.exports = BasePage({ page: pageConfigure.page, showBreadcrumbs: pageConfigure.showBreadcrumbs })(ConnectedThuVien);","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n//Components\r\nimport { Container, Row, Col } from 'reactstrap'\r\nimport { Image, Pagination, SideBarToggleStart } from '../../shared/components'\r\n\r\n//Helper functions\r\nimport { renderItem } from '../helper/render-items'\r\nconst { fetchEntities, getCategoryByNameFromCatogires } = require('../../shared/utilities')\r\n\r\nconst pageConfigure = require('../configuration.js')\r\n\r\nclass DefaultView extends Component {\r\n    static defaultProps = {\r\n        defaultPage: 1,\r\n        categories: [],\r\n        pageContent: {\r\n            thumbnail: {}\r\n        }\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateViewProps = this.updateViewProps.bind(this)\r\n    }\r\n\r\n    updateViewProps(props) {\r\n        const { categories, match: { params: { category, page } }, onDataFetch } = props\r\n        const currentCategory = getCategoryByNameFromCatogires(category, categories)\r\n        const currentPage = page || props.defaultPage\r\n\r\n        const postParams = {\r\n            page: currentPage,\r\n            pageSize: pageConfigure.ITEM_PER_PAGE,\r\n            categories: currentCategory.id && { [ pageConfigure.TAXONOMY_TYPE_ID_CATEGORY ]: currentCategory.id },\r\n            entityTypeId: pageConfigure.ENTITY_TYPE_ID,\r\n            additionalFields: [ 'excerpt' ]\r\n        }\r\n        const baseItemPath = `/${pageConfigure.page}/${pageConfigure.detailPage}`\r\n\r\n        fetchEntities(pageConfigure.mvcController, postParams, baseItemPath, (items, totalPages) => {\r\n            onDataFetch({ items, totalPages }, 0)\r\n        })\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.updateViewProps(this.props)\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (JSON.stringify(nextProps.match) != JSON.stringify(this.props.match) ||\r\n            JSON.stringify(nextProps.categories) != JSON.stringify(this.props.categories)) {\r\n            this.updateViewProps(nextProps)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { match, pageContent: { thumbnail, title }, categories, items, totalPages, defaultPage } = this.props\r\n\r\n        const currentCategory = getCategoryByNameFromCatogires(match.params.category, categories)\r\n        const currentPage = match.params.page ? parseInt(match.params.page) : defaultPage\r\n\r\n        return (\r\n            <Row>\r\n                <Image className=\"h-100\" {...thumbnail} />\r\n                <SideBarToggleStart className=\"mt-4 mb-3\">\r\n                    <h1 className=\"page-titles\">\r\n                        <span className=\"page-title\">{ title }</span>\r\n                        <span>|</span>\r\n                        <span className=\"page-title\">{ currentCategory && currentCategory.title }</span>\r\n                    </h1>\r\n                </SideBarToggleStart>\r\n\r\n                {\r\n                    currentCategory && (\r\n                        <Pagination itemWrapperClassName=\"page-item\" className=\"w-100 pl-2 pl-lg-0 pr-2 pr-lg-0\"\r\n                            layout={ { xs: 12, sm: 12, md: 12, lg: 12, xl: 12 } }\r\n                            items={ items }\r\n                            totalPages={ totalPages }\r\n                            currentPage={ currentPage }\r\n                            templatePath={ String(match.path).replace(':category', currentCategory.name) }\r\n                            renderItem={ renderItem }\r\n                        />\r\n                    )\r\n                }\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const { totalPages, items, categories, pageContent } = state.connectedBasePage.pages[ pageConfigure.page ]\r\n    return {\r\n        totalPages,\r\n        items,\r\n        categories,\r\n        pageContent\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DefaultView)","﻿\r\nimport $ from 'jquery'\r\nimport { default as classNames } from 'classnames'\r\n\r\nimport { Link } from 'react-router-dom'\r\nimport { Row, Col } from 'reactstrap'\r\nimport { Title } from '../../shared/components'\r\n\r\nmodule.exports = class extends React.Component {\r\n    render() {\r\n        return (\r\n            <section className={ classNames('cong-trinh', this.props.className) }>\r\n                <Title>{ localizationString.getString('Công trình') }</Title>\r\n                <Row className=\"mt-2\">\r\n                    <Col xs=\"12\" md={ 6 } className=\"pr-1\">\r\n                        <Row className=\"mb-2\">\r\n                            <Col>\r\n                                <div data-aos=\"fade-left\">\r\n                                    <div className=\"link link-khach-san\">\r\n                                        <Link className=\"title\" to=\"/\" dangerouslySetInnerHTML={ { __html: localizationString.getString(\"Khách<br/>sạn\") } } />\r\n                                    </div>\r\n                                    <img className=\"w-100\" src=\"/img/khach-san-cover.jpg\" />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col>\r\n                                <div data-aos=\"fade-left\">\r\n                                    <div className=\"link link-can-ho\">\r\n                                        <Link className=\"title\" to=\"/\" dangerouslySetInnerHTML={ { __html: localizationString.getString(\"Căn<br/>hộ\") } } />\r\n                                    </div>\r\n                                    <img className=\"w-100\" src=\"/img/can-ho-cover.jpg\" />\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col xs=\"12\" md={ 6 } className=\"pl-1\">\r\n                        <div className=\"h-100\" data-aos=\"flip-left\" data-aos-delay=\"300\">\r\n                            <div className=\"link link-nha-o\">\r\n                                <Link className=\"title\" to=\"/\" dangerouslySetInnerHTML={ { __html: localizationString.getString(\"Nhà ở\") } } />\r\n                            </div>\r\n                            <img className=\"h-100 w-100\" src=\"/img/nha-o-cover.jpg\" />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </section>\r\n        );\r\n    }\r\n}","import { connect } from 'react-redux'\r\n\r\nconst { Row, Col } = require('reactstrap');\r\nconst { Link } = require('react-router-dom');\r\n\r\nimport { Title } from '../../shared/components'\r\n\r\nconst DuAnItem = require('../../shared/components/du-an/du-an');\r\n\r\nconst { fetchEntities } = require('../../shared/utilities');\r\n\r\nimport projectPageConfigure from '../../du-an/configuration'\r\nimport { renderItem } from '../../du-an/helper/render-items'\r\n\r\nclass DuAn extends React.Component {\r\n    static defaultProps = {\r\n        projectItems: []\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { onDataFetch } = this.props\r\n\r\n        const postParams = {\r\n            page: 1,\r\n            pageSize: 7,\r\n        }\r\n        const baseItemPath = `/${projectPageConfigure.page}/${projectPageConfigure.detailPath}`\r\n\r\n        fetchEntities(projectPageConfigure.mvcController, postParams, baseItemPath, (projectItems) => {\r\n            onDataFetch({ projectItems }, 0)\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const { projectItems, className } = this.props\r\n\r\n        return (\r\n            <section className={ className }>\r\n                <Title>{ localizationString.getString('Dự án') }</Title>\r\n                <Row className=\"pt-3\">\r\n                    {\r\n                        projectItems.map((project, index) => {\r\n                            return (\r\n                                <Col key={ project.id } xs=\"6\" md=\"4\" lg=\"3\" className=\"page-item\">\r\n                                    { renderItem(project) }\r\n                                </Col>\r\n                            );\r\n                        })\r\n                    }\r\n                    <Col xs=\"6\" md=\"4\" lg=\"3\" className=\"page-item\">\r\n                        <div className=\"h-100\" data-aos=\"zoom-in-up\">\r\n                            <div className=\"project-load-more\">\r\n                                <div className=\"overlay\" />\r\n                                <div className=\"content mr-3 mr-lg-5\">\r\n                                    <h5 className=\"cant-find\"> can’t find<br /> your project</h5>\r\n                                    <div className=\"dots clearfix\">\r\n                                        <div className=\"dot\" />\r\n                                        <div className=\"dot\" />\r\n                                        <div className=\"dot\" />\r\n                                        <div className=\"dot\" />\r\n                                    </div>\r\n                                    <div className=\"mt-4\">\r\n                                        <Link to=\"/du-an\" className=\"btn-white mt-4\">Load more</Link>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const { projectItems } = state.connectedBasePage.pages[ 'trang-chu' ]\r\n\r\n    return {\r\n        projectItems\r\n    }\r\n}\r\n\r\nmodule.exports = connect(mapStateToProps)(DuAn);","﻿\r\nconst $ = require('jquery');\r\nconst OwlCarousel = require('react-owl-carousel2');\r\n\r\nclass Slider extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            slides: []\r\n            /* Chú ý: slides không phải là một array của hình ảnh.\r\n            Ví dụ cho 'slides'\r\n                slides: [\r\n                    {\r\n                        \"image\": {\r\n                            \"urlThumb\": \"uploads/2/2017/6/slider-2-2017-6-9-310_thumb.jpg\",\r\n                            \"dimension\": \"Size [ Width=1058, Height=463 ]\",\r\n                            \"title\": \"slider-2\",\r\n                            \"description\": null,\r\n                            \"fileName\": null,\r\n                            \"url\": \"uploads/2/2017/6/slider-2-2017-6-9-310.jpg\",\r\n                            \"type\": \"Image\",\r\n                            \"extension\": \".jpg\",\r\n                            \"size\": \"194 KB\",\r\n                            \"taxonomyTypes\": null\r\n                        }\r\n                    },...\r\n                ]\r\n            Hình ảnh('image') chỉ là một prop của 'slide', và còn một số prop khác như caption, etc... sẽ được thêm vào sau này nếu cần thiết.\r\n            */,\r\n            options: {\r\n                items: 1,\r\n                nav: false,\r\n                rewind: false,\r\n                autoplay: true\r\n            }\r\n        };\r\n        $.get(\r\n            \"/album/getsingle?entityName=home-slider\",\r\n            (response) => {\r\n                this.setState({slides: response.details.images})\r\n            }\r\n        );\r\n    }\r\n\r\n    componentWillUpdate(){\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className={this.props.className}>\r\n                { this.state.slides.length && \r\n                    <OwlCarousel ref={owl => {this.owl = owl;}} options={this.state.options}>\r\n                    {\r\n                        this.state.slides.map((slide, index) => {\r\n                            return(\r\n                                <div key={index} id={`slide${index}`}>\r\n                                    <img src={slide.image.url} alt={slide.image.description} title={slide.image.title}/>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                    </OwlCarousel>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nmodule.exports = Slider;","﻿\r\nimport { default as BasePage } from '../shared/_layout/main/base-page'\r\n\r\nconst { Container } = require('reactstrap');\r\nconst Slider = require('./components/slider');\r\nconst ConTrinh = require('./components/cong-trinh');\r\nconst DuAn = require('./components/du-an');\r\n\r\n\r\nclass PageComponent extends React.Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { onError, onDataFetch, dataFetchProgress, projectItems } = this.props;\r\n\r\n    }\r\n\r\n    render() {\r\n        const { dataFetchProgress, onDataFetch } = this.props;\r\n\r\n        return (\r\n            <div id=\"gioi-thieu\">\r\n                <Slider className=\"mb-lg-5\" />\r\n                <Container className=\"pt-5\">\r\n                    <ConTrinh className=\"mb-3 mb-md-5\" />\r\n                    <DuAn className=\"pt-5\" onDataFetch={ onDataFetch } />\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nmodule.exports = BasePage({ page: 'trang-chu' })(PageComponent);","/*!\n  Copyright (c) 2016 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tclasses.push(classNames.apply(null, arg));\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","'use strict';\n\nexports.__esModule = true;\nexports['default'] = shouldPureComponentUpdate;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _shallowEqual = require('./shallowEqual');\n\nvar _shallowEqual2 = _interopRequireDefault(_shallowEqual);\n\nfunction shouldPureComponentUpdate(nextProps, nextState) {\n  return !(0, _shallowEqual2['default'])(this.props, nextProps) || !(0, _shallowEqual2['default'])(this.state, nextState);\n}\n\nmodule.exports = exports['default'];","'use strict';\n\nexports.__esModule = true;\nexports['default'] = shallowEqual;\n\nfunction shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);\n  for (var i = 0; i < keysA.length; i++) {\n    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = exports['default'];","//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind,\n    nativeCreate       = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.8.3';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n  };\n  _.iteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, undefinedOnly) {\n    return function(obj) {\n      var length = arguments.length;\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var property = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = property('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function(obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    if (isArrayLike(obj)) {\n      key = _.findIndex(obj, predicate, context);\n    } else {\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      var func = isFunc ? method : value[method];\n      return func == null ? func : func.apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var set = isArrayLike(obj) ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iteratee, context) {\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var pass = [], fail = [];\n    _.each(obj, function(value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0;\n    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    return _.unzip(arguments);\n  };\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions\n  function createPredicateIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a predicate test\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n            i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  }\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var args = slice.call(arguments, 2);\n    var bound = function() {\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var i, length = arguments.length, key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  function collectNonEnumProps(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object\n  // In contrast to _.map it returns an object\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys =  _.keys(obj),\n          length = keys.length,\n          results = {},\n          currentKey;\n      for (var index = 0; index < length; index++) {\n        currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s)\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(object, oiteratee, context) {\n    var result = {}, obj = object, iteratee, keys;\n    if (obj == null) return result;\n    if (_.isFunction(oiteratee)) {\n      keys = _.allKeys(obj);\n      iteratee = optimizeCb(oiteratee, context);\n    } else {\n      keys = flatten(arguments, false, false, 1);\n      iteratee = function(value, key, obj) { return key in obj; };\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(flatten(arguments, false, false, 1), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), and in Safari 8 (#1929).\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  _.property = property;\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    return obj == null ? function(){} : function(key) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n   // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return '' + this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define === 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}.call(this));\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}