(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
ï»¿const React = require('react');
const Redux = require('redux');

const reduxForm = require('redux-form').reduxForm;
const formReducer = require('redux-form').reducer;
const {Provider, connect} = require('react-redux');
const LoginForm = require('./components/loginForm');
const $ = require('jquery');
const validator = require('corein').validator;

const reducers = {
    form: formReducer
}

const reducer = Redux.combineReducers(reducers);

const store = Redux.createStore(reducer);

const Login = (props) => {
    const {index: {forms: {default: {title, description, fields, initialValues}}, resources}} = props;

    const validate = validator(fields);

    var ReduxLoginForm = reduxForm({ form: 'registerForm', validate })(LoginForm);
    ReduxLoginForm = connect(
        state => ({
            initialValues,
            display: {
                title, description
            },
            fields
        })
    )(ReduxLoginForm);

    return (
        React.createElement(Provider, {store: store}, 
            React.createElement("div", {className: "container"}, 
                React.createElement("div", {className: "row"}, 
                    React.createElement("div", {className: "col-md-7 mx-auto mt-2 pull-xs-none vamiddle"}, 
                        React.createElement("div", {className: "card-group"}, 
                            React.createElement("div", {className: "card p-a-2"}, 
                                React.createElement(ReduxLoginForm, null)
                            ), 
                            React.createElement("div", {className: "card bg-transparent no-border"}, 
                                React.createElement("div", {className: "card-block text-xs-center"}, 
                                    React.createElement("div", null, 
                                        React.createElement("h2", null, resources.register), 
                                        React.createElement("p", null, resources.registerDescription), 
                                        React.createElement("a", {href: resources.registerUrl, className: "btn btn-primary active"}, resources.registerLinkLabel)
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    );
}

global.Login = Login;

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./components/loginForm":2,"corein":6,"jquery":"XpFelZ","react":"b6Dds6","react-redux":"MzQWgz","redux":"czVV+t","redux-form":"LVfYvK"}],2:[function(require,module,exports){
const React = require('react');
const {reduxForm, Field} = require('redux-form');
const {FormFeedback, FormGroup, Label, Button, Input, InputGroup, InputGroupAddon, Alert} = require('reactstrap');
const $ = require('jquery');
const corein = require('corein');
const renderField = require('corein').renderField;

const submit = require('./submit').loginSubmit;

const form = (props) => {
    const { error, handleSubmit, pristine, reset, submitting, submitSucceeded, fields, display } = props;

    const formFields = [];

    $.map(fields, (props, index) => {
        const {input: {name, value}, display} = props;
        formFields.push(React.createElement(Field, {key: index, component: renderField, name: name, value: value, display: display}));
    });

    return (
        React.createElement("div", {id: "LoginForm"}, 
            React.createElement("form", {onSubmit: handleSubmit(submit), className: "card-block"}, 
                React.createElement("h1", null, display.title), 
                React.createElement("p", {className: "text-muted"}, display.description), 
                !submitting && (error && React.createElement(Alert, {color: "danger"}, error)), 
                formFields, 
                React.createElement("div", null, 
                    React.createElement(Button, {type: "submit", disabled: submitting}, display.submitLabel ? display.submitLabel : "Submit")
                )
            )
        )
    );
};

module.exports = form

},{"./submit":3,"corein":6,"jquery":"XpFelZ","react":"b6Dds6","reactstrap":"jldOQ7","redux-form":"LVfYvK"}],3:[function(require,module,exports){
var $ = require('jquery');
var {SubmissionError} = require('redux-form');

const loginRequest = data => new Promise((resolve, reject) =>
    $.ajax({
        url: 'login',
        method: 'POST',
        data: data,
        success: (response) => {
            if (response.result === "success") {
                resolve(response);
            }
            else {
                reject(response);
            }
        },
        error: (response) => {
            reject(response);
        }
    })
)

function loginSubmit(values) {
    return loginRequest(values)
        .then((response) => {
            window.location.href = response.returnUrl;
        })
        .catch((response) => {
            if (response.result && response.result === "error") {
                throw new SubmissionError(response.errors);
            } else {
                throw new SubmissionError({ _error: 'Login failed!' })
            }
        });
}

module.exports = {
    loginSubmit: loginSubmit
}

},{"jquery":"XpFelZ","redux-form":"LVfYvK"}],4:[function(require,module,exports){
var React = require('react');
var {Input, InputGroup, InputGroupAddon, FormFeedback, FormGroup, FormText, Label} = require('reactstrap');

const RenderInput = (props) => {
    const {input, id, type, placeholder, validationState} = props;

    return ( 
        React.createElement(Input, React.__spread({},  input, {id: id, state: validationState, type: type, placeholder: placeholder}))
    )
}

const RenderInputGroup = (props) => {
    const {input, display: {id, type, label, displayName, placeholder, prompt}, meta: {touched, error, warning}} = props;

    var validationState = touched ? (error ? 'danger' : (warning ? 'warning' : 'success')) : undefined;

    return (
        React.createElement(FormGroup, {color: validationState, className: "mb-1"}, 
            React.createElement(InputGroup, null, 
                React.createElement(InputGroupAddon, {dangerouslySetInnerHTML: { __html: label}}), 
                React.createElement(Input, React.__spread({},  input, {id: id, state: validationState, type: type, placeholder: placeholder ? placeholder : displayName}))
            ), 
            prompt && React.createElement(FormText, {color: "muted"}, prompt), 
            touched && ((error && React.createElement(FormFeedback, null, error)) || (warning && React.createElement(FormFeedback, null, warning)))
        )
    );
}

const RenderCheckBox = (props) => {
    const {input, display: {id, placeholder}} = props;
    return (
        React.createElement(FormGroup, {check: true}, 
            React.createElement(Label, {check: true}, 
                React.createElement(Input, React.__spread({},  input, {id: id, type: "checkbox"})), 
                ' ' + placeholder
            )
        )
    );
}

const renderField = props => {
    const {display: {renderType}} = props;
    if (renderType === "inputgroup") {
        return RenderInputGroup(props);
    } else if (renderType === 'formgroup'){
        return RenderFormGroup(props);
    } else if (renderType === 'checkbox') {
        return RenderCheckBox(props);
    }
}

module.exports = renderField;

},{"react":"b6Dds6","reactstrap":"jldOQ7"}],5:[function(require,module,exports){
const isType = (value, type) => {
    switch (type) {
        case 'email':
            return value && /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(value);
    }
    return false;
}

const validator = validating => values => {
    const errors = {};

    for (var property in validating) {

        var fieldName = validating[property].input.name;

        var hasRequired = validating[property].validate.required;
        var typeRequired = validating[property].validate.type;
        var minLengthRequired = validating[property].validate.minLength;
        var maxLengthRequired = validating[property].validate.maxLength;
        var hasCompare = validating[property].validate.compare;

        var hasContainLowercase = validating[property].validate.containLower;
        var hasContainUppercase = validating[property].validate.containUpper;
        var hasContainNumber = validating[property].validate.containNumber;
        var hasContainSpecialChar = validating[property].validate.containSpecial;

        if (hasRequired && hasRequired.value && !values[fieldName]) {
            errors[fieldName] = hasRequired.error;
        }
        else if (typeRequired && !isType(values[fieldName], typeRequired.value)) {
            errors[fieldName] = typeRequired.error;
        }
        else if (minLengthRequired && values[fieldName] && values[fieldName].length < minLengthRequired.value) {
            errors[fieldName] = minLengthRequired.error;
        }
        else if (hasCompare && values[fieldName] != values[hasCompare.value]) {
            errors[fieldName] = hasCompare.error;
        }
        else if (hasContainLowercase && !/(?=.*[a-z])/.test(values[fieldName])) {
            errors[fieldName] = hasContainLowercase.error;
        }
        else if (hasContainUppercase && !/(?=.*[A-Z])/.test(values[fieldName])) {
            errors[fieldName] = hasContainUppercase.error;
        }
        else if (hasContainNumber && !/(?=.*[0-9])/.test(values[fieldName])) {
            errors[fieldName] = hasContainNumber.error;
        }
        else if (hasContainSpecialChar && !/(?=.*[!@#$%^&*])/.test(values[fieldName])) {
            errors[fieldName] = hasContainSpecialChar.error;
        }
    }

    return errors;
}

module.exports = validator

},{}],6:[function(require,module,exports){
var renderField = require('./components/formField.jsx');
var validator = require('./components/validator');

module.exports = {
    renderField,
    validator
};

},{"./components/formField.jsx":4,"./components/validator":5}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
